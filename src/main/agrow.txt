
----- FIN DE agrow.txt -----

package cr.ac.una.agrow;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AgrowApplication {

	public static void main(String[] args) {
		SpringApplication.run(AgrowApplication.class, args);
	}

}

----- FIN DE java\cr\ac\una\agrow\AgrowApplication.java -----

package cr.ac.una.agrow.config;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String DATABASE = "db_agrow";
    private static final String USER = "root";
    private static final String PASSWORD = "";
    private static final int PORT = 3306;
    private static final String HOST = "localhost";

    private static Connection connection;

    public static Connection getConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String URL = "jdbc:mysql://" + HOST + ":" + PORT + "/" + DATABASE;
            connection = DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            System.out.println("Error al cargar el driver: " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("Error de conexión: " + e.getMessage());
        }
        return connection;
    }
}

----- FIN DE java\cr\ac\una\agrow\config\DBConnection.java -----

package cr.ac.una.Agrow.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/")
public class HomeController {

    @GetMapping({"", "home"})
    public String home(Model model) {
        model.addAttribute("activeModule", "home");
        return "index";
    }
}

----- FIN DE java\cr\ac\una\agrow\controller\HomeController.java -----

package cr.ac.una.agrow.controller.producer;

import cr.ac.una.agrow.domain.producer.Producer;
import cr.ac.una.agrow.service.producer.ProducerService;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.LinkedList;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/producers")
public class ProducerController {

    private static final DateTimeFormatter DATE_FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    @PostMapping("/save")
    public String saveProducer(
            @RequestParam("producerName") String name,
            @RequestParam("contactNumber") String contact,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam("producerType") String type,
            @RequestParam("email") String email,
            @RequestParam("address") String address,
            @RequestParam("city") String city,
            RedirectAttributes redirectAttributes) {

        if (name == null || name.trim().isEmpty() || contact == null || contact.trim().isEmpty() ||
            registrationDateStr == null || registrationDateStr.isEmpty() || type == null || type.isEmpty() ||
            email == null || email.trim().isEmpty() || city == null || city.isEmpty() ||
            address == null || address.trim().isEmpty()) {
             redirectAttributes.addFlashAttribute("error", "Todos los campos son obligatorios.");
             return "redirect:/producers/form";
        }

        LocalDate registrationDate;
        try {
            registrationDate = LocalDate.parse(registrationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
             redirectAttributes.addFlashAttribute("error", "Formato de fecha de registro inválido. Use el selector.");
             return "redirect:/producers/form";
        }
        if (registrationDate.isAfter(LocalDate.now())) {
             redirectAttributes.addFlashAttribute("error", "La fecha de registro no puede ser futura.");
             return "redirect:/producers/form";
        }

        Producer p = new Producer(0, name.trim(), contact.trim(), registrationDate, type, email.trim(), city, address.trim(), true);

        String resultMessage = ProducerService.saveProducer(p);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/form")
    public String showSaveForm(Model model) {
        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);
        model.addAttribute("producer", new Producer());
        model.addAttribute("isEdit", false);
        model.addAttribute("activeModule", "producer");
        model.addAttribute("activePage", "add");
        return "save_producer";
    }

    @PostMapping("/update")
    public String updateProducer(
            @RequestParam("id_producer") int id,
            @RequestParam("producerName") String name,
            @RequestParam("contactNumber") String contact,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam("producerType") String type,
            @RequestParam("email") String email,
            @RequestParam("city") String city,
            @RequestParam("address") String address,
            @RequestParam(value = "isActive", required = false) boolean active,
            RedirectAttributes redirectAttributes) {

         if (name == null || name.trim().isEmpty() || contact == null || contact.trim().isEmpty() ||
             registrationDateStr == null || registrationDateStr.isEmpty() || type == null || type.isEmpty() ||
             email == null || email.trim().isEmpty() || city == null || city.isEmpty() ||
             address == null || address.trim().isEmpty()) {
              redirectAttributes.addFlashAttribute("error", "Todos los campos son obligatorios.");
              return "redirect:/producers/edit?id_producer=" + id;
         }

         LocalDate registrationDate;
         try {
             registrationDate = LocalDate.parse(registrationDateStr, DATE_FORMAT_DD_MM_YYYY);
         } catch (DateTimeParseException e) {
              redirectAttributes.addFlashAttribute("error", "Formato de fecha de registro inválido. Use el selector.");
              return "redirect:/producers/edit?id_producer=" + id;
         }
         if (registrationDate.isAfter(LocalDate.now())) {
              redirectAttributes.addFlashAttribute("error", "La fecha de registro no puede ser futura.");
              return "redirect:/producers/edit?id_producer=" + id;
         }

        Producer p = new Producer(id, name.trim(), contact.trim(), registrationDate, type, email.trim(), city, address.trim(), active);

        String resultMessage = ProducerService.updateProducer(p);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/edit")
    public String showUpdateForm(
            @RequestParam("id_producer") int id,
            Model model,
            RedirectAttributes redirectAttributes) {

        Producer producer = ProducerService.getProducer(id);

        if (producer == null) {
            redirectAttributes.addFlashAttribute("error", "Productor con ID " + id + " no encontrado.");
            return "redirect:/producers/list";
        }

        model.addAttribute("producer", producer);
        model.addAttribute("isEdit", true);
        model.addAttribute("activeModule", "producer");

        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);


        return "update_producer";
    }


    @GetMapping("/list")
    public String listProducers(
            @RequestParam(value = "city", required = false) String city,
            @RequestParam(value = "id_producer", required = false) Integer id,
            Model model) {

        LinkedList<Producer> producers;
        String validationMessage = null;

        if (id != null) {
            Producer producer = ProducerService.getProducer(id);
            producers = new LinkedList<>();
            if (producer != null) {
                producers.add(producer);
            } else {
                validationMessage = "El productor con Código/ID " + id + " no existe.";
            }
            model.addAttribute("searchId", id);
        } else if (city != null && !city.trim().isEmpty()) {
            producers = ProducerService.listProducer("city", city.trim());
            if (producers == null || producers.isEmpty()) {
                validationMessage = "No hay productores registrados en la ciudad seleccionada: " + city;
            }
            model.addAttribute("selectedCity", city);
        } else {
            producers = ProducerService.listProducer("allProducer", null);
             if (producers == null || producers.isEmpty()) {
                validationMessage = "No hay productores registrados.";
            }
        }

        model.addAttribute("listP", producers);
        model.addAttribute("validate", validationMessage);
        model.addAttribute("activeModule", "producer");
        model.addAttribute("activePage", "list");
        return "producers_list";
    }


    @PostMapping("/delete")
    public String deleteProducerButton(
            @RequestParam("id_producer") int id,
            RedirectAttributes redirectAttributes) {
        String resultMessage = ProducerService.deleteProducer(id);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/information")
    public String information(
            @RequestParam("id_producer") int id,
             Model model, RedirectAttributes redirectAttributes) {
        Producer producer = ProducerService.getProducer(id);
        if (producer == null) {
            redirectAttributes.addFlashAttribute("error", "Productor con ID " + id + " no encontrado.");
            return "redirect:/producers/list";
        }
        model.addAttribute("producer", producer);
        model.addAttribute("activeModule", "producer");
        return "information_producer";
    }

}

----- FIN DE java\cr\ac\una\agrow\controller\producer\ProducerController.java -----

package cr.ac.una.agrow.controller.supplier;

import cr.ac.una.agrow.domain.supplier.Supplier;
import cr.ac.una.agrow.data.supplier.DataSupplier;
import cr.ac.una.agrow.service.supplier.SupplierService;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.LinkedList;
import java.util.List;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/suppliers")
public class SupplierController {

    @GetMapping("/list")
    public String listSuppliers(
            @RequestParam(value = "search", required = false) String search,
            Model model) {

        List<Supplier> suppliers;
        String validationMessage = null;

        if (search != null && !search.trim().isEmpty()) {
            suppliers = DataSupplier.findSuppliers(search.trim());
            if (suppliers == null || suppliers.isEmpty()) {
                validationMessage = "No se encontraron proveedores con el criterio: '" + search + "'";
            }
            model.addAttribute("searchTerm", search.trim());
        } else {
            suppliers = DataSupplier.getAllSuppliers();
            if (suppliers == null || suppliers.isEmpty()) {
                validationMessage = "No hay proveedores registrados.";
            }
        }

        model.addAttribute("listS", suppliers);
        model.addAttribute("validate", validationMessage);
        model.addAttribute("activeModule", "supplier");
        model.addAttribute("activePage", "list");
        return "supplier/supplier_list";
    }

    @GetMapping("/form")
    public String showSaveForm(Model model) {
        model.addAttribute("supplier", new Supplier());
        model.addAttribute("isEdit", false);
        model.addAttribute("activeModule", "supplier");
        model.addAttribute("activePage", "add");
        return "supplier/form_supplier";
    }

    @PostMapping("/save")
    public String saveSupplier(
            @RequestParam("supplierIdentification") int supplierIdentification,
            @RequestParam("supplierName") String supplierName,
            @RequestParam("companyName") String companyName,
            @RequestParam("phoneNumber") int phoneNumber,
            @RequestParam("email") String email,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam(value = "isActive", defaultValue = "false") boolean isActive,
            @RequestParam("creditLimit") double creditLimit,
            RedirectAttributes redirectAttributes) {

        String error = SupplierService.validateSupplierData(supplierIdentification, supplierName, companyName, phoneNumber, email, registrationDateStr, creditLimit);
        if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            Supplier supplierData = new Supplier(supplierIdentification, supplierName, companyName, phoneNumber, email, null, isActive, creditLimit);
            redirectAttributes.addFlashAttribute("supplier", supplierData);
            redirectAttributes.addFlashAttribute("registrationDateStr", registrationDateStr);
            return "redirect:/suppliers/form";
        }

        LocalDate registrationDate;
        try {
            registrationDate = LocalDate.parse(registrationDateStr);
        } catch (DateTimeParseException e) {
            redirectAttributes.addFlashAttribute("error", "Formato de fecha inválido.");
            Supplier supplierData = new Supplier(supplierIdentification, supplierName, companyName, phoneNumber, email, null, isActive, creditLimit);
            redirectAttributes.addFlashAttribute("supplier", supplierData);
            redirectAttributes.addFlashAttribute("registrationDateStr", registrationDateStr);
            return "redirect:/suppliers/form";
        }

        Supplier supplier = new Supplier(supplierIdentification, supplierName, companyName, phoneNumber, email, registrationDate, isActive, creditLimit);
        String resultMessage = DataSupplier.saveSupplier(supplier);
        String[] parts = SupplierService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }
        return "redirect:/suppliers/list";
    }

    @GetMapping("/edit")
    public String showUpdateForm(
            @RequestParam("id") int id,
            Model model,
            RedirectAttributes redirectAttributes) {

        Supplier supplier = DataSupplier.getSupplierById(id);
        if (supplier == null) {
            redirectAttributes.addFlashAttribute("error", "Proveedor con ID " + id + " no encontrado.");
            return "redirect:/suppliers/list";
        }
        model.addAttribute("supplier", supplier);
        model.addAttribute("isEdit", true);
        model.addAttribute("activeModule", "supplier");
        model.addAttribute("registrationDateForInput", supplier.getRegistrationDateForInput());
        return "supplier/update_supplier";
    }

    @PostMapping("/update")
    public String updateSupplier(
            @RequestParam("supplierIdentification") int supplierIdentification,
            @RequestParam("supplierName") String supplierName,
            @RequestParam("companyName") String companyName,
            @RequestParam("phoneNumber") int phoneNumber,
            @RequestParam("email") String email,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam(value = "isActive", defaultValue = "false") boolean isActive,
            @RequestParam("creditLimit") double creditLimit,
            RedirectAttributes redirectAttributes) {

        String error = SupplierService.validateSupplierData(supplierIdentification, supplierName, companyName, phoneNumber, email, registrationDateStr, creditLimit);
         if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            return "redirect:/suppliers/edit?id=" + supplierIdentification;
        }

        LocalDate registrationDate;
        try {
            registrationDate = LocalDate.parse(registrationDateStr);
        } catch (DateTimeParseException e) {
            redirectAttributes.addFlashAttribute("error", "Formato de fecha inválido.");
            return "redirect:/suppliers/edit?id=" + supplierIdentification;
        }

        Supplier supplier = new Supplier(supplierIdentification, supplierName, companyName, phoneNumber, email, registrationDate, isActive, creditLimit);
        String resultMessage = DataSupplier.updateSupplier(supplier);
        String[] parts = SupplierService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }
        return "redirect:/suppliers/list";
    }

    @PostMapping("/delete")
    public String deleteSupplier(
            @RequestParam("id") int id,
            RedirectAttributes redirectAttributes) {
        String resultMessage = DataSupplier.deleteSupplier(id);
        String[] parts = SupplierService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }
        return "redirect:/suppliers/list";
    }

    @GetMapping("/view")
    public String viewSupplier(
            @RequestParam("id") int id,
            Model model, RedirectAttributes redirectAttributes) {
        Supplier supplier = DataSupplier.getSupplierById(id);
        if (supplier == null) {
            redirectAttributes.addFlashAttribute("error", "Proveedor con ID " + id + " no encontrado.");
            return "redirect:/suppliers/list";
        }
        model.addAttribute("supplier", supplier);
        model.addAttribute("activeModule", "supplier");
        return "supplier/view_supplier";
    }
}

----- FIN DE java\cr\ac\una\agrow\controller\supplier\SupplierController.java -----

package cr.ac.una.agrow.controller.supply;

import cr.ac.una.agrow.data.supplier.DataSupplier;
import cr.ac.una.agrow.data.supply.DataSupply;
import cr.ac.una.agrow.domain.supplier.Supplier;
import cr.ac.una.agrow.domain.supply.Supply;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/supplies")
public class SupplyController {

    private static final DateTimeFormatter DATE_FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DateTimeFormatter DATE_FORMAT_YYYY_MM_DD = DateTimeFormatter.ISO_LOCAL_DATE;

    private void addSuppliersToModel(Model model) {
        List<Supplier> suppliers = DataSupplier.getAllSuppliers();
        model.addAttribute("suppliers", suppliers);
        Map<Integer, String> supplierMap = suppliers.stream()
            .collect(Collectors.toMap(Supplier::getSupplierIdentification, Supplier::getCompanyName));
        model.addAttribute("supplierMap", supplierMap);
    }

    @GetMapping("/list")
    public String listadoSupplies(
            @RequestParam(value = "searchTerm", required = false) String searchTerm,
            @RequestParam(value = "category", required = false) String category,
            @RequestParam(value = "supplierId", required = false) Integer supplierId,
            Model model) {

        List<Supply> listaSupplies;
        if ((searchTerm != null && !searchTerm.trim().isEmpty()) ||
            (category != null && !category.trim().isEmpty()) ||
            (supplierId != null && supplierId > 0)) {
            listaSupplies = DataSupply.getFilteredSupplies(searchTerm, category, supplierId);
        } else {
            listaSupplies = DataSupply.getSupplies();
        }

        addSuppliersToModel(model);

        model.addAttribute("titulo", "Listado de Suministros");
        model.addAttribute("cantidad", listaSupplies != null ? listaSupplies.size() : 0);
        model.addAttribute("supplies", listaSupplies);
        model.addAttribute("searchTerm", searchTerm);
        model.addAttribute("selectedCategory", category);
        model.addAttribute("selectedSupplierId", supplierId);
        model.addAttribute("activeModule", "supply");
        model.addAttribute("activePage", "list");
        return "list_supply";
    }

    @GetMapping("/form")
    public String mostrarFormularioSupply(Model model) {
        addSuppliersToModel(model);
        model.addAttribute("activeModule", "supply");
        model.addAttribute("activePage", "add");
        model.addAttribute("supply", new Supply());
        model.addAttribute("isEdit", false);
        return "form_supply";
    }

    @PostMapping("/save")
    public String guardarSupply(
            @RequestParam("name") String name,
            @RequestParam("category") String category,
            @RequestParam("stock") double stock,
            @RequestParam("stockMinimo") double stockMinimo,
            @RequestParam("unitType") String unitType,
            @RequestParam("pricePerUnit") double pricePerUnit,
            @RequestParam(value = "expirationDate", required = true) String expirationDateStr,
            @RequestParam(value="supplierId", required=false) Integer supplierId,
            RedirectAttributes redirectAttributes) {

        String error = validateSupplyFields(name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDateStr, supplierId);
        if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            Supply supplyData = new Supply(name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId);
            redirectAttributes.addFlashAttribute("supply", supplyData);
            redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
            return "redirect:/supplies/form";
        }

        LocalDate expDate;
        try {
             expDate = LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
             if(expDate.isBefore(LocalDate.now())) {
                 throw new DateTimeParseException("La fecha de vencimiento no puede ser pasada.", expirationDateStr, 0);
             }
        } catch (DateTimeParseException e) {
             redirectAttributes.addFlashAttribute("error", "Formato de fecha de vencimiento inválido (dd/MM/yyyy) o fecha pasada.");
             Supply supplyData = new Supply(name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId);
             redirectAttributes.addFlashAttribute("supply", supplyData);
             redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
             return "redirect:/supplies/form";
        }

        Supplier supplierCheck = DataSupplier.getSupplierById(supplierId);
         if (supplierCheck == null) {
              redirectAttributes.addFlashAttribute("error", "El ID de proveedor seleccionado (" + supplierId + ") no existe.");
              Supply supplyData = new Supply(name, category, stock, stockMinimo, unitType, pricePerUnit, expDate, supplierId);
              redirectAttributes.addFlashAttribute("supply", supplyData);
              redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
              return "redirect:/supplies/form";
         }

        Supply supply = new Supply(name.trim(), category.trim(), stock, stockMinimo, unitType.trim(), pricePerUnit, expDate, supplierId);
        Supply savedSupply = null;
        try {
            savedSupply = DataSupply.saveSupply(supply);
             if (savedSupply != null && savedSupply.getIdSupply() > 0) {
                 redirectAttributes.addFlashAttribute("mensaje", "Suministro '" + savedSupply.getName() + "' guardado exitosamente.");
                 return "redirect:/supplies/list";
             } else {
                 redirectAttributes.addFlashAttribute("error", "Error al guardar el suministro. No se pudo confirmar la operación.");
                 redirectAttributes.addFlashAttribute("supply", supply);
                 redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
                 return "redirect:/supplies/form";
             }
        } catch (Exception e) {
             redirectAttributes.addFlashAttribute("error", "Error al guardar el suministro: " + e.getMessage());
             redirectAttributes.addFlashAttribute("supply", supply);
             redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
             return "redirect:/supplies/form";
        }
    }

    @GetMapping("/edit")
    public String editarSupply(@RequestParam("idSupply") int idSupply, Model model, RedirectAttributes redirectAttributes) {
        Supply supply = DataSupply.getSupply(idSupply);
        if (supply == null) {
            redirectAttributes.addFlashAttribute("error", "El suministro seleccionado (ID: " + idSupply + ") no existe.");
            return "redirect:/supplies/list";
        }
        addSuppliersToModel(model);
        model.addAttribute("supply", supply);
        model.addAttribute("isEdit", true);
        model.addAttribute("activeModule", "supply");
        model.addAttribute("expirationDateForInput", supply.getExpirationDateForInput());
        return "edit_supply";
    }

    @PostMapping("/update")
    public String actualizarSupply(
            @RequestParam("idSupply") int idSupply,
            @RequestParam("name") String name,
            @RequestParam("category") String category,
            @RequestParam("stock") double stock,
            @RequestParam("stockMinimo") double stockMinimo,
            @RequestParam("unitType") String unitType,
            @RequestParam("pricePerUnit") double pricePerUnit,
            @RequestParam(value = "expirationDate", required = true) String expirationDateStr,
            @RequestParam(value="supplierId", required=false) Integer supplierId,
            RedirectAttributes redirectAttributes) {

        String error = validateSupplyFields(name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDateStr, supplierId);
        if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            return "redirect:/supplies/edit?idSupply=" + idSupply;
        }

         LocalDate expDate;
         try {
             expDate = LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
              if(expDate.isBefore(LocalDate.now())) {
                 throw new DateTimeParseException("La fecha de vencimiento no puede ser pasada.", expirationDateStr, 0);
             }
         } catch (DateTimeParseException e) {
              redirectAttributes.addFlashAttribute("error", "Formato de fecha de vencimiento inválido (dd/MM/yyyy) o fecha pasada.");
              return "redirect:/supplies/edit?idSupply=" + idSupply;
         }

          Supplier supplierCheck = DataSupplier.getSupplierById(supplierId);
          if (supplierCheck == null) {
               redirectAttributes.addFlashAttribute("error", "El ID de proveedor seleccionado (" + supplierId + ") no existe.");
               return "redirect:/supplies/edit?idSupply=" + idSupply;
          }

        Supply supply = new Supply(idSupply, name.trim(), category.trim(), stock, stockMinimo, unitType.trim(), pricePerUnit, expDate, supplierId);
        boolean actualizado = false;
         try {
             actualizado = DataSupply.updateSupply(supply);
             if (!actualizado) {
                 redirectAttributes.addFlashAttribute("error", "Error al actualizar el suministro. ID no encontrado o sin cambios detectados.");
                 return "redirect:/supplies/edit?idSupply=" + idSupply;
             } else {
                 redirectAttributes.addFlashAttribute("mensaje", "Suministro '" + supply.getName() + "' actualizado exitosamente.");
                 return "redirect:/supplies/list";
             }
         } catch (Exception e) {
              redirectAttributes.addFlashAttribute("error", "Error al actualizar el suministro: " + e.getMessage());
              return "redirect:/supplies/edit?idSupply=" + idSupply;
         }
    }

    @PostMapping("/delete")
    public String eliminarSupply(@RequestParam("idSupply") int idSupply, RedirectAttributes redirectAttributes) {
        boolean eliminado = false;
        Supply supplyToDelete = DataSupply.getSupply(idSupply);
        String supplyName = (supplyToDelete != null) ? supplyToDelete.getName() : "ID " + idSupply;

        try {
            eliminado = DataSupply.deleteSupply(idSupply);
             if (!eliminado) {
                redirectAttributes.addFlashAttribute("error", "Error al eliminar '" + supplyName + "'. Puede estar en uso o no existir.");
            } else {
                redirectAttributes.addFlashAttribute("mensaje", "Suministro '" + supplyName + "' eliminado exitosamente.");
            }
        } catch (Exception e) {
             redirectAttributes.addFlashAttribute("error", "Error al eliminar '" + supplyName + "': " + e.getMessage());
        }
        return "redirect:/supplies/list";
    }

    @GetMapping("/view")
    public String verSupply(@RequestParam("idSupply") int idSupply, Model model, RedirectAttributes redirectAttributes) {
        Supply supply = DataSupply.getSupply(idSupply);
        if (supply == null) {
            redirectAttributes.addFlashAttribute("error", "El suministro solicitado (ID: " + idSupply + ") no se encuentra.");
            return "redirect:/supplies/list";
        }
        model.addAttribute("supply", supply);
        model.addAttribute("activeModule", "supply");
        return "view_supply";
    }

    private String validateSupplyFields(String name, String category, double stock, double stockMinimo,
                                        String unitType, double pricePerUnit, String expirationDateStr, Integer supplierId) {
        if (name == null || name.trim().isEmpty()) return "El nombre es obligatorio.";
        if (category == null || category.trim().isEmpty()) return "La categoría es obligatoria.";
        if (unitType == null || unitType.trim().isEmpty()) return "El tipo de unidad es obligatorio.";
        if (supplierId == null || supplierId <= 0) return "Debe seleccionar un proveedor válido.";
        if (stock < 0) return "El stock debe ser un número no negativo.";
        if (stockMinimo < 0) return "El stock mínimo debe ser un número no negativo.";
        if (pricePerUnit <= 0) return "El precio por unidad debe ser mayor que cero.";
        if (expirationDateStr == null || expirationDateStr.trim().isEmpty()) return "La fecha de vencimiento es obligatoria.";
        try {
            LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
            return "Formato de fecha de vencimiento inválido. Use dd/MM/yyyy.";
        }
        return null;
    }
}

----- FIN DE java\cr\ac\una\agrow\controller\supply\SupplyController.java -----

package cr.ac.una.agrow.data.producer;

import cr.ac.una.agrow.config.DBConnection;
import cr.ac.una.agrow.domain.producer.Producer;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;

public class ProducerData {

    public static LinkedList<Producer> getListProducer(String typeList, String type) {
        LinkedList<Producer> producers = new LinkedList<>();
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        String sqlCall = "";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 System.err.println("Error: No se pudo obtener conexión en getListProducer.");
                 return producers;
             }

            if ("allProducer".equals(typeList)) {
                sqlCall = "{call spListProducer()}";
                stmt = cn.prepareCall(sqlCall);
            } else if ("city".equals(typeList)) {
                sqlCall = "{call spListCity(?)}";
                stmt = cn.prepareCall(sqlCall);
                stmt.setString(1, type);
            } else {
                 System.err.println("Error: Tipo de listado no reconocido: " + typeList);
                 return producers;
            }


            if(stmt != null) {
                 rs = stmt.executeQuery();
                 while (rs.next()) {
                     producers.add(new Producer(
                         rs.getInt("id_producer"),
                         rs.getString("producerName"),
                         rs.getString("contactNumber"),
                         rs.getDate("registrationDate") != null ? rs.getDate("registrationDate").toLocalDate() : null,
                         rs.getString("producerType"),
                         rs.getString("email"),
                         rs.getString("city"),
                         rs.getString("address"),
                         rs.getBoolean("isActive")
                     ));
                 }
            }

        } catch (SQLException e) {
            System.err.println("Error SQL en ProducerData.getListProducer (" + sqlCall + "): " + e.getMessage());
             e.printStackTrace();
        } finally {
             try { if (rs != null) rs.close(); } catch (SQLException e) { }
             try { if (stmt != null) stmt.close(); } catch (SQLException e) { }
        }

        return producers;
    }

    public static Producer getProducer(int id_producer) {
        Producer p = null;
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        String sqlCall = "{call spGetProducer(?)}";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 System.err.println("Error: No se pudo obtener conexión en getProducer.");
                 return null;
             }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id_producer);
            rs = stmt.executeQuery();

            if (rs.next()) {
                p = new Producer(
                    rs.getInt("id_producer"),
                    rs.getString("producerName"),
                    rs.getString("contactNumber"),
                    rs.getDate("registrationDate") != null ? rs.getDate("registrationDate").toLocalDate() : null,
                    rs.getString("producerType"),
                    rs.getString("email"),
                    rs.getString("city"),
                    rs.getString("address"),
                    rs.getBoolean("isActive")
                );
            }
        } catch (SQLException e) {
            System.err.println("Error SQL en ProducerData.getProducer (" + sqlCall + "): " + e.getMessage());
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException e) { }
            try { if (stmt != null) stmt.close(); } catch (SQLException e) { }
        }
        return p;
    }

    public static boolean saveProducer(Producer p) {
        boolean save = false;
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spAddProducer(?, ?, ?, ?, ?, ?, ?, ?, ?)}";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 System.err.println("Error: No se pudo obtener conexión en saveProducer.");
                 return false;
             }
            stmt = cn.prepareCall(sqlCall);

            stmt.setInt(1, p.getId_producer());
            stmt.setString(2, p.getProducerName());
            stmt.setString(3, p.getContactNumber());
            if (p.getRegistrationDate() != null) {
                stmt.setDate(4, Date.valueOf(p.getRegistrationDate()));
            } else {
                stmt.setNull(4, java.sql.Types.DATE);
            }
            stmt.setString(5, p.getProducerType());
            stmt.setString(6, p.getEmail());
            stmt.setString(7, p.getCity());
            stmt.setString(8, p.getAddress());
            stmt.setBoolean(9, p.isActive());

            stmt.executeUpdate();
            save = true;

        } catch (SQLException e) {
             System.err.println("Error SQL en ProducerData.saveProducer (" + sqlCall + "): " + e.getMessage());
             System.err.println("SQLState: " + e.getSQLState() + ", ErrorCode: " + e.getErrorCode());
             e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (SQLException e) { }
        }

        return save;
    }

    public static boolean updateProducer(Producer p) {
        boolean update = false;
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spUpdateProducer(?, ?, ?, ?, ?, ?, ?, ?, ?)}";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 System.err.println("Error: No se pudo obtener conexión en updateProducer.");
                 return false;
             }
            stmt = cn.prepareCall(sqlCall);

            stmt.setInt(1, p.getId_producer());
            stmt.setString(2, p.getProducerName());
            stmt.setString(3, p.getContactNumber());
            if (p.getRegistrationDate() != null) {
                stmt.setDate(4, Date.valueOf(p.getRegistrationDate()));
            } else {
                stmt.setNull(4, java.sql.Types.DATE);
            }
            stmt.setString(5, p.getProducerType());
            stmt.setString(6, p.getEmail());
            stmt.setString(7, p.getCity());
            stmt.setString(8, p.getAddress());
            stmt.setBoolean(9, p.isActive());

            int rowsAffected = stmt.executeUpdate();
            update = true;

        } catch (SQLException e) {
             System.err.println("Error SQL en ProducerData.updateProducer (" + sqlCall + "): " + e.getMessage());
             e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (SQLException e) { }
        }

        return update;
    }

    public static boolean deleteProducer(int id_producer) {
        boolean delete = false;
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spDeleteProducer(?)}";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 System.err.println("Error: No se pudo obtener conexión en deleteProducer.");
                 return false;
             }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id_producer);

            int rowsAffected = stmt.executeUpdate();
            delete = true;

        } catch (SQLException e) {
            System.err.println("Error SQL en ProducerData.deleteProducer (" + sqlCall + "): " + e.getMessage());
            e.printStackTrace();
        } finally {
            try { if (stmt != null) stmt.close(); } catch (SQLException e) { }
        }

        return delete;
    }
}

----- FIN DE java\cr\ac\una\agrow\data\producer\ProducerData.java -----

package cr.ac.una.agrow.data.supplier;

import cr.ac.una.agrow.domain.supplier.Supplier;
import cr.ac.una.agrow.service.supplier.SupplierService;
import java.util.List;

public class DataSupplier {

    private static final SupplierService supplierService = new SupplierService();

    public static List<Supplier> getAllSuppliers() {
        return supplierService.getAllSuppliers();
    }

    public static Supplier getSupplierById(int id) {
        return supplierService.getSupplierById(id);
    }

    public static String saveSupplier(Supplier supplier) {
        return supplierService.saveSupplier(supplier);
    }

    public static String updateSupplier(Supplier supplier) {
        return supplierService.updateSupplier(supplier);
    }

    public static String deleteSupplier(int id) {
        return supplierService.deleteSupplier(id);
    }

    public static List<Supplier> findSuppliers(String searchTerm) {
        return supplierService.findSuppliers(searchTerm);
    }
}

----- FIN DE java\cr\ac\una\agrow\data\supplier\DataSupplier.java -----

package cr.ac.una.agrow.data.supply;

import cr.ac.una.agrow.service.supply.SupplyService;
import cr.ac.una.agrow.domain.supply.Supply;
import java.util.List;


public class DataSupply {

    private static final SupplyService supplyService = new SupplyService();

    public static List<Supply> getSupplies() {
        return supplyService.getAllSupplies();
    }

    public static Supply getSupply(int idSupply) {
        return supplyService.getSupplyById(idSupply);
    }

    public static Supply saveSupply(Supply supply) {
        return supplyService.insertSupply(supply);
    }

    public static boolean updateSupply(Supply supply) {
        return supplyService.updateSupply(supply);
    }

    public static boolean deleteSupply(int idSupply) {
        return supplyService.deleteSupply(idSupply);
    }

    public static List<Supply> getFilteredSupplies(String searchTerm, String category, Integer supplierId) {
        return supplyService.getFilteredSupplies(searchTerm, category, supplierId);
    }
}

----- FIN DE java\cr\ac\una\agrow\data\supply\DataSupply.java -----

package cr.ac.una.agrow.domain.producer;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Producer {

    private int id_producer;
    private String producerName;
    private String contactNumber;
    private LocalDate registrationDate;
    private String producerType;
    private String email;
    private String city;
    private String address;
    private boolean isActive;

    public Producer() {
    }

    public Producer(int id_producer, String producerName, String contactNumber, LocalDate registrationDate, String producerType, String email, String city, String address, boolean isActive) {
        this.id_producer = id_producer;
        this.producerName = producerName;
        this.contactNumber = contactNumber;
        this.registrationDate = registrationDate;
        this.producerType = producerType;
        this.email = email;
        this.city = city;
        this.address = address;
        this.isActive = isActive;
    }



    public int getId_producer() {
        return id_producer;
    }

    public void setId_producer(int id_producer) {
        this.id_producer = id_producer;
    }

    public String getProducerName() {
        return producerName;
    }

    public void setProducerName(String producerName) {
        this.producerName = producerName;
    }

    public String getContactNumber() {
        return contactNumber;
    }

    public void setContactNumber(String contactNumber) {
        this.contactNumber = contactNumber;
    }

    public LocalDate getRegistrationDate() {
        return registrationDate;
    }

     public String getFormattedRegistrationDate() {
          if (registrationDate == null) {
               return "-";
          }
          return registrationDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
     }

     public String getRegistrationDateForInput() {
        if (registrationDate == null) {
            return "";
        }
        return registrationDate.format(DateTimeFormatter.ISO_LOCAL_DATE);
     }


    public void setRegistrationDate(LocalDate registrationDate) {
        this.registrationDate = registrationDate;
    }

    public String getProducerType() {
        return producerType;
    }

    public void setProducerType(String producerType) {
        this.producerType = producerType;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public boolean isActive() {
        return isActive;
    }

    public void setActive(boolean active) {
        isActive = active;
    }

    public boolean isIsActive() {
        return isActive;
    }
    public void setIsActive(boolean active) {
        this.isActive = active;
    }


    @Override
    public String toString() {
        return "Producer{" +
               "id_producer=" + id_producer +
               ", producerName='" + producerName + '\'' +
               ", contactNumber='" + contactNumber + '\'' +
               ", registrationDate=" + (registrationDate != null ? getFormattedRegistrationDate() : "null") +
               ", producerType='" + producerType + '\'' +
               ", email='" + email + '\'' +
               ", city='" + city + '\'' +
               ", address='" + address + '\'' +
               ", isActive=" + isActive +
               '}';
    }
}

----- FIN DE java\cr\ac\una\agrow\domain\producer\Producer.java -----

package cr.ac.una.agrow.domain.supplier;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Supplier {
    private int supplierIdentification;
    private String supplierName;
    private String companyName;
    private int phoneNumber;
    private String email;
    private LocalDate registrationDate;
    private boolean isActive;
    private double creditLimit;

    public Supplier() {
    }

    public Supplier(int supplierIdentification, String supplierName, String companyName, int phoneNumber,
                    String email, LocalDate registrationDate, boolean isActive, double creditLimit) {
        this.supplierIdentification = supplierIdentification;
        this.supplierName = supplierName;
        this.companyName = companyName;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.registrationDate = registrationDate;
        this.isActive = isActive;
        this.creditLimit = creditLimit;
    }

    public int getSupplierIdentification() {
        return supplierIdentification;
    }

    public void setSupplierIdentification(int supplierIdentification) {
        this.supplierIdentification = supplierIdentification;
    }

    public String getSupplierName() {
        return supplierName;
    }

    public void setSupplierName(String supplierName) {
        this.supplierName = supplierName;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public int getPhoneNumber() {
        return phoneNumber;
    }

    public String getFormattedPhoneNumber() {
        String phoneStr = String.valueOf(this.phoneNumber);
        if (phoneStr.length() == 8) {
            return phoneStr.substring(0, 4) + "-" + phoneStr.substring(4);
        }
        return phoneStr;
    }


    public void setPhoneNumber(int phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDate getRegistrationDate() {
        return registrationDate;
    }

     public String getFormattedRegistrationDate() {
          if (registrationDate == null) return "-";
          return registrationDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
     }

     public String getRegistrationDateForInput() {
        if (registrationDate == null) return "";
        return registrationDate.format(DateTimeFormatter.ISO_LOCAL_DATE);
     }


    public void setRegistrationDate(LocalDate registrationDate) {
        this.registrationDate = registrationDate;
    }

    public boolean isIsActive() {
        return isActive;
    }

     public boolean isActive() {
        return isActive;
    }


    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    public double getCreditLimit() {
        return creditLimit;
    }

    public void setCreditLimit(double creditLimit) {
        this.creditLimit = creditLimit;
    }

    @Override
    public String toString() {
        return "Supplier{" +
               "supplierIdentification=" + supplierIdentification +
               ", supplierName='" + supplierName + '\'' +
               ", companyName='" + companyName + '\'' +
               ", phoneNumber=" + phoneNumber +
               ", email='" + email + '\'' +
               ", registrationDate=" + registrationDate +
               ", isActive=" + isActive +
               ", creditLimit=" + creditLimit +
               '}';
    }
}

----- FIN DE java\cr\ac\una\agrow\domain\supplier\Supplier.java -----

package cr.ac.una.agrow.domain.supply;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Supply {
    private int idSupply;
    private String name;
    private String category;
    private double stock;
    private double stockMinimo;
    private String unitType;
    private double pricePerUnit;
    private LocalDate expirationDate;
    private Integer supplierId;
    private String supplierName;
    private String estado;

    private static final DateTimeFormatter FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DateTimeFormatter FORMAT_YYYY_MM_DD = DateTimeFormatter.ISO_LOCAL_DATE;

    public Supply() { }

    // Constructor para inserción (supplierId puede ser null inicialmente)
    public Supply(String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, Integer supplierId) {
        this.name = name;
        this.category = category;
        setStock(stock);
        setStockMinimo(stockMinimo);
        this.unitType = unitType;
        setPricePerUnit(pricePerUnit);
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
    }

    // Constructor para actualización (supplierId debe tener valor)
    public Supply(int idSupply, String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, Integer supplierId) {
        this.idSupply = idSupply;
        this.name = name;
        this.category = category;
        setStock(stock);
        setStockMinimo(stockMinimo);
        this.unitType = unitType;
        setPricePerUnit(pricePerUnit);
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
    }

    // Constructor completo desde BD
    public Supply(int idSupply, String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, Integer supplierId, String supplierName, String estado) {
        this.idSupply = idSupply;
        this.name = name;
        this.category = category;
        this.stock = stock;
        this.stockMinimo = stockMinimo;
        this.unitType = unitType;
        this.pricePerUnit = pricePerUnit;
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
        this.supplierName = supplierName;
        this.estado = estado;
    }

    // --- Getters y Setters ---

    public int getIdSupply() { return idSupply; }
    public void setIdSupply(int idSupply) { this.idSupply = idSupply; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }

    public double getStock() { return stock; }
    public void setStock(double stock) { this.stock = Math.max(0, stock); }

    public double getStockMinimo() { return stockMinimo; }
    public void setStockMinimo(double stockMinimo) { this.stockMinimo = Math.max(0, stockMinimo); }

    public String getUnitType() { return unitType; }
    public void setUnitType(String unitType) { this.unitType = unitType; }

    public double getPricePerUnit() { return pricePerUnit; }
    public void setPricePerUnit(double pricePerUnit) { this.pricePerUnit = Math.max(0.01, pricePerUnit); }

    public LocalDate getExpirationDate() { return expirationDate; }
    public void setExpirationDate(LocalDate expirationDate) { this.expirationDate = expirationDate; }

    public String getFormattedExpirationDate() {
        if (expirationDate == null) return "-";
        return expirationDate.format(FORMAT_DD_MM_YYYY);
    }

    public String getExpirationDateForInput() {
        if (expirationDate == null) return "";
        return expirationDate.format(FORMAT_YYYY_MM_DD);
    }

    public Integer getSupplierId() {
        return supplierId;
    }

    public void setSupplierId(Integer supplierId) {
        this.supplierId = supplierId;
    }

    public String getSupplierName() { return supplierName != null ? supplierName : "N/A"; }
    public void setSupplierName(String supplierName) { this.supplierName = supplierName; }

    public String getEstado() {
        if (this.estado == null || this.estado.trim().isEmpty()) {
            if (this.stock <= 0) return "Agotado";
            if (this.stock <= this.stockMinimo) return "Bajo";
            return "Óptimo";
        }
        return estado;
    }
    public void setEstado(String estado) { this.estado = estado; }

    @Override
    public String toString() {
        return "Supply{" +
               "idSupply=" + idSupply +
               ", name='" + name + '\'' +
               ", category='" + category + '\'' +
               ", stock=" + stock +
               ", stockMinimo=" + stockMinimo +
               ", unitType='" + unitType + '\'' +
               ", pricePerUnit=" + pricePerUnit +
               ", expirationDate=" + expirationDate +
               ", supplierId=" + supplierId + 
               ", supplierName='" + supplierName + '\'' +
               ", estado='" + estado + '\'' +
               '}';
    }
}

----- FIN DE java\cr\ac\una\agrow\domain\supply\Supply.java -----

package cr.ac.una.agrow.service.producer;

import cr.ac.una.agrow.data.producer.ProducerData;
import cr.ac.una.agrow.domain.producer.Producer;
import java.util.LinkedList;
import java.util.concurrent.ThreadLocalRandom;

public class ProducerService {

    public static String saveProducer(Producer p) {
        p.setId_producer(generarCodigoUnico());

        boolean success = ProducerData.saveProducer(p);
        if (success) {
            return "1,El productor se ha guardado exitosamente.";
        } else {
            return "2,Error al guardar el productor. Verifique los logs.";
        }
    }

    public static String updateProducer(Producer p) {
        boolean success = ProducerData.updateProducer(p);
        if (success) {
            return "1,El productor se ha actualizado exitosamente.";
        } else {
            return "2,Error al actualizar el productor. Verifique los logs.";
        }
    }

    public static String deleteProducer(int id_producer) {
        boolean success = ProducerData.deleteProducer(id_producer);
        if (success) {
            return "1,El productor se ha eliminado exitosamente.";
        } else {
            return "2,Error al eliminar el productor. Puede que no exista o esté en uso.";
        }
    }

    public static Producer getProducer(int id_producer) {
        return ProducerData.getProducer(id_producer);
    }

    public static LinkedList<Producer> listProducer(String typeList, String type) {
        return ProducerData.getListProducer(typeList, type);
    }

    public static int generarCodigo() {
        return ThreadLocalRandom.current().nextInt(10000, 100000);
    }

     private static int generarCodigoUnico() {
         int attempts = 0;
         final int MAX_ATTEMPTS = 10;
         while (attempts < MAX_ATTEMPTS) {
             int codigo = generarCodigo();
             if (ProducerData.getProducer(codigo) == null) {
                 return codigo;
             }
             attempts++;
         }
          System.err.println("Advertencia: No se pudo generar un ID de productor único después de " + MAX_ATTEMPTS + " intentos.");
          return generarCodigo();
     }


    public static String[] arraySplit(String datos) {
        if (datos == null) {
            return new String[]{"2", "Error interno: Mensaje nulo."};
        }
        String[] parts = datos.split(",", 2);
        if (parts.length == 2) {
            return parts;
        } else {
            return new String[]{"2", "Error interno: Formato de mensaje inesperado."};
        }
    }
}

----- FIN DE java\cr\ac\una\agrow\service\producer\ProducerService.java -----

package cr.ac.una.agrow.service.supplier;

import cr.ac.una.agrow.config.DBConnection;
import cr.ac.una.agrow.domain.supplier.Supplier;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;


public class SupplierService {

    private static final Logger LOG = Logger.getLogger(SupplierService.class.getName());

    public List<Supplier> getAllSuppliers() {
        List<Supplier> suppliers = new LinkedList<>();
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        String sqlCall = "{call sp_GetAllSuppliers()}";

        try {
            cn = DBConnection.getConnection();
            if (cn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getAllSuppliers.");
                return suppliers;
            }
            stmt = cn.prepareCall(sqlCall);
            rs = stmt.executeQuery();
            while (rs.next()) {
                suppliers.add(mapResultSetToSupplier(rs));
            }
            LOG.log(Level.INFO, "Obtenidos {0} proveedores.", suppliers.size());
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getAllSuppliers", e);
        }
        return suppliers;
    }

    public String saveSupplier(Supplier supplier) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call sp_SaveSupplier(?, ?, ?, ?, ?, ?, ?, ?)}";
        boolean success = false;

        try {
            cn = DBConnection.getConnection();
            if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en saveSupplier.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }

            Supplier existing = getSupplierById(supplier.getSupplierIdentification());
            if (existing != null) {
                 return "2,Error: Ya existe un proveedor con la identificación: " + supplier.getSupplierIdentification();
            }

            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, supplier.getSupplierIdentification());
            stmt.setString(2, supplier.getSupplierName());
            stmt.setString(3, supplier.getCompanyName());
            stmt.setInt(4, supplier.getPhoneNumber());
            stmt.setString(5, supplier.getEmail());
            stmt.setDate(6, Date.valueOf(supplier.getRegistrationDate()));
            stmt.setBoolean(7, supplier.isIsActive());
            stmt.setDouble(8, supplier.getCreditLimit());

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                 LOG.log(Level.INFO, "Proveedor guardado exitosamente con ID: {0}", supplier.getSupplierIdentification());
            } else {
                  LOG.log(Level.WARNING, "SP sp_SaveSupplier ejecutado pero no afectó filas para ID: {0}", supplier.getSupplierIdentification());
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en saveSupplier para ID: " + supplier.getSupplierIdentification(), e);
            return "2,Error de base de datos al guardar: " + e.getMessage();
        }
        return success ? "1,Proveedor guardado exitosamente." : "2,Error al guardar el proveedor.";
    }

    public String updateSupplier(Supplier supplier) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call sp_UpdateSupplier(?, ?, ?, ?, ?, ?, ?, ?)}";
        boolean success = false;

        try {
             cn = DBConnection.getConnection();
            if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en updateSupplier.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }

            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, supplier.getSupplierIdentification());
            stmt.setString(2, supplier.getSupplierName());
            stmt.setString(3, supplier.getCompanyName());
            stmt.setInt(4, supplier.getPhoneNumber());
            stmt.setString(5, supplier.getEmail());
            stmt.setDate(6, Date.valueOf(supplier.getRegistrationDate()));
            stmt.setBoolean(7, supplier.isIsActive());
            stmt.setDouble(8, supplier.getCreditLimit());

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

             if (success) {
                 LOG.log(Level.INFO, "Proveedor actualizado exitosamente con ID: {0}", supplier.getSupplierIdentification());
            } else {
                 LOG.log(Level.WARNING, "SP sp_UpdateSupplier ejecutado pero no afectó filas para ID: {0}. ¿Existe?", supplier.getSupplierIdentification());
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en updateSupplier para ID: " + supplier.getSupplierIdentification(), e);
            return "2,Error de base de datos al actualizar: " + e.getMessage();
        }
         return success ? "1,Proveedor actualizado exitosamente." : "2,Error al actualizar. Verifique si el ID existe.";
    }

    public String deleteSupplier(int id) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call sp_DeleteSupplier(?)}";
        boolean success = false;

        try {
            cn = DBConnection.getConnection();
            if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en deleteSupplier.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id);

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                 LOG.log(Level.INFO, "Proveedor eliminado exitosamente con ID: {0}", id);
            } else {
                 LOG.log(Level.WARNING, "SP sp_DeleteSupplier ejecutado pero no afectó filas para ID: {0}. ¿Existe?", id);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en deleteSupplier para ID: " + id, e);
            if (e.getSQLState().startsWith("23")) {
                 return "2,Error al eliminar: El proveedor tiene registros asociados (ej: suministros).";
             }
            return "2,Error de base de datos al eliminar: " + e.getMessage();
        }
        return success ? "1,Proveedor eliminado exitosamente." : "2,Error al eliminar. Verifique si el ID existe o si tiene registros asociados.";
    }

    public Supplier getSupplierById(int id) {
        Supplier supplier = null;
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        String sqlCall = "{call sp_GetSupplierById(?)}";

        try {
            cn = DBConnection.getConnection();
            if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getSupplierById.");
                 return null;
            }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id);
            rs = stmt.executeQuery();

            if (rs.next()) {
                supplier = mapResultSetToSupplier(rs);
                LOG.log(Level.INFO, "Proveedor encontrado con ID: {0}", id);
            } else {
                LOG.log(Level.WARNING, "No se encontró proveedor con ID: {0}", id);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getSupplierById con ID: " + id, e);
        }
        return supplier;
    }

    public List<Supplier> findSuppliers(String searchTerm) {
        List<Supplier> suppliers = new LinkedList<>();
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        String sqlCall = "{call sp_FindSuppliers(?)}";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                  LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en findSuppliers.");
                 return suppliers;
             }
            stmt = cn.prepareCall(sqlCall);
            if (searchTerm != null && !searchTerm.trim().isEmpty()){
                stmt.setString(1, "%" + searchTerm.trim() + "%");
            } else {
                stmt.setNull(1, Types.VARCHAR);
            }

            rs = stmt.executeQuery();
            while (rs.next()) {
                suppliers.add(mapResultSetToSupplier(rs));
            }
            LOG.log(Level.INFO, "Encontrados {0} proveedores con término: '{1}'", new Object[]{suppliers.size(), searchTerm});
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en findSuppliers con término: " + searchTerm, e);
        }
        return suppliers;
    }


    private Supplier mapResultSetToSupplier(ResultSet rs) throws SQLException {
        Date registrationDateSql = rs.getDate("registrationDate");
        LocalDate registrationDate = (registrationDateSql != null) ? registrationDateSql.toLocalDate() : null;

        return new Supplier(
            rs.getInt("supplierIdentification"),
            rs.getString("supplierName"),
            rs.getString("companyName"),
            rs.getInt("phoneNumber"),
            rs.getString("email"),
            registrationDate,
            rs.getBoolean("isActive"),
            rs.getDouble("creditLimit")
        );
    }

    public static String validateSupplierData(int supplierIdentification, String supplierName, String companyName,
                                         int phoneNumber, String email, String registrationDateStr, double creditLimit) {

        if (supplierIdentification <= 0) return "La identificación debe ser un número positivo.";
        if (String.valueOf(supplierIdentification).length() < 5 || String.valueOf(supplierIdentification).length() > 15 ) return "La identificación debe tener entre 5 y 15 dígitos.";

        if (supplierName == null || supplierName.trim().isEmpty()) return "El nombre es obligatorio.";
        if (!supplierName.matches("[A-Za-záéíóúÁÉÍÓÚñÑ.\\s]+")) return "El nombre solo debe contener letras, puntos y espacios.";

        if (companyName == null || companyName.trim().isEmpty()) return "El nombre de la empresa es obligatorio.";


        String phoneStr = String.valueOf(phoneNumber);
        if (!phoneStr.matches("[246789]\\d{7}")) return "El número de teléfono debe ser válido en Costa Rica (8 dígitos, no iniciar con 1, 3, 5).";

        if (email == null || email.trim().isEmpty()) return "El correo electrónico es obligatorio.";
        if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) return "El formato del correo electrónico no es válido.";

        if (registrationDateStr == null || registrationDateStr.trim().isEmpty()) return "La fecha de registro es obligatoria.";
        try {
             LocalDate regDate = LocalDate.parse(registrationDateStr);
             if(regDate.isAfter(LocalDate.now())) return "La fecha de registro no puede ser futura.";
        } catch (DateTimeParseException e) {
             return "Formato de fecha de registro inválido. Use yyyy-MM-dd.";
        }

        if (creditLimit < 0) return "El límite de crédito no puede ser negativo.";

        return null;
    }

     public static String[] arraySplit(String datos) {
        if (datos == null) {
             LOG.log(Level.WARNING, "arraySplit recibió datos nulos.");
            return new String[]{"2", "Error interno: Mensaje nulo."};
        }
        String[] parts = datos.split(",", 2);
        if (parts.length == 2) {
            return parts;
        } else {
             LOG.log(Level.WARNING, "arraySplit recibió formato inesperado: {0}", datos);
            return new String[]{"2", "Error interno: Formato de mensaje inesperado (" + datos + ")."};
        }
    }

}

----- FIN DE java\cr\ac\una\agrow\service\supplier\SupplierService.java -----

package cr.ac.una.agrow.service.supply;

import cr.ac.una.agrow.config.DBConnection;
import cr.ac.una.agrow.domain.supply.Supply;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SupplyService {

    private static final Logger LOG = Logger.getLogger(SupplyService.class.getName());

    private Supply mapResultSetToSupply(ResultSet rs) throws SQLException {
        int idSupply = rs.getInt("idSupply");
        String name = rs.getString("name");
        String category = rs.getString("category");
        double stock = rs.getDouble("stock");
        double stockMinimo = rs.getDouble("stockMinimo");
        String unitType = rs.getString("unitType");
        double pricePerUnit = rs.getDouble("pricePerUnit");
        Date expDateSQL = rs.getDate("expirationDate");
        LocalDate expirationDate = (expDateSQL != null) ? expDateSQL.toLocalDate() : null;
        Integer supplierId = rs.getObject("supplierId", Integer.class);
        String supplierName = rs.getString("supplierName");
        String estado = rs.getString("estado");

        return new Supply(
            idSupply,
            name,
            category,
            stock,
            stockMinimo,
            unitType,
            pricePerUnit,
            expirationDate,
            supplierId,
            supplierName,
            estado
        );
    }

    public Supply insertSupply(Supply supply) {
        String storedProc = "{CALL sp_InsertSupply(?, ?, ?, ?, ?, ?, ?, ?)}";
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        Supply insertedSupply = null;

        try {
            conn = DBConnection.getConnection();
            if (conn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en insertSupply.");
                return null;
            }
            stmt = conn.prepareCall(storedProc);

            stmt.setString(1, supply.getName());
            stmt.setString(2, supply.getCategory());
            stmt.setDouble(3, supply.getStock());
            stmt.setDouble(4, supply.getStockMinimo());
            stmt.setString(5, supply.getUnitType());
            stmt.setDouble(6, supply.getPricePerUnit());
            stmt.setDate(7, supply.getExpirationDate() != null ? Date.valueOf(supply.getExpirationDate()) : null);
            if (supply.getSupplierId() != null) {
                stmt.setInt(8, supply.getSupplierId());
            } else {
                stmt.setNull(8, Types.INTEGER);
            }

            boolean hasResultSet = stmt.execute();
            if (hasResultSet) {
                rs = stmt.getResultSet();
                if (rs != null && rs.next()) {
                    int generatedId = rs.getInt(1);
                    if (generatedId > 0) {
                        insertedSupply = getSupplyById(generatedId);
                        LOG.log(Level.INFO, "Suministro insertado exitosamente con ID: {0}", generatedId);
                    } else {
                        LOG.log(Level.WARNING, "SP sp_InsertSupply devolvió un ID no válido: {0}", generatedId);
                    }
                } else {
                    LOG.log(Level.WARNING, "SP sp_InsertSupply ejecutado pero no devolvió ResultSet con el ID generado.");
                }
            } else {
                int updateCount = stmt.getUpdateCount();
                LOG.log(Level.WARNING, "SP sp_InsertSupply no devolvió ResultSet (Filas afectadas: {0})", updateCount);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en insertSupply para el suministro: " + supply.getName(), e);
        } finally {
        }
        return insertedSupply;
    }

    public Supply getSupplyById(int idSupply) {
        String storedProc = "{CALL sp_GetSupplyById(?)}";
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        Supply supply = null;

        try {
            conn = DBConnection.getConnection();
            if (conn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getSupplyById.");
                return null;
            }
            stmt = conn.prepareCall(storedProc);
            stmt.setInt(1, idSupply);
            rs = stmt.executeQuery();
            if (rs.next()) {
                supply = mapResultSetToSupply(rs);
                LOG.log(Level.INFO, "Suministro encontrado con ID: {0}", idSupply);
            } else {
                LOG.log(Level.WARNING, "No se encontró suministro con ID: {0}", idSupply);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getSupplyById con ID: " + idSupply, e);
        } finally {
        }
        return supply;
    }

    public boolean updateSupply(Supply supply) {
        String storedProc = "{CALL sp_UpdateSupply(?, ?, ?, ?, ?, ?, ?, ?, ?)}";
        Connection conn = null;
        CallableStatement stmt = null;
        boolean success = false;

        try {
            conn = DBConnection.getConnection();
            if (conn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en updateSupply.");
                return false;
            }
            stmt = conn.prepareCall(storedProc);

            stmt.setInt(1, supply.getIdSupply());
            stmt.setString(2, supply.getName());
            stmt.setString(3, supply.getCategory());
            stmt.setDouble(4, supply.getStock());
            stmt.setDouble(5, supply.getStockMinimo());
            stmt.setString(6, supply.getUnitType());
            stmt.setDouble(7, supply.getPricePerUnit());
            stmt.setDate(8, supply.getExpirationDate() != null ? Date.valueOf(supply.getExpirationDate()) : null);
            if (supply.getSupplierId() != null) {
                stmt.setInt(9, supply.getSupplierId());
            } else {
                LOG.log(Level.SEVERE, "Intento de actualizar suministro con supplierId nulo. ID Suministro: {0}", supply.getIdSupply());
                return false;
            }

            int rowsAffected = stmt.executeUpdate();
            success = rowsAffected > 0;
            if (success) {
                LOG.log(Level.INFO, "Suministro actualizado exitosamente con ID: {0}", supply.getIdSupply());
            } else {
                LOG.log(Level.WARNING, "SP sp_UpdateSupply ejecutado pero no afectó filas para ID: {0}. ¿Existe el suministro?", supply.getIdSupply());
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en updateSupply para ID: " + supply.getIdSupply(), e);
            return false;
        } finally {
        }
        return success;
    }

    public boolean deleteSupply(int idSupply) {
        String storedProc = "{CALL sp_DeleteSupply(?)}";
        Connection conn = null;
        CallableStatement stmt = null;
        boolean success = false;

        try {
            conn = DBConnection.getConnection();
            if (conn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en deleteSupply.");
                return false;
            }
            stmt = conn.prepareCall(storedProc);
            stmt.setInt(1, idSupply);
            int rowsAffected = stmt.executeUpdate();
            success = rowsAffected > 0;
            if (success) {
                LOG.log(Level.INFO, "Suministro eliminado exitosamente con ID: {0}", idSupply);
            } else {
                LOG.log(Level.WARNING, "SP sp_DeleteSupply ejecutado pero no afectó filas para ID: {0}. ¿Existe el suministro?", idSupply);
            }
        } catch (SQLException e) {
            if (e.getSQLState() != null && e.getSQLState().startsWith("23")) {
                LOG.log(Level.WARNING, "Error de integridad al eliminar suministro ID {0}: {1}", new Object[]{idSupply, e.getMessage()});
            } else {
                LOG.log(Level.SEVERE, "Error SQL en deleteSupply para ID: " + idSupply, e);
            }
            return false;
        } finally {
        }
        return success;
    }

    public List<Supply> getAllSupplies() {
        String storedProc = "{CALL sp_GetAllSupplies()}";
        List<Supply> supplies = new ArrayList<>();
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DBConnection.getConnection();
            if (conn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getAllSupplies.");
                return supplies;
            }
            stmt = conn.prepareCall(storedProc);
            rs = stmt.executeQuery();
            while (rs.next()) {
                supplies.add(mapResultSetToSupply(rs));
            }
            LOG.log(Level.INFO, "Obtenidos {0} suministros en total.", supplies.size());
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getAllSupplies", e);
        } finally {
        }
        return supplies;
    }

    public List<Supply> getFilteredSupplies(String searchTerm, String category, Integer supplierId) {
        String storedProc = "{CALL sp_GetFilteredSupplies(?, ?, ?)}";
        List<Supply> supplies = new ArrayList<>();
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DBConnection.getConnection();
            if (conn == null) {
                LOG.log(Level.SEVERE, "No se pudo obterner conexión a la BD en getFilteredSupplies.");
                return supplies;
            }
            stmt = conn.prepareCall(storedProc);
            if (searchTerm != null && !searchTerm.trim().isEmpty()) {
                stmt.setString(1, "%" + searchTerm.trim() + "%");
            } else {
                stmt.setNull(1, Types.VARCHAR);
            }
            if (category != null && !category.trim().isEmpty()) {
                stmt.setString(2, category.trim());
            } else {
                stmt.setNull(2, Types.VARCHAR);
            }
            if (supplierId != null && supplierId > 0) {
                stmt.setInt(3, supplierId);
            } else {
                stmt.setNull(3, Types.INTEGER);
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                supplies.add(mapResultSetToSupply(rs));
            }
            LOG.log(Level.INFO, "Obtenidos {0} suministros filtrados con: term='{1}', cat='{2}', supplier='{3}'", new Object[]{supplies.size(), searchTerm, category, supplierId});
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getFilteredSupplies", e);
        } finally {
        }
        return supplies;
    }
}

----- FIN DE java\cr\ac\una\agrow\service\supply\SupplyService.java -----

package cr.ac.una.agrow;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AgrowApplication {

	public static void main(String[] args) {
		SpringApplication.run(AgrowApplication.class, args);
	}

}

----- FIN DE cr\ac\una\agrow\AgrowApplication.java -----

package cr.ac.una.agrow.config;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String DATABASE = "db_agrow";
    private static final String USER = "root";
    private static final String PASSWORD = "";
    private static final int PORT = 3306;
    private static final String HOST = "localhost";

    private static Connection connection;

    public static Connection getConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String URL = "jdbc:mysql://" + HOST + ":" + PORT + "/" + DATABASE;
            connection = DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            System.out.println("Error al cargar el driver: " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("Error de conexión: " + e.getMessage());
        }
        return connection;
    }
}

----- FIN DE cr\ac\una\agrow\config\DBConnection.java -----

package cr.ac.una.Agrow.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/")
public class HomeController {

    @GetMapping({"", "home"})
    public String home(Model model) {
        model.addAttribute("activeModule", "home"); // Necesario para el sidebar
        return "index";
    }
}

----- FIN DE cr\ac\una\agrow\controller\HomeController.java -----

package cr.ac.una.agrow.controller.producer;

import cr.ac.una.agrow.data.producer.DataProducer;
import cr.ac.una.agrow.service.producer.ProducerService;
import cr.ac.una.agrow.domain.producer.Producer;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.LinkedList;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/producers")
public class ProducerController {

    private static final DateTimeFormatter DATE_FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    @PostMapping("/save")
    public String saveProducer(
            @RequestParam("producerName") String name,
            @RequestParam("contactNumber") String contact,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam("producerType") String type,
            @RequestParam("email") String email,
            @RequestParam("address") String address,
            @RequestParam("city") String city,
            RedirectAttributes redirectAttributes) {

        if (name == null || name.trim().isEmpty() || contact == null || contact.trim().isEmpty() ||
            registrationDateStr == null || registrationDateStr.isEmpty() || type == null || type.isEmpty() ||
            email == null || email.trim().isEmpty() || city == null || city.isEmpty() ||
            address == null || address.trim().isEmpty()) {
             redirectAttributes.addFlashAttribute("error", "Todos los campos son obligatorios.");
             return "redirect:/producers/form";
        }

        LocalDate registrationDate;
        try {
            registrationDate = LocalDate.parse(registrationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
             redirectAttributes.addFlashAttribute("error", "Formato de fecha de registro inválido. Use dd/MM/yyyy.");
             return "redirect:/producers/form";
        }
        if (registrationDate.isAfter(LocalDate.now())) {
             redirectAttributes.addFlashAttribute("error", "La fecha de registro no puede ser futura.");
             return "redirect:/producers/form";
        }

        // ID 0 indica nuevo, isActive por defecto es true
        Producer p = new Producer(0, name.trim(), contact.trim(), registrationDate, type, email.trim(), city, address.trim(), true);

        String resultMessage = DataProducer.saveProducer(p);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/form")
    public String showSaveForm(Model model) {
        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);
        model.addAttribute("producer", new Producer());
        model.addAttribute("isEdit", false);
        model.addAttribute("activeModule", "producer");
        model.addAttribute("activePage", "add");
        return "save_producer";
    }


    @PostMapping("/update")
    public String updateProducer(
            @RequestParam("id_producer") int id,
            @RequestParam("producerName") String name,
            @RequestParam("contactNumber") String contact,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam("producerType") String type,
            @RequestParam("email") String email,
            @RequestParam("city") String city,
            @RequestParam("address") String address,
            @RequestParam(value = "isActive", defaultValue = "false") boolean active,
            RedirectAttributes redirectAttributes) {

         if (name == null || name.trim().isEmpty() || contact == null || contact.trim().isEmpty() ||
             registrationDateStr == null || registrationDateStr.isEmpty() || type == null || type.isEmpty() ||
             email == null || email.trim().isEmpty() || city == null || city.isEmpty() ||
             address == null || address.trim().isEmpty()) {
              redirectAttributes.addFlashAttribute("error", "Todos los campos son obligatorios.");
              return "redirect:/producers/edit?id_producer=" + id;
         }

         LocalDate registrationDate;
         try {
             registrationDate = LocalDate.parse(registrationDateStr, DATE_FORMAT_DD_MM_YYYY);
         } catch (DateTimeParseException e) {
              redirectAttributes.addFlashAttribute("error", "Formato de fecha de registro inválido. Use dd/MM/yyyy.");
              return "redirect:/producers/edit?id_producer=" + id;
         }
         if (registrationDate.isAfter(LocalDate.now())) {
              redirectAttributes.addFlashAttribute("error", "La fecha de registro no puede ser futura.");
              return "redirect:/producers/edit?id_producer=" + id;
         }

        Producer p = new Producer(id, name.trim(), contact.trim(), registrationDate, type, email.trim(), city, address.trim(), active);

        String resultMessage = DataProducer.updateProducer(p);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/edit")
    public String showUpdateForm(
            @RequestParam("id_producer") int id,
            Model model,
            RedirectAttributes redirectAttributes) {

        Producer producer = DataProducer.getProducer(id);

        if (producer == null) {
            redirectAttributes.addFlashAttribute("error", "Productor con ID " + id + " no encontrado.");
            return "redirect:/producers/list";
        }

        model.addAttribute("producer", producer);
        model.addAttribute("isEdit", true);
        model.addAttribute("activeModule", "producer");
        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);
        model.addAttribute("registrationDateForInput", producer.getRegistrationDateForInput());


        return "update_producer";
    }

    @GetMapping("/list")
    public String listProducers(
            @RequestParam(value = "city", required = false) String city,
            @RequestParam(value = "id_producer", required = false) Integer id,
            Model model) {

        LinkedList<Producer> producers;
        String validationMessage = null;

        if (id != null) {
            Producer producer = DataProducer.getProducer(id);
            producers = new LinkedList<>();
            if (producer != null) {
                producers.add(producer);
            } else {
                validationMessage = "El productor con Código/ID " + id + " no existe.";
            }
            model.addAttribute("searchId", id);
        } else if (city != null && !city.trim().isEmpty()) {
            producers = DataProducer.getProducersByCity(city.trim()); 
            if (producers == null || producers.isEmpty()) {
                validationMessage = "No hay productores registrados en la ciudad seleccionada: " + city;
            }
            model.addAttribute("selectedCity", city);
        } else {
            producers = DataProducer.getAllProducers(); 
             if (producers == null || producers.isEmpty()) {
                validationMessage = "No hay productores registrados.";
            }
        }

        model.addAttribute("listP", producers);
        model.addAttribute("validate", validationMessage);
        model.addAttribute("activeModule", "producer");
        model.addAttribute("activePage", "list");
        return "producers_list";
    }


    @PostMapping("/delete")
    public String deleteProducerButton(
            @RequestParam("id_producer") int id,
            RedirectAttributes redirectAttributes) {
        String resultMessage = DataProducer.deleteProducer(id);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/information")
    public String information(
            @RequestParam("id_producer") int id,
             Model model, RedirectAttributes redirectAttributes) {
        Producer producer = DataProducer.getProducer(id);
        if (producer == null) {
            redirectAttributes.addFlashAttribute("error", "Productor con ID " + id + " no encontrado.");
            return "redirect:/producers/list";
        }
        model.addAttribute("producer", producer);
        model.addAttribute("activeModule", "producer");
        return "information_producer";
    }

}

----- FIN DE cr\ac\una\agrow\controller\producer\ProducerController.java -----

package cr.ac.una.agrow.controller.supply;

import cr.ac.una.agrow.data.supply.DataSupply;
import cr.ac.una.agrow.domain.supply.Supply;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/supplies")
public class SupplyController {

    private static final DateTimeFormatter DATE_FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    @GetMapping("/list")
    public String listadoSupplies(
            @RequestParam(value = "searchTerm", required = false) String searchTerm,
            @RequestParam(value = "category", required = false) String category,
            @RequestParam(value = "supplierId", required = false) Integer supplierId,
            Model model) {

        List<Supply> listaSupplies;
        if ((searchTerm != null && !searchTerm.trim().isEmpty()) || 
            (category != null && !category.trim().isEmpty()) || 
            supplierId != null) {
            listaSupplies = DataSupply.getFilteredSupplies(searchTerm, category, supplierId);
        } else {
            listaSupplies = DataSupply.getSupplies();
        }

        model.addAttribute("titulo", "Listado de Suministros");
        model.addAttribute("cantidad", listaSupplies != null ? listaSupplies.size() : 0); 
        model.addAttribute("supplies", listaSupplies);
        model.addAttribute("searchTerm", searchTerm);
        model.addAttribute("selectedCategory", category);
        model.addAttribute("selectedSupplierId", supplierId);
        model.addAttribute("activeModule", "supply");
        model.addAttribute("activePage", "list");
        return "list_supply";
    }

    @GetMapping("/form")
    public String mostrarFormularioSupply(Model model) {
        model.addAttribute("activeModule", "supply");
        model.addAttribute("activePage", "add");
        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);
        model.addAttribute("supply", new Supply()); 
        model.addAttribute("isEdit", false); //
        return "form_supply"; 
    }

    @PostMapping("/save")
    public String guardarSupply(
            @RequestParam("name") String name,
            @RequestParam("category") String category,
            @RequestParam("stock") double stock,
            @RequestParam("stockMinimo") double stockMinimo,
            @RequestParam("unitType") String unitType,
            @RequestParam("pricePerUnit") double pricePerUnit,
            @RequestParam(value = "expirationDate", required = true) String expirationDateStr,
            @RequestParam("supplierId") int supplierId,
            RedirectAttributes redirectAttributes) {

        String error = validateSupplyFields(name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDateStr, supplierId);
        if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            // Reenviar datos ingresados al formulario en caso de error
            redirectAttributes.addFlashAttribute("supply", new Supply(name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId)); // Enviar sin fecha parseada
            redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
            return "redirect:/supplies/form";
        }

        LocalDate expDate;
        try {
             expDate = LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
             redirectAttributes.addFlashAttribute("error", "Formato de fecha de vencimiento inválido. Use dd/MM/yyyy.");
             // Reenviar datos ingresados al formulario en caso de error
             redirectAttributes.addFlashAttribute("supply", new Supply(name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId));
             redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
             return "redirect:/supplies/form";
        }

        Supply supply = new Supply(name.trim(), category.trim(), stock, stockMinimo, unitType.trim(), pricePerUnit, expDate, supplierId);
        Supply savedSupply = null;
        try {

            savedSupply = DataSupply.saveSupply(supply); 
             if (savedSupply != null || true) {
                 redirectAttributes.addFlashAttribute("mensaje", "Suministro guardado exitosamente.");
                 return "redirect:/supplies/list";
             } else {
                 // Este caso es si saveSupply devuelve null indicando error
                 redirectAttributes.addFlashAttribute("error", "Error desconocido al guardar el suministro.");
                 redirectAttributes.addFlashAttribute("supply", supply);
                 redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
                 return "redirect:/supplies/form";
             }
        } catch (Exception e) {
             redirectAttributes.addFlashAttribute("error", "Error al guardar el suministro: " + e.getMessage());
             redirectAttributes.addFlashAttribute("supply", supply);
             redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
             return "redirect:/supplies/form"; // Volver al formulario en caso de error
        }
    }

    @GetMapping("/edit")
    public String editarSupply(@RequestParam("idSupply") int idSupply, Model model, RedirectAttributes redirectAttributes) {
        Supply supply = DataSupply.getSupply(idSupply);
        if (supply == null) {
            redirectAttributes.addFlashAttribute("error", "El suministro seleccionado (ID: " + idSupply + ") no existe.");
            return "redirect:/supplies/list";
        }
        model.addAttribute("supply", supply);
        model.addAttribute("isEdit", true); // Indicar que es formulario de edición
        model.addAttribute("activeModule", "supply");
        model.addAttribute("expirationDateForInput", supply.getExpirationDateForInput()); // Formato YYYY-MM-DD
        return "edit_supply"; 
    }

    @PostMapping("/update")
    public String actualizarSupply(
            @RequestParam("idSupply") int idSupply,
            @RequestParam("name") String name,
            @RequestParam("category") String category,
            @RequestParam("stock") double stock,
            @RequestParam("stockMinimo") double stockMinimo,
            @RequestParam("unitType") String unitType,
            @RequestParam("pricePerUnit") double pricePerUnit,
            @RequestParam(value = "expirationDate", required = true) String expirationDateStr,
            @RequestParam("supplierId") int supplierId,
            RedirectAttributes redirectAttributes) {

        String error = validateSupplyFields(name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDateStr, supplierId);
        if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            // Reenviar datos para repoblar el form
            redirectAttributes.addFlashAttribute("supply", new Supply(idSupply, name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId));
            redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
            return "redirect:/supplies/edit?idSupply=" + idSupply;
        }

         LocalDate expDate;
         try {
             expDate = LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
         } catch (DateTimeParseException e) {
              redirectAttributes.addFlashAttribute("error", "Formato de fecha de vencimiento inválido. Use dd/MM/yyyy.");
              // Reenviar datos para repoblar el form
              redirectAttributes.addFlashAttribute("supply", new Supply(idSupply, name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId));
              redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
              return "redirect:/supplies/edit?idSupply=" + idSupply;
         }

        Supply supply = new Supply(idSupply, name.trim(), category.trim(), stock, stockMinimo, unitType.trim(), pricePerUnit, expDate, supplierId);
        boolean actualizado = false;
         try {
             actualizado = DataSupply.updateSupply(supply);
             if (!actualizado) {
                 redirectAttributes.addFlashAttribute("error", "Error al actualizar el suministro. Es posible que no se encontrara el ID.");
                 redirectAttributes.addFlashAttribute("supply", supply);
                 redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
                 return "redirect:/supplies/edit?idSupply=" + idSupply;
             } else {
                 redirectAttributes.addFlashAttribute("mensaje", "Suministro actualizado exitosamente.");
                 return "redirect:/supplies/list";
             }
         } catch (Exception e) {
              redirectAttributes.addFlashAttribute("error", "Error al actualizar el suministro: " + e.getMessage());
              redirectAttributes.addFlashAttribute("supply", supply);
              redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
              return "redirect:/supplies/edit?idSupply=" + idSupply;
         }
    }

    @PostMapping("/delete")
    public String eliminarSupply(@RequestParam("idSupply") int idSupply, RedirectAttributes redirectAttributes) {
        boolean eliminado = false;
        try {
            eliminado = DataSupply.deleteSupply(idSupply);
            if (!eliminado) {
                redirectAttributes.addFlashAttribute("error", "Error al eliminar el suministro (ID: " + idSupply + "). Puede estar en uso o no existir.");
            } else {
                redirectAttributes.addFlashAttribute("mensaje", "Suministro eliminado exitosamente.");
            }
        } catch (Exception e) {
             redirectAttributes.addFlashAttribute("error", "Error al eliminar el suministro (ID: " + idSupply + "): " + e.getMessage());
        }
        return "redirect:/supplies/list";
    }

    @GetMapping("/view")
    public String verSupply(@RequestParam("idSupply") int idSupply, Model model, RedirectAttributes redirectAttributes) {
        Supply supply = DataSupply.getSupply(idSupply);
        if (supply == null) {
            redirectAttributes.addFlashAttribute("error", "El suministro solicitado (ID: " + idSupply + ") no se encuentra.");
            return "redirect:/supplies/list";
        }
        model.addAttribute("supply", supply);
        model.addAttribute("activeModule", "supply");
        return "view_supply";
    }


    private String validateSupplyFields(String name, String category, double stock, double stockMinimo,
                                        String unitType, double pricePerUnit, String expirationDateStr, int supplierId) {
        if (name == null || name.trim().isEmpty()) return "El nombre es obligatorio.";
        if (category == null || category.trim().isEmpty()) return "La categoría es obligatoria.";
        if (unitType == null || unitType.trim().isEmpty()) return "El tipo de unidad es obligatorio.";
        if (supplierId <= 0) return "El ID del proveedor no es válido."; // Validación básica de ID
        if (stock < 0) return "El stock debe ser un número no negativo.";
        if (stockMinimo < 0) return "El stock mínimo debe ser un número no negativo.";
        if (pricePerUnit <= 0) return "El precio por unidad debe ser mayor que cero.";
        if (expirationDateStr == null || expirationDateStr.trim().isEmpty()) return "La fecha de vencimiento es obligatoria.";

        try {
            LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
            return "Formato de fecha de vencimiento inválido. Use dd/MM/yyyy.";
        }

        return null; 
    }
}

----- FIN DE cr\ac\una\agrow\controller\supply\SupplyController.java -----


package cr.ac.una.agrow.data.producer;

import cr.ac.una.agrow.domain.producer.Producer;
// Importar el servicio que contiene la lógica
import cr.ac.una.agrow.service.producer.ProducerService;
import java.util.LinkedList;

/**
 * Capa de Datos (Facade) para Productores.
 * Delega las llamadas al ProducerService que contiene la lógica de acceso a BD.
 */
public class DataProducer {

    // Instancia del servicio real
    private static final ProducerService producerService = new ProducerService();

    /**
     * Obtiene una lista de todos los productores.
     * @return LinkedList de Producer.
     */
    public static LinkedList<Producer> getAllProducers() {
        return producerService.getAllProducers();
    }

     /**
     * Obtiene una lista de productores filtrados por ciudad.
     * @param city La ciudad por la cual filtrar.
     * @return LinkedList de Producer.
     */
    public static LinkedList<Producer> getProducersByCity(String city) {
        return producerService.getProducersByCity(city);
    }


    /**
     * Obtiene un productor específico por su ID.
     * @param id_producer ID del productor a buscar.
     * @return Objeto Producer o null si no se encuentra.
     */
    public static Producer getProducer(int id_producer) {
        return producerService.getProducerById(id_producer);
    }

    /**
     * Guarda un nuevo productor. El ID debe ser generado por el servicio.
     * @param p Productor a guardar (ID usualmente 0 o ignorado).
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public static String saveProducer(Producer p) {
        return producerService.saveProducer(p);
    }

    /**
     * Actualiza un productor existente.
     * @param p Productor con los datos actualizados (incluyendo el ID).
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public static String updateProducer(Producer p) {
        return producerService.updateProducer(p);
    }

    /**
     * Elimina un productor por su ID.
     * @param id_producer ID del productor a eliminar.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public static String deleteProducer(int id_producer) {
        return producerService.deleteProducer(id_producer);
    }

    // NOTA: Los métodos que antes estaban en ProducerData y contenían la lógica SQL
    // ahora están movidos a ProducerService. Esta clase es solo un punto de entrada.
}

----- FIN DE cr\ac\una\agrow\data\producer\DataProducer.java -----


package cr.ac.una.agrow.data.supply;

import cr.ac.una.agrow.service.supply.SupplyService;
import cr.ac.una.agrow.domain.supply.Supply;
import java.util.List;

/**
 * Capa de Datos (Facade) para Suministros.
 * Delega las llamadas al SupplyService que contiene la lógica de acceso a BD.
 */
public class DataSupply {

    // Instancia del servicio real
    private static final SupplyService supplyService = new SupplyService();

    /**
     * Obtiene todos los suministros.
     * @return Lista de Supply.
     */
    public static List<Supply> getSupplies() {
        return supplyService.getAllSupplies();
    }

    /**
     * Obtiene un suministro por su ID.
     * @param idSupply ID del suministro.
     * @return Objeto Supply o null si no se encuentra.
     */
    public static Supply getSupply(int idSupply) {
        return supplyService.getSupplyById(idSupply);
    }

    /**
     * Guarda un nuevo suministro.
     * @param supply Suministro a guardar.
     * @return El suministro guardado (puede incluir ID generado) o null/excepción en error.
     *         (Ajustar según la firma real de insertSupply en SupplyService)
     */
    public static Supply saveSupply(Supply supply) {
         // La implementación original era void, se cambia para seguir el patrón
         // de devolver el objeto guardado o indicar éxito/error de forma más clara.
         // Si SupplyService.insertSupply devuelve el objeto, está bien.
         // Si era void, hay que decidir si se cambia o se maneja con excepciones.
         // Asumimos que insertSupply devuelve el objeto con ID o null/excepción.
        return supplyService.insertSupply(supply);
    }

    /**
     * Actualiza un suministro existente.
     * @param supply Suministro con datos actualizados.
     * @return true si la actualización fue exitosa, false en caso contrario.
     */
    public static boolean updateSupply(Supply supply) {
        return supplyService.updateSupply(supply);
    }

    /**
     * Elimina un suministro por su ID.
     * @param idSupply ID del suministro a eliminar.
     * @return true si la eliminación fue exitosa, false en caso contrario.
     */
    public static boolean deleteSupply(int idSupply) {
        return supplyService.deleteSupply(idSupply);
    }

    /**
     * Obtiene suministros filtrados por término, categoría o ID de proveedor.
     * @param searchTerm Término de búsqueda (nombre).
     * @param category Categoría.
     * @param supplierId ID del proveedor.
     * @return Lista de Supply filtrados.
     */
    public static List<Supply> getFilteredSupplies(String searchTerm, String category, Integer supplierId) {
        return supplyService.getFilteredSupplies(searchTerm, category, supplierId);
    }
}

----- FIN DE cr\ac\una\agrow\data\supply\DataSupply.java -----

package cr.ac.una.agrow.domain.producer;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Producer {

    private int id_producer;
    private String producerName;
    private String contactNumber;
    private LocalDate registrationDate;
    private String producerType;
    private String email;
    private String city;
    private String address;
    private boolean isActive;

    public Producer() {
    }

    public Producer(int id_producer, String producerName, String contactNumber, LocalDate registrationDate, String producerType, String email, String city, String address, boolean isActive) {
        this.id_producer = id_producer;
        this.producerName = producerName;
        this.contactNumber = contactNumber;
        this.registrationDate = registrationDate;
        this.producerType = producerType;
        this.email = email;
        this.city = city;
        this.address = address;
        this.isActive = isActive;
    }

    // --- Getters y Setters ---

    public int getId_producer() {
        return id_producer;
    }

    public void setId_producer(int id_producer) {
        this.id_producer = id_producer;
    }

    public String getProducerName() {
        return producerName;
    }

    public void setProducerName(String producerName) {
        this.producerName = producerName;
    }

    public String getContactNumber() {
        return contactNumber;
    }

    public void setContactNumber(String contactNumber) {
        this.contactNumber = contactNumber;
    }

    public LocalDate getRegistrationDate() {
        return registrationDate;
    }

     public String getFormattedRegistrationDate() {
          if (registrationDate == null) return "-";
          return registrationDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
     }

     public String getRegistrationDateForInput() {
        if (registrationDate == null) return "";
        return registrationDate.format(DateTimeFormatter.ISO_LOCAL_DATE);
     }

    public void setRegistrationDate(LocalDate registrationDate) {
        this.registrationDate = registrationDate;
    }

    public String getProducerType() {
        return producerType;
    }

    public void setProducerType(String producerType) {
        this.producerType = producerType;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public boolean isActive() {
        return isActive;
    }

    public void setActive(boolean active) {
        isActive = active;
    }

    public boolean isIsActive() { return isActive; }
    public void setIsActive(boolean active) { this.isActive = active; }


    @Override
    public String toString() {
        return "Producer{" +
               "id_producer=" + id_producer +
               ", producerName='" + producerName + '\'' +
               ", contactNumber='" + contactNumber + '\'' +
               ", registrationDate=" + (registrationDate != null ? getFormattedRegistrationDate() : "null") +
               ", producerType='" + producerType + '\'' +
               ", email='" + email + '\'' +
               ", city='" + city + '\'' +
               ", address='" + address + '\'' +
               ", isActive=" + isActive +
               '}';
    }
}

----- FIN DE cr\ac\una\agrow\domain\producer\Producer.java -----


package cr.ac.una.agrow.domain.supply;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Supply {
    private int idSupply;
    private String name;
    private String category;
    private double stock;
    private double stockMinimo;
    private String unitType;
    private double pricePerUnit;
    private LocalDate expirationDate;
    private int supplierId;
    private String estado; // Calculado por SP

    // Formateadores estáticos
    private static final DateTimeFormatter FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DateTimeFormatter FORMAT_YYYY_MM_DD = DateTimeFormatter.ISO_LOCAL_DATE; // YYYY-MM-DD


    public Supply() { }

    // Constructor para inserción (sin ID, sin estado)
    public Supply(String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, int supplierId) {
        this.name = name;
        this.category = category;
        this.stock = stock;
        this.stockMinimo = stockMinimo;
        this.unitType = unitType;
        this.pricePerUnit = pricePerUnit;
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
    }

    // Constructor para actualización o uso interno (con ID, sin estado)
    public Supply(int idSupply, String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, int supplierId) {
        this.idSupply = idSupply;
        this.name = name;
        this.category = category;
        this.stock = stock;
        this.stockMinimo = stockMinimo;
        this.unitType = unitType;
        this.pricePerUnit = pricePerUnit;
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
    }

    // Constructor completo usado al mapear desde ResultSet (con ID y estado del SP)
    public Supply(int idSupply, String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, int supplierId, String estado) {
        this.idSupply = idSupply;
        this.name = name;
        this.category = category;
        this.stock = stock;
        this.stockMinimo = stockMinimo;
        this.unitType = unitType;
        this.pricePerUnit = pricePerUnit;
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
        this.estado = estado;
    }

    // --- Getters y Setters ---

    public int getIdSupply() { return idSupply; }
    public void setIdSupply(int idSupply) { this.idSupply = idSupply; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }

    public double getStock() { return stock; }
    public void setStock(double stock) {
        this.stock = Math.max(0, stock); // Asegurar no negativo
    }

    public double getStockMinimo() { return stockMinimo; }
    public void setStockMinimo(double stockMinimo) {
        this.stockMinimo = Math.max(0, stockMinimo); // Asegurar no negativo
    }

    public String getUnitType() { return unitType; }
    public void setUnitType(String unitType) { this.unitType = unitType; }

    public double getPricePerUnit() { return pricePerUnit; }
    public void setPricePerUnit(double pricePerUnit) {
        this.pricePerUnit = Math.max(0.01, pricePerUnit); // Evitar precios <= 0
    }

    public LocalDate getExpirationDate() { return expirationDate; }
    public void setExpirationDate(LocalDate expirationDate) { this.expirationDate = expirationDate; }

    // Devuelve fecha formateada para mostrar (dd/MM/yyyy)
    public String getFormattedExpirationDate() {
        if (expirationDate == null) return "-";
        return expirationDate.format(FORMAT_DD_MM_YYYY);
    }

    // Devuelve fecha formateada para input date (yyyy-MM-dd)
    public String getExpirationDateForInput() {
        if (expirationDate == null) return "";
        return expirationDate.format(FORMAT_YYYY_MM_DD);
    }


    public int getSupplierId() { return supplierId; }
    public void setSupplierId(int supplierId) { this.supplierId = supplierId; }

    public String getEstado() {
         // Si el estado no vino de la BD, calcula uno básico.
         if (this.estado == null || this.estado.trim().isEmpty()) {
              if (this.stock <= 0) return "Agotado";
              if (this.stock <= this.stockMinimo) return "Bajo";
              return "Óptimo";
         }
        return estado;
    }
    // Setter para estado (aunque usualmente viene de BD)
    public void setEstado(String estado) { this.estado = estado; }


    @Override
    public String toString() {
        return "Supply{" +
                "idSupply=" + idSupply +
                ", name='" + name + '\'' +
                ", category='" + category + '\'' +
                ", stock=" + stock +
                ", stockMinimo=" + stockMinimo +
                ", unitType='" + unitType + '\'' +
                ", pricePerUnit=" + pricePerUnit +
                ", expirationDate=" + (expirationDate != null ? getFormattedExpirationDate() : "null") +
                ", supplierId=" + supplierId +
                ", estado='" + getEstado() + '\'' +
                '}';
    }
}

----- FIN DE cr\ac\una\agrow\domain\supply\Supply.java -----

package cr.ac.una.agrow.service.producer;

import cr.ac.una.agrow.config.DBConnection;
import cr.ac.una.agrow.domain.producer.Producer;

import java.sql.*;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Capa de Servicio para Productores.
 * Contiene la lógica de negocio y acceso a datos para los productores.
 */
public class ProducerService {

    private static final Logger LOG = Logger.getLogger(ProducerService.class.getName());

    /**
     * Obtiene una lista de todos los productores.
     * @return LinkedList de Producer.
     */
    public LinkedList<Producer> getAllProducers() {
        return executeListProcedure("{call spListProducer()}", null);
    }

    /**
     * Obtiene una lista de productores filtrados por ciudad.
     * @param city La ciudad por la cual filtrar.
     * @return LinkedList de Producer.
     */
    public LinkedList<Producer> getProducersByCity(String city) {
        return executeListProcedure("{call spListCity(?)}", city);
    }

    /**
     * Ejecuta un Stored Procedure para obtener una lista de productores.
     * @param sqlCall El comando SQL para llamar al SP (puede incluir '?').
     * @param parameter El parámetro para el SP (puede ser null si no aplica).
     * @return LinkedList de Producer.
     */
    private LinkedList<Producer> executeListProcedure(String sqlCall, String parameter) {
        LinkedList<Producer> producers = new LinkedList<>();
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;

        try {
            cn = DBConnection.getConnection();
            if (cn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en executeListProcedure.");
                return producers; // Retorna lista vacía
            }

            stmt = cn.prepareCall(sqlCall);

            if (parameter != null) {
                stmt.setString(1, parameter);
            }

            rs = stmt.executeQuery();
            while (rs.next()) {
                producers.add(mapResultSetToProducer(rs));
            }
             LOG.log(Level.INFO, "Ejecutado SP: {0} con parámetro: {1}. Productores encontrados: {2}", new Object[]{sqlCall, parameter, producers.size()});

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL ejecutando SP: " + sqlCall + " con parámetro: " + parameter, e);
        }
        return producers;
    }


    /**
     * Obtiene un productor específico por su ID.
     * @param id_producer ID del productor a buscar.
     * @return Objeto Producer o null si no se encuentra.
     */
    public Producer getProducerById(int id_producer) {
        Producer p = null;
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        String sqlCall = "{call spGetProducer(?)}";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getProducerById.");
                 return null;
             }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id_producer);
            rs = stmt.executeQuery();

            if (rs.next()) {
                p = mapResultSetToProducer(rs);
                LOG.log(Level.INFO, "Productor encontrado con ID: {0}", id_producer);
            } else {
                 LOG.log(Level.WARNING, "No se encontró productor con ID: {0}", id_producer);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getProducerById con ID: " + id_producer, e);
        }
        return p;
    }

    /**
     * Guarda un nuevo productor en la base de datos.
     * Genera un ID único antes de guardar.
     * @param p Productor a guardar.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public String saveProducer(Producer p) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spAddProducer(?, ?, ?, ?, ?, ?, ?, ?, ?)}";
        boolean success = false;

        // Asigna un ID único generado localmente ANTES de intentar guardar
        p.setId_producer(generarCodigoUnico());

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en saveProducer.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }
            stmt = cn.prepareCall(sqlCall);

            stmt.setInt(1, p.getId_producer()); // Usar el ID generado
            stmt.setString(2, p.getProducerName());
            stmt.setString(3, p.getContactNumber());
            if (p.getRegistrationDate() != null) {
                stmt.setDate(4, Date.valueOf(p.getRegistrationDate()));
            } else {
                stmt.setNull(4, Types.DATE);
            }
            stmt.setString(5, p.getProducerType());
            stmt.setString(6, p.getEmail());
            stmt.setString(7, p.getCity());
            stmt.setString(8, p.getAddress());
            stmt.setBoolean(9, p.isActive());

            // executeUpdate devuelve el número de filas afectadas, útil para verificar éxito
            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                LOG.log(Level.INFO, "Productor guardado exitosamente con ID: {0}", p.getId_producer());
            } else {
                 LOG.log(Level.WARNING, "SP spAddProducer ejecutado pero no afectó filas para ID: {0}", p.getId_producer());
            }

        } catch (SQLException e) {
             LOG.log(Level.SEVERE, "Error SQL en saveProducer para ID: " + p.getId_producer(), e);
             return "2,Error de base de datos al guardar: " + e.getMessage();
        }

        return success ? "1,El productor se ha guardado exitosamente." : "2,Error al guardar el productor. No se afectaron filas.";
    }

    /**
     * Actualiza un productor existente en la base de datos.
     * @param p Productor con los datos actualizados.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public String updateProducer(Producer p) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spUpdateProducer(?, ?, ?, ?, ?, ?, ?, ?, ?)}";
        boolean success = false;

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                  LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en updateProducer.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }
            stmt = cn.prepareCall(sqlCall);

            stmt.setInt(1, p.getId_producer());
            stmt.setString(2, p.getProducerName());
            stmt.setString(3, p.getContactNumber());
            if (p.getRegistrationDate() != null) {
                stmt.setDate(4, Date.valueOf(p.getRegistrationDate()));
            } else {
                stmt.setNull(4, Types.DATE);
            }
            stmt.setString(5, p.getProducerType());
            stmt.setString(6, p.getEmail());
            stmt.setString(7, p.getCity());
            stmt.setString(8, p.getAddress());
            stmt.setBoolean(9, p.isActive());

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                 LOG.log(Level.INFO, "Productor actualizado exitosamente con ID: {0}", p.getId_producer());
            } else {
                 LOG.log(Level.WARNING, "SP spUpdateProducer ejecutado pero no afectó filas para ID: {0}. ¿Existe el productor?", p.getId_producer());
            }

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en updateProducer para ID: " + p.getId_producer(), e);
            return "2,Error de base de datos al actualizar: " + e.getMessage();
        }
         return success ? "1,El productor se ha actualizado exitosamente." : "2,Error al actualizar el productor. Verifique si el ID existe.";
    }

    /**
     * Elimina un productor de la base de datos por su ID.
     * @param id_producer ID del productor a eliminar.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public String deleteProducer(int id_producer) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spDeleteProducer(?)}";
        boolean success = false;

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en deleteProducer.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id_producer);

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

             if (success) {
                 LOG.log(Level.INFO, "Productor eliminado exitosamente con ID: {0}", id_producer);
            } else {
                 LOG.log(Level.WARNING, "SP spDeleteProducer ejecutado pero no afectó filas para ID: {0}. ¿Existe el productor?", id_producer);
            }

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en deleteProducer para ID: " + id_producer, e);
             // Revisar código de error para FK constraint violation
             if (e.getSQLState().startsWith("23")) { // Códigos de error de integridad
                 return "2,Error al eliminar: El productor tiene registros asociados y no puede ser eliminado.";
             }
            return "2,Error de base de datos al eliminar: " + e.getMessage();
        }
        return success ? "1,El productor se ha eliminado exitosamente." : "2,Error al eliminar el productor. Verifique si el ID existe o si tiene registros asociados.";
    }

    /**
     * Mapea una fila de un ResultSet a un objeto Producer.
     * @param rs ResultSet posicionado en la fila a mapear.
     * @return Objeto Producer.
     * @throws SQLException Si ocurre un error al leer el ResultSet.
     */
    private Producer mapResultSetToProducer(ResultSet rs) throws SQLException {
        Date registrationDateSql = rs.getDate("registrationDate");
        LocalDate registrationDate = (registrationDateSql != null) ? registrationDateSql.toLocalDate() : null;

        return new Producer(
            rs.getInt("id_producer"),
            rs.getString("producerName"),
            rs.getString("contactNumber"),
            registrationDate,
            rs.getString("producerType"),
            rs.getString("email"),
            rs.getString("city"),
            rs.getString("address"),
            rs.getBoolean("isActive")
        );
    }


    /**
     * Genera un número aleatorio simple de 5 dígitos.
     * @return int número aleatorio entre 10000 y 99999.
     */
    private static int generarCodigo() {
        return ThreadLocalRandom.current().nextInt(10000, 100000);
    }

     /**
      * Intenta generar un código único verificando si ya existe en la BD.
      * Realiza un número limitado de intentos.
      * @return int código generado (posiblemente no único si fallan los intentos).
      */
     private static int generarCodigoUnico() {
         int attempts = 0;
         final int MAX_ATTEMPTS = 10;
         ProducerService tempService = new ProducerService(); // Necesita instancia para llamar a getProducerById

         while (attempts < MAX_ATTEMPTS) {
             int codigo = generarCodigo();
             // Verifica si el código generado ya existe en la BD
             // Considerar secuencias de BD o UUIDs para una solución robusta.
             if (tempService.getProducerById(codigo) == null) {
                 LOG.log(Level.INFO, "Código único generado: {0}", codigo);
                 return codigo; // Código disponible encontrado
             }
             attempts++;
             LOG.log(Level.FINE, "Intento {0}: Código {1} ya existe.", new Object[]{attempts, codigo});
         }
          // Si falla después de varios intentos, informa y devuelve uno aleatorio igualmente.
          int fallbackCodigo = generarCodigo();
          LOG.log(Level.WARNING, "No se pudo generar un ID de productor único después de {0} intentos. Usando código aleatorio: {1}", new Object[]{MAX_ATTEMPTS, fallbackCodigo});
          return fallbackCodigo;
     }


    /**
     * Helper simple para dividir el mensaje de resultado ("tipo,mensaje").
     * Este método es público y estático para que el Controller pueda usarlo.
     * @param datos String en formato "tipo,mensaje".
     * @return String[] con [tipo, mensaje] o un array de error si el formato es inválido.
     */
    public static String[] arraySplit(String datos) {
        if (datos == null) {
             LOG.log(Level.WARNING, "arraySplit recibió datos nulos.");
            return new String[]{"2", "Error interno: Mensaje nulo."}; // Manejo de nulos
        }
        // Divide solo por la primera coma para separar tipo y mensaje
        String[] parts = datos.split(",", 2);
        if (parts.length == 2) {
            return parts;
        } else {
             LOG.log(Level.WARNING, "arraySplit recibió formato inesperado: {0}", datos);
            return new String[]{"2", "Error interno: Formato de mensaje inesperado (" + datos + ")."};
        }
    }
}

----- FIN DE cr\ac\una\agrow\service\producer\ProducerService.java -----


package cr.ac.una.agrow.service.supply;

import cr.ac.una.agrow.config.DBConnection;
import cr.ac.una.agrow.domain.supply.Supply;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Capa de Servicio para Suministros.
 * Contiene la lógica de negocio y acceso a datos para los suministros.
 */
public class SupplyService {

    private static final Logger LOG = Logger.getLogger(SupplyService.class.getName());

    /**
     * Mapea una fila del ResultSet a un objeto Supply.
     * @param rs ResultSet posicionado en la fila a mapear.
     * @return Objeto Supply mapeado.
     * @throws SQLException Si ocurre un error al leer el ResultSet.
     */
    private Supply mapResultSetToSupply(ResultSet rs) throws SQLException {
        int idSupply = rs.getInt("idSupply");
        String name = rs.getString("name");
        String category = rs.getString("category");
        double stock = rs.getDouble("stock");
        double stockMinimo = rs.getDouble("stockMinimo");
        String unitType = rs.getString("unitType");
        double pricePerUnit = rs.getDouble("pricePerUnit");
        Date expDateSQL = rs.getDate("expirationDate");
        LocalDate expirationDate = (expDateSQL != null) ? expDateSQL.toLocalDate() : null;
        int supplierId = rs.getInt("supplierId");
        String estado = rs.getString("estado"); // Estado calculado por el SP

        return new Supply(idSupply, name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDate, supplierId, estado);
    }

    /**
     * Inserta un suministro usando un Stored Procedure.
     * @param supply Objeto Supply a insertar (sin ID o ID 0).
     * @return El objeto Supply insertado con su ID asignado, o null si falla la inserción.
     */
    public Supply insertSupply(Supply supply) {
        String storedProc = "{CALL sp_InsertSupply(?, ?, ?, ?, ?, ?, ?, ?)}"; // Ajustar si el SP es diferente
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en insertSupply.");
                 return null;
             }

            stmt = conn.prepareCall(storedProc);

            stmt.setString(1, supply.getName());
            stmt.setString(2, supply.getCategory());
            stmt.setDouble(3, supply.getStock());
            stmt.setDouble(4, supply.getStockMinimo());
            stmt.setString(5, supply.getUnitType());
            stmt.setDouble(6, supply.getPricePerUnit());
            stmt.setDate(7, supply.getExpirationDate() != null ? Date.valueOf(supply.getExpirationDate()) : null);
            stmt.setInt(8, supply.getSupplierId());

            // Ejecutar y verificar si devuelve un ResultSet (con el ID)
            boolean hasResultSet = stmt.execute();
            if (hasResultSet) {
                rs = stmt.getResultSet();
                if (rs != null && rs.next()) {
                    int generatedId = rs.getInt(1); 
                    supply.setIdSupply(generatedId);
                    LOG.log(Level.INFO, "Suministro insertado exitosamente con ID: {0}", generatedId);
                    return supply; // Devuelve el objeto con el ID
                } else {
                     LOG.log(Level.WARNING, "SP sp_InsertSupply ejecutado pero no devolvió el ID generado.");
                     return null; // Falló la obtención del ID
                }
            } else {
                 // Si el SP no devuelve ResultSet pero se ejecutó (quizás devuelve filas afectadas?)
                 int updateCount = stmt.getUpdateCount();
                 if (updateCount > 0) {
                      LOG.log(Level.WARNING, "SP sp_InsertSupply ejecutado (filas afectadas: {0}) pero no se configuró para devolver ID. No se puede confirmar ID.", updateCount);

                      return null;
                 } else {
                      LOG.log(Level.SEVERE, "SP sp_InsertSupply ejecutado pero no afectó filas ni devolvió ID.");
                      return null; // Falló la inserción
                 }
            }
        } catch (SQLException e) {
             LOG.log(Level.SEVERE, "Error SQL en insertSupply", e);
            return null; // Fallo por excepción SQL
        } 
    }

    /**
     * Obtiene un suministro por su ID usando un Stored Procedure.
     * @param idSupply ID del suministro a buscar.
     * @return Objeto Supply si se encuentra, null en caso contrario.
     */
    public Supply getSupplyById(int idSupply) {
        String storedProc = "{CALL sp_GetSupplyById(?)}";
         Connection conn = null;
         CallableStatement stmt = null;
         ResultSet rs = null;
         Supply supply = null;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getSupplyById.");
                 return null;
             }

            stmt = conn.prepareCall(storedProc);
            stmt.setInt(1, idSupply);
            rs = stmt.executeQuery();

            if (rs.next()) {
                supply = mapResultSetToSupply(rs);
                 LOG.log(Level.INFO, "Suministro encontrado con ID: {0}", idSupply);
            } else {
                 LOG.log(Level.WARNING, "No se encontró suministro con ID: {0}", idSupply);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getSupplyById con ID: " + idSupply, e);
        }
        return supply;
    }

    /**
     * Actualiza un suministro existente usando un Stored Procedure.
     * @param supply Objeto Supply con los datos actualizados (incluyendo ID).
     * @return true si la actualización afectó al menos una fila, false en caso contrario.
     */
    public boolean updateSupply(Supply supply) {
        String storedProc = "{CALL sp_UpdateSupply(?, ?, ?, ?, ?, ?, ?, ?, ?)}"; 
         Connection conn = null;
         CallableStatement stmt = null;
         boolean success = false;
        try {
            conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en updateSupply.");
                 return false;
             }

            stmt = conn.prepareCall(storedProc);

            stmt.setInt(1, supply.getIdSupply());
            stmt.setString(2, supply.getName());
            stmt.setString(3, supply.getCategory());
            stmt.setDouble(4, supply.getStock());
            stmt.setDouble(5, supply.getStockMinimo());
            stmt.setString(6, supply.getUnitType());
            stmt.setDouble(7, supply.getPricePerUnit());
            stmt.setDate(8, supply.getExpirationDate() != null ? Date.valueOf(supply.getExpirationDate()) : null);
            stmt.setInt(9, supply.getSupplierId());

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                 LOG.log(Level.INFO, "Suministro actualizado exitosamente con ID: {0}", supply.getIdSupply());
            } else {
                 LOG.log(Level.WARNING, "SP sp_UpdateSupply ejecutado pero no afectó filas para ID: {0}. ¿Existe el suministro?", supply.getIdSupply());
            }

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en updateSupply para ID: " + supply.getIdSupply(), e);
            return false; // Fallo por excepción
        }
        return success;
    }

    /**
     * Elimina un suministro usando un Stored Procedure.
     * @param idSupply ID del suministro a eliminar.
     * @return true si la eliminación afectó al menos una fila, false en caso contrario.
     */
    public boolean deleteSupply(int idSupply) {
        String storedProc = "{CALL sp_DeleteSupply(?)}";
        Connection conn = null;
        CallableStatement stmt = null;
        boolean success = false;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en deleteSupply.");
                 return false;
             }

            stmt = conn.prepareCall(storedProc);
            stmt.setInt(1, idSupply);

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

             if (success) {
                 LOG.log(Level.INFO, "Suministro eliminado exitosamente con ID: {0}", idSupply);
            } else {
                 LOG.log(Level.WARNING, "SP sp_DeleteSupply ejecutado pero no afectó filas para ID: {0}. ¿Existe el suministro?", idSupply);
            }

        } catch (SQLException e) {
             LOG.log(Level.SEVERE, "Error SQL en deleteSupply para ID: " + idSupply, e);
            return false; // Fallo por excepción
        }
        return success;
    }

    /**
     * Obtiene todos los suministros usando un Stored Procedure.
     * @return Lista de objetos Supply. Puede estar vacía si no hay suministros o si ocurre un error.
     */
    public List<Supply> getAllSupplies() {
        String storedProc = "{CALL sp_GetAllSupplies()}";
        List<Supply> supplies = new ArrayList<>();
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getAllSupplies.");
                 return supplies; // Devuelve lista vacía
             }

            stmt = conn.prepareCall(storedProc);
            rs = stmt.executeQuery();
            while(rs.next()){
                supplies.add(mapResultSetToSupply(rs));
            }
             LOG.log(Level.INFO, "Obtenidos {0} suministros.", supplies.size());
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getAllSupplies", e);
            // Devuelve la lista parcialmente llena o vacía en caso de error
        }
         return supplies;
    }

    /**
     * Obtiene suministros filtrados usando un Stored Procedure.
     * Maneja parámetros nulos/vacíos adecuadamente pasándolos como NULL al SP.
     * @param searchTerm Término de búsqueda (puede ser null o vacío).
     * @param category Categoría (puede ser null o vacía).
     * @param supplierId ID del proveedor (puede ser null).
     * @return Lista de objetos Supply filtrados.
     */
    public List<Supply> getFilteredSupplies(String searchTerm, String category, Integer supplierId) {
        String storedProc = "{CALL sp_GetFilteredSupplies(?, ?, ?)}"; // Ajustar si el SP es diferente
        List<Supply> supplies = new ArrayList<>();
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                  LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getFilteredSupplies.");
                 return supplies; // Devuelve lista vacía
             }

            stmt = conn.prepareCall(storedProc);

            // Pasar NULL si el parámetro es nulo o vacío
            if (searchTerm != null && !searchTerm.trim().isEmpty()){
                // Añadir comodines si el SP espera un LIKE
                stmt.setString(1, "%" + searchTerm.trim() + "%");
            } else {
                stmt.setNull(1, Types.VARCHAR);
            }

            if (category != null && !category.trim().isEmpty()){
                stmt.setString(2, category.trim());
            } else {
                stmt.setNull(2, Types.VARCHAR);
            }

            if (supplierId != null && supplierId > 0){
                stmt.setInt(3, supplierId);
            } else {
                stmt.setNull(3, Types.INTEGER);
            }

            rs = stmt.executeQuery();
            while(rs.next()){
                supplies.add(mapResultSetToSupply(rs));
            }
             LOG.log(Level.INFO, "Obtenidos {0} suministros filtrados.", supplies.size());
        } catch (SQLException e) {
             LOG.log(Level.SEVERE, "Error SQL en getFilteredSupplies", e);
        }
         return supplies;
    }
}

----- FIN DE cr\ac\una\agrow\service\supply\SupplyService.java -----

package cr.ac.una.agrow;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AgrowApplication {

	public static void main(String[] args) {
		SpringApplication.run(AgrowApplication.class, args);
	}

}

----- FIN DE cr\ac\una\agrow\AgrowApplication.java -----

package cr.ac.una.agrow.config;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String DATABASE = "db_agrow";
    private static final String USER = "root";
    private static final String PASSWORD = "";
    private static final int PORT = 3306;
    private static final String HOST = "localhost";

    private static Connection connection;

    public static Connection getConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String URL = "jdbc:mysql://" + HOST + ":" + PORT + "/" + DATABASE;
            connection = DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            System.out.println("Error al cargar el driver: " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("Error de conexión: " + e.getMessage());
        }
        return connection;
    }
}

----- FIN DE cr\ac\una\agrow\config\DBConnection.java -----

package cr.ac.una.Agrow.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/")
public class HomeController {

    @GetMapping({"", "home"})
    public String home(Model model) {
        model.addAttribute("activeModule", "home"); // Necesario para el sidebar
        return "index";
    }
}

----- FIN DE cr\ac\una\agrow\controller\HomeController.java -----

package cr.ac.una.agrow.controller.producer;

import cr.ac.una.agrow.data.producer.DataProducer;
import cr.ac.una.agrow.service.producer.ProducerService;
import cr.ac.una.agrow.domain.producer.Producer;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.LinkedList;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/producers")
public class ProducerController {

    private static final DateTimeFormatter DATE_FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    @PostMapping("/save")
    public String saveProducer(
            @RequestParam("producerName") String name,
            @RequestParam("contactNumber") String contact,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam("producerType") String type,
            @RequestParam("email") String email,
            @RequestParam("address") String address,
            @RequestParam("city") String city,
            RedirectAttributes redirectAttributes) {

        if (name == null || name.trim().isEmpty() || contact == null || contact.trim().isEmpty() ||
            registrationDateStr == null || registrationDateStr.isEmpty() || type == null || type.isEmpty() ||
            email == null || email.trim().isEmpty() || city == null || city.isEmpty() ||
            address == null || address.trim().isEmpty()) {
             redirectAttributes.addFlashAttribute("error", "Todos los campos son obligatorios.");
             return "redirect:/producers/form";
        }

        LocalDate registrationDate;
        try {
            registrationDate = LocalDate.parse(registrationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
             redirectAttributes.addFlashAttribute("error", "Formato de fecha de registro inválido. Use dd/MM/yyyy.");
             return "redirect:/producers/form";
        }
        if (registrationDate.isAfter(LocalDate.now())) {
             redirectAttributes.addFlashAttribute("error", "La fecha de registro no puede ser futura.");
             return "redirect:/producers/form";
        }

        // ID 0 indica nuevo, isActive por defecto es true
        Producer p = new Producer(0, name.trim(), contact.trim(), registrationDate, type, email.trim(), city, address.trim(), true);

        String resultMessage = DataProducer.saveProducer(p);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/form")
    public String showSaveForm(Model model) {
        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);
        model.addAttribute("producer", new Producer());
        model.addAttribute("isEdit", false);
        model.addAttribute("activeModule", "producer");
        model.addAttribute("activePage", "add");
        return "save_producer";
    }


    @PostMapping("/update")
    public String updateProducer(
            @RequestParam("id_producer") int id,
            @RequestParam("producerName") String name,
            @RequestParam("contactNumber") String contact,
            @RequestParam("registrationDate") String registrationDateStr,
            @RequestParam("producerType") String type,
            @RequestParam("email") String email,
            @RequestParam("city") String city,
            @RequestParam("address") String address,
            @RequestParam(value = "isActive", defaultValue = "false") boolean active,
            RedirectAttributes redirectAttributes) {

         if (name == null || name.trim().isEmpty() || contact == null || contact.trim().isEmpty() ||
             registrationDateStr == null || registrationDateStr.isEmpty() || type == null || type.isEmpty() ||
             email == null || email.trim().isEmpty() || city == null || city.isEmpty() ||
             address == null || address.trim().isEmpty()) {
              redirectAttributes.addFlashAttribute("error", "Todos los campos son obligatorios.");
              return "redirect:/producers/edit?id_producer=" + id;
         }

         LocalDate registrationDate;
         try {
             registrationDate = LocalDate.parse(registrationDateStr, DATE_FORMAT_DD_MM_YYYY);
         } catch (DateTimeParseException e) {
              redirectAttributes.addFlashAttribute("error", "Formato de fecha de registro inválido. Use dd/MM/yyyy.");
              return "redirect:/producers/edit?id_producer=" + id;
         }
         if (registrationDate.isAfter(LocalDate.now())) {
              redirectAttributes.addFlashAttribute("error", "La fecha de registro no puede ser futura.");
              return "redirect:/producers/edit?id_producer=" + id;
         }

        Producer p = new Producer(id, name.trim(), contact.trim(), registrationDate, type, email.trim(), city, address.trim(), active);

        String resultMessage = DataProducer.updateProducer(p);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/edit")
    public String showUpdateForm(
            @RequestParam("id_producer") int id,
            Model model,
            RedirectAttributes redirectAttributes) {

        Producer producer = DataProducer.getProducer(id);

        if (producer == null) {
            redirectAttributes.addFlashAttribute("error", "Productor con ID " + id + " no encontrado.");
            return "redirect:/producers/list";
        }

        model.addAttribute("producer", producer);
        model.addAttribute("isEdit", true);
        model.addAttribute("activeModule", "producer");
        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);
        model.addAttribute("registrationDateForInput", producer.getRegistrationDateForInput());


        return "update_producer";
    }

    @GetMapping("/list")
    public String listProducers(
            @RequestParam(value = "city", required = false) String city,
            @RequestParam(value = "id_producer", required = false) Integer id,
            Model model) {

        LinkedList<Producer> producers;
        String validationMessage = null;

        if (id != null) {
            Producer producer = DataProducer.getProducer(id);
            producers = new LinkedList<>();
            if (producer != null) {
                producers.add(producer);
            } else {
                validationMessage = "El productor con Código/ID " + id + " no existe.";
            }
            model.addAttribute("searchId", id);
        } else if (city != null && !city.trim().isEmpty()) {
            producers = DataProducer.getProducersByCity(city.trim()); 
            if (producers == null || producers.isEmpty()) {
                validationMessage = "No hay productores registrados en la ciudad seleccionada: " + city;
            }
            model.addAttribute("selectedCity", city);
        } else {
            producers = DataProducer.getAllProducers(); 
             if (producers == null || producers.isEmpty()) {
                validationMessage = "No hay productores registrados.";
            }
        }

        model.addAttribute("listP", producers);
        model.addAttribute("validate", validationMessage);
        model.addAttribute("activeModule", "producer");
        model.addAttribute("activePage", "list");
        return "producers_list";
    }


    @PostMapping("/delete")
    public String deleteProducerButton(
            @RequestParam("id_producer") int id,
            RedirectAttributes redirectAttributes) {
        String resultMessage = DataProducer.deleteProducer(id);
        String[] parts = ProducerService.arraySplit(resultMessage);
        int typeMsg = Integer.parseInt(parts[0]);
        String message = parts[1];

        if (typeMsg == 1) {
            redirectAttributes.addFlashAttribute("mensaje", message);
        } else {
            redirectAttributes.addFlashAttribute("error", message);
        }

        return "redirect:/producers/list";
    }

    @GetMapping("/information")
    public String information(
            @RequestParam("id_producer") int id,
             Model model, RedirectAttributes redirectAttributes) {
        Producer producer = DataProducer.getProducer(id);
        if (producer == null) {
            redirectAttributes.addFlashAttribute("error", "Productor con ID " + id + " no encontrado.");
            return "redirect:/producers/list";
        }
        model.addAttribute("producer", producer);
        model.addAttribute("activeModule", "producer");
        return "information_producer";
    }

}

----- FIN DE cr\ac\una\agrow\controller\producer\ProducerController.java -----

package cr.ac.una.agrow.controller.supply;

import cr.ac.una.agrow.data.supply.DataSupply;
import cr.ac.una.agrow.domain.supply.Supply;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/supplies")
public class SupplyController {

    private static final DateTimeFormatter DATE_FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    @GetMapping("/list")
    public String listadoSupplies(
            @RequestParam(value = "searchTerm", required = false) String searchTerm,
            @RequestParam(value = "category", required = false) String category,
            @RequestParam(value = "supplierId", required = false) Integer supplierId,
            Model model) {

        List<Supply> listaSupplies;
        if ((searchTerm != null && !searchTerm.trim().isEmpty()) || 
            (category != null && !category.trim().isEmpty()) || 
            supplierId != null) {
            listaSupplies = DataSupply.getFilteredSupplies(searchTerm, category, supplierId);
        } else {
            listaSupplies = DataSupply.getSupplies();
        }

        model.addAttribute("titulo", "Listado de Suministros");
        model.addAttribute("cantidad", listaSupplies != null ? listaSupplies.size() : 0); 
        model.addAttribute("supplies", listaSupplies);
        model.addAttribute("searchTerm", searchTerm);
        model.addAttribute("selectedCategory", category);
        model.addAttribute("selectedSupplierId", supplierId);
        model.addAttribute("activeModule", "supply");
        model.addAttribute("activePage", "list");
        return "list_supply";
    }

    @GetMapping("/form")
    public String mostrarFormularioSupply(Model model) {
        model.addAttribute("activeModule", "supply");
        model.addAttribute("activePage", "add");
        String todayFormatted = LocalDate.now().format(DATE_FORMAT_DD_MM_YYYY);
        model.addAttribute("today", todayFormatted);
        model.addAttribute("supply", new Supply()); 
        model.addAttribute("isEdit", false); //
        return "form_supply"; 
    }

    @PostMapping("/save")
    public String guardarSupply(
            @RequestParam("name") String name,
            @RequestParam("category") String category,
            @RequestParam("stock") double stock,
            @RequestParam("stockMinimo") double stockMinimo,
            @RequestParam("unitType") String unitType,
            @RequestParam("pricePerUnit") double pricePerUnit,
            @RequestParam(value = "expirationDate", required = true) String expirationDateStr,
            @RequestParam("supplierId") int supplierId,
            RedirectAttributes redirectAttributes) {

        String error = validateSupplyFields(name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDateStr, supplierId);
        if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            // Reenviar datos ingresados al formulario en caso de error
            redirectAttributes.addFlashAttribute("supply", new Supply(name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId)); // Enviar sin fecha parseada
            redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
            return "redirect:/supplies/form";
        }

        LocalDate expDate;
        try {
             expDate = LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
             redirectAttributes.addFlashAttribute("error", "Formato de fecha de vencimiento inválido. Use dd/MM/yyyy.");
             // Reenviar datos ingresados al formulario en caso de error
             redirectAttributes.addFlashAttribute("supply", new Supply(name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId));
             redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
             return "redirect:/supplies/form";
        }

        Supply supply = new Supply(name.trim(), category.trim(), stock, stockMinimo, unitType.trim(), pricePerUnit, expDate, supplierId);
        Supply savedSupply = null;
        try {

            savedSupply = DataSupply.saveSupply(supply); 
             if (savedSupply != null || true) {
                 redirectAttributes.addFlashAttribute("mensaje", "Suministro guardado exitosamente.");
                 return "redirect:/supplies/list";
             } else {
                 // Este caso es si saveSupply devuelve null indicando error
                 redirectAttributes.addFlashAttribute("error", "Error desconocido al guardar el suministro.");
                 redirectAttributes.addFlashAttribute("supply", supply);
                 redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
                 return "redirect:/supplies/form";
             }
        } catch (Exception e) {
             redirectAttributes.addFlashAttribute("error", "Error al guardar el suministro: " + e.getMessage());
             redirectAttributes.addFlashAttribute("supply", supply);
             redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
             return "redirect:/supplies/form"; // Volver al formulario en caso de error
        }
    }

    @GetMapping("/edit")
    public String editarSupply(@RequestParam("idSupply") int idSupply, Model model, RedirectAttributes redirectAttributes) {
        Supply supply = DataSupply.getSupply(idSupply);
        if (supply == null) {
            redirectAttributes.addFlashAttribute("error", "El suministro seleccionado (ID: " + idSupply + ") no existe.");
            return "redirect:/supplies/list";
        }
        model.addAttribute("supply", supply);
        model.addAttribute("isEdit", true); // Indicar que es formulario de edición
        model.addAttribute("activeModule", "supply");
        model.addAttribute("expirationDateForInput", supply.getExpirationDateForInput()); // Formato YYYY-MM-DD
        return "edit_supply"; 
    }

    @PostMapping("/update")
    public String actualizarSupply(
            @RequestParam("idSupply") int idSupply,
            @RequestParam("name") String name,
            @RequestParam("category") String category,
            @RequestParam("stock") double stock,
            @RequestParam("stockMinimo") double stockMinimo,
            @RequestParam("unitType") String unitType,
            @RequestParam("pricePerUnit") double pricePerUnit,
            @RequestParam(value = "expirationDate", required = true) String expirationDateStr,
            @RequestParam("supplierId") int supplierId,
            RedirectAttributes redirectAttributes) {

        String error = validateSupplyFields(name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDateStr, supplierId);
        if (error != null) {
            redirectAttributes.addFlashAttribute("error", error);
            // Reenviar datos para repoblar el form
            redirectAttributes.addFlashAttribute("supply", new Supply(idSupply, name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId));
            redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
            return "redirect:/supplies/edit?idSupply=" + idSupply;
        }

         LocalDate expDate;
         try {
             expDate = LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
         } catch (DateTimeParseException e) {
              redirectAttributes.addFlashAttribute("error", "Formato de fecha de vencimiento inválido. Use dd/MM/yyyy.");
              // Reenviar datos para repoblar el form
              redirectAttributes.addFlashAttribute("supply", new Supply(idSupply, name, category, stock, stockMinimo, unitType, pricePerUnit, null, supplierId));
              redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
              return "redirect:/supplies/edit?idSupply=" + idSupply;
         }

        Supply supply = new Supply(idSupply, name.trim(), category.trim(), stock, stockMinimo, unitType.trim(), pricePerUnit, expDate, supplierId);
        boolean actualizado = false;
         try {
             actualizado = DataSupply.updateSupply(supply);
             if (!actualizado) {
                 redirectAttributes.addFlashAttribute("error", "Error al actualizar el suministro. Es posible que no se encontrara el ID.");
                 redirectAttributes.addFlashAttribute("supply", supply);
                 redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
                 return "redirect:/supplies/edit?idSupply=" + idSupply;
             } else {
                 redirectAttributes.addFlashAttribute("mensaje", "Suministro actualizado exitosamente.");
                 return "redirect:/supplies/list";
             }
         } catch (Exception e) {
              redirectAttributes.addFlashAttribute("error", "Error al actualizar el suministro: " + e.getMessage());
              redirectAttributes.addFlashAttribute("supply", supply);
              redirectAttributes.addFlashAttribute("expirationDateStr", expirationDateStr);
              return "redirect:/supplies/edit?idSupply=" + idSupply;
         }
    }

    @PostMapping("/delete")
    public String eliminarSupply(@RequestParam("idSupply") int idSupply, RedirectAttributes redirectAttributes) {
        boolean eliminado = false;
        try {
            eliminado = DataSupply.deleteSupply(idSupply);
            if (!eliminado) {
                redirectAttributes.addFlashAttribute("error", "Error al eliminar el suministro (ID: " + idSupply + "). Puede estar en uso o no existir.");
            } else {
                redirectAttributes.addFlashAttribute("mensaje", "Suministro eliminado exitosamente.");
            }
        } catch (Exception e) {
             redirectAttributes.addFlashAttribute("error", "Error al eliminar el suministro (ID: " + idSupply + "): " + e.getMessage());
        }
        return "redirect:/supplies/list";
    }

    @GetMapping("/view")
    public String verSupply(@RequestParam("idSupply") int idSupply, Model model, RedirectAttributes redirectAttributes) {
        Supply supply = DataSupply.getSupply(idSupply);
        if (supply == null) {
            redirectAttributes.addFlashAttribute("error", "El suministro solicitado (ID: " + idSupply + ") no se encuentra.");
            return "redirect:/supplies/list";
        }
        model.addAttribute("supply", supply);
        model.addAttribute("activeModule", "supply");
        return "view_supply";
    }


    private String validateSupplyFields(String name, String category, double stock, double stockMinimo,
                                        String unitType, double pricePerUnit, String expirationDateStr, int supplierId) {
        if (name == null || name.trim().isEmpty()) return "El nombre es obligatorio.";
        if (category == null || category.trim().isEmpty()) return "La categoría es obligatoria.";
        if (unitType == null || unitType.trim().isEmpty()) return "El tipo de unidad es obligatorio.";
        if (supplierId <= 0) return "El ID del proveedor no es válido."; // Validación básica de ID
        if (stock < 0) return "El stock debe ser un número no negativo.";
        if (stockMinimo < 0) return "El stock mínimo debe ser un número no negativo.";
        if (pricePerUnit <= 0) return "El precio por unidad debe ser mayor que cero.";
        if (expirationDateStr == null || expirationDateStr.trim().isEmpty()) return "La fecha de vencimiento es obligatoria.";

        try {
            LocalDate.parse(expirationDateStr, DATE_FORMAT_DD_MM_YYYY);
        } catch (DateTimeParseException e) {
            return "Formato de fecha de vencimiento inválido. Use dd/MM/yyyy.";
        }

        return null; 
    }
}

----- FIN DE cr\ac\una\agrow\controller\supply\SupplyController.java -----


package cr.ac.una.agrow.data.producer;

import cr.ac.una.agrow.domain.producer.Producer;
// Importar el servicio que contiene la lógica
import cr.ac.una.agrow.service.producer.ProducerService;
import java.util.LinkedList;

/**
 * Capa de Datos (Facade) para Productores.
 * Delega las llamadas al ProducerService que contiene la lógica de acceso a BD.
 */
public class DataProducer {

    // Instancia del servicio real
    private static final ProducerService producerService = new ProducerService();

    /**
     * Obtiene una lista de todos los productores.
     * @return LinkedList de Producer.
     */
    public static LinkedList<Producer> getAllProducers() {
        return producerService.getAllProducers();
    }

     /**
     * Obtiene una lista de productores filtrados por ciudad.
     * @param city La ciudad por la cual filtrar.
     * @return LinkedList de Producer.
     */
    public static LinkedList<Producer> getProducersByCity(String city) {
        return producerService.getProducersByCity(city);
    }


    /**
     * Obtiene un productor específico por su ID.
     * @param id_producer ID del productor a buscar.
     * @return Objeto Producer o null si no se encuentra.
     */
    public static Producer getProducer(int id_producer) {
        return producerService.getProducerById(id_producer);
    }

    /**
     * Guarda un nuevo productor. El ID debe ser generado por el servicio.
     * @param p Productor a guardar (ID usualmente 0 o ignorado).
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public static String saveProducer(Producer p) {
        return producerService.saveProducer(p);
    }

    /**
     * Actualiza un productor existente.
     * @param p Productor con los datos actualizados (incluyendo el ID).
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public static String updateProducer(Producer p) {
        return producerService.updateProducer(p);
    }

    /**
     * Elimina un productor por su ID.
     * @param id_producer ID del productor a eliminar.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public static String deleteProducer(int id_producer) {
        return producerService.deleteProducer(id_producer);
    }

    // NOTA: Los métodos que antes estaban en ProducerData y contenían la lógica SQL
    // ahora están movidos a ProducerService. Esta clase es solo un punto de entrada.
}

----- FIN DE cr\ac\una\agrow\data\producer\DataProducer.java -----


package cr.ac.una.agrow.data.supply;

import cr.ac.una.agrow.service.supply.SupplyService;
import cr.ac.una.agrow.domain.supply.Supply;
import java.util.List;

/**
 * Capa de Datos (Facade) para Suministros.
 * Delega las llamadas al SupplyService que contiene la lógica de acceso a BD.
 */
public class DataSupply {

    // Instancia del servicio real
    private static final SupplyService supplyService = new SupplyService();

    /**
     * Obtiene todos los suministros.
     * @return Lista de Supply.
     */
    public static List<Supply> getSupplies() {
        return supplyService.getAllSupplies();
    }

    /**
     * Obtiene un suministro por su ID.
     * @param idSupply ID del suministro.
     * @return Objeto Supply o null si no se encuentra.
     */
    public static Supply getSupply(int idSupply) {
        return supplyService.getSupplyById(idSupply);
    }

    /**
     * Guarda un nuevo suministro.
     * @param supply Suministro a guardar.
     * @return El suministro guardado (puede incluir ID generado) o null/excepción en error.
     *         (Ajustar según la firma real de insertSupply en SupplyService)
     */
    public static Supply saveSupply(Supply supply) {
         // La implementación original era void, se cambia para seguir el patrón
         // de devolver el objeto guardado o indicar éxito/error de forma más clara.
         // Si SupplyService.insertSupply devuelve el objeto, está bien.
         // Si era void, hay que decidir si se cambia o se maneja con excepciones.
         // Asumimos que insertSupply devuelve el objeto con ID o null/excepción.
        return supplyService.insertSupply(supply);
    }

    /**
     * Actualiza un suministro existente.
     * @param supply Suministro con datos actualizados.
     * @return true si la actualización fue exitosa, false en caso contrario.
     */
    public static boolean updateSupply(Supply supply) {
        return supplyService.updateSupply(supply);
    }

    /**
     * Elimina un suministro por su ID.
     * @param idSupply ID del suministro a eliminar.
     * @return true si la eliminación fue exitosa, false en caso contrario.
     */
    public static boolean deleteSupply(int idSupply) {
        return supplyService.deleteSupply(idSupply);
    }

    /**
     * Obtiene suministros filtrados por término, categoría o ID de proveedor.
     * @param searchTerm Término de búsqueda (nombre).
     * @param category Categoría.
     * @param supplierId ID del proveedor.
     * @return Lista de Supply filtrados.
     */
    public static List<Supply> getFilteredSupplies(String searchTerm, String category, Integer supplierId) {
        return supplyService.getFilteredSupplies(searchTerm, category, supplierId);
    }
}

----- FIN DE cr\ac\una\agrow\data\supply\DataSupply.java -----

package cr.ac.una.agrow.domain.producer;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Producer {

    private int id_producer;
    private String producerName;
    private String contactNumber;
    private LocalDate registrationDate;
    private String producerType;
    private String email;
    private String city;
    private String address;
    private boolean isActive;

    public Producer() {
    }

    public Producer(int id_producer, String producerName, String contactNumber, LocalDate registrationDate, String producerType, String email, String city, String address, boolean isActive) {
        this.id_producer = id_producer;
        this.producerName = producerName;
        this.contactNumber = contactNumber;
        this.registrationDate = registrationDate;
        this.producerType = producerType;
        this.email = email;
        this.city = city;
        this.address = address;
        this.isActive = isActive;
    }

    // --- Getters y Setters ---

    public int getId_producer() {
        return id_producer;
    }

    public void setId_producer(int id_producer) {
        this.id_producer = id_producer;
    }

    public String getProducerName() {
        return producerName;
    }

    public void setProducerName(String producerName) {
        this.producerName = producerName;
    }

    public String getContactNumber() {
        return contactNumber;
    }

    public void setContactNumber(String contactNumber) {
        this.contactNumber = contactNumber;
    }

    public LocalDate getRegistrationDate() {
        return registrationDate;
    }

     public String getFormattedRegistrationDate() {
          if (registrationDate == null) return "-";
          return registrationDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
     }

     public String getRegistrationDateForInput() {
        if (registrationDate == null) return "";
        return registrationDate.format(DateTimeFormatter.ISO_LOCAL_DATE);
     }

    public void setRegistrationDate(LocalDate registrationDate) {
        this.registrationDate = registrationDate;
    }

    public String getProducerType() {
        return producerType;
    }

    public void setProducerType(String producerType) {
        this.producerType = producerType;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public boolean isActive() {
        return isActive;
    }

    public void setActive(boolean active) {
        isActive = active;
    }

    public boolean isIsActive() { return isActive; }
    public void setIsActive(boolean active) { this.isActive = active; }


    @Override
    public String toString() {
        return "Producer{" +
               "id_producer=" + id_producer +
               ", producerName='" + producerName + '\'' +
               ", contactNumber='" + contactNumber + '\'' +
               ", registrationDate=" + (registrationDate != null ? getFormattedRegistrationDate() : "null") +
               ", producerType='" + producerType + '\'' +
               ", email='" + email + '\'' +
               ", city='" + city + '\'' +
               ", address='" + address + '\'' +
               ", isActive=" + isActive +
               '}';
    }
}

----- FIN DE cr\ac\una\agrow\domain\producer\Producer.java -----


package cr.ac.una.agrow.domain.supply;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class Supply {
    private int idSupply;
    private String name;
    private String category;
    private double stock;
    private double stockMinimo;
    private String unitType;
    private double pricePerUnit;
    private LocalDate expirationDate;
    private int supplierId;
    private String estado; // Calculado por SP

    // Formateadores estáticos
    private static final DateTimeFormatter FORMAT_DD_MM_YYYY = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DateTimeFormatter FORMAT_YYYY_MM_DD = DateTimeFormatter.ISO_LOCAL_DATE; // YYYY-MM-DD


    public Supply() { }

    // Constructor para inserción (sin ID, sin estado)
    public Supply(String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, int supplierId) {
        this.name = name;
        this.category = category;
        this.stock = stock;
        this.stockMinimo = stockMinimo;
        this.unitType = unitType;
        this.pricePerUnit = pricePerUnit;
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
    }

    // Constructor para actualización o uso interno (con ID, sin estado)
    public Supply(int idSupply, String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, int supplierId) {
        this.idSupply = idSupply;
        this.name = name;
        this.category = category;
        this.stock = stock;
        this.stockMinimo = stockMinimo;
        this.unitType = unitType;
        this.pricePerUnit = pricePerUnit;
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
    }

    // Constructor completo usado al mapear desde ResultSet (con ID y estado del SP)
    public Supply(int idSupply, String name, String category, double stock, double stockMinimo,
                  String unitType, double pricePerUnit, LocalDate expirationDate, int supplierId, String estado) {
        this.idSupply = idSupply;
        this.name = name;
        this.category = category;
        this.stock = stock;
        this.stockMinimo = stockMinimo;
        this.unitType = unitType;
        this.pricePerUnit = pricePerUnit;
        this.expirationDate = expirationDate;
        this.supplierId = supplierId;
        this.estado = estado;
    }

    // --- Getters y Setters ---

    public int getIdSupply() { return idSupply; }
    public void setIdSupply(int idSupply) { this.idSupply = idSupply; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }

    public double getStock() { return stock; }
    public void setStock(double stock) {
        this.stock = Math.max(0, stock); // Asegurar no negativo
    }

    public double getStockMinimo() { return stockMinimo; }
    public void setStockMinimo(double stockMinimo) {
        this.stockMinimo = Math.max(0, stockMinimo); // Asegurar no negativo
    }

    public String getUnitType() { return unitType; }
    public void setUnitType(String unitType) { this.unitType = unitType; }

    public double getPricePerUnit() { return pricePerUnit; }
    public void setPricePerUnit(double pricePerUnit) {
        this.pricePerUnit = Math.max(0.01, pricePerUnit); // Evitar precios <= 0
    }

    public LocalDate getExpirationDate() { return expirationDate; }
    public void setExpirationDate(LocalDate expirationDate) { this.expirationDate = expirationDate; }

    // Devuelve fecha formateada para mostrar (dd/MM/yyyy)
    public String getFormattedExpirationDate() {
        if (expirationDate == null) return "-";
        return expirationDate.format(FORMAT_DD_MM_YYYY);
    }

    // Devuelve fecha formateada para input date (yyyy-MM-dd)
    public String getExpirationDateForInput() {
        if (expirationDate == null) return "";
        return expirationDate.format(FORMAT_YYYY_MM_DD);
    }


    public int getSupplierId() { return supplierId; }
    public void setSupplierId(int supplierId) { this.supplierId = supplierId; }

    public String getEstado() {
         // Si el estado no vino de la BD, calcula uno básico.
         if (this.estado == null || this.estado.trim().isEmpty()) {
              if (this.stock <= 0) return "Agotado";
              if (this.stock <= this.stockMinimo) return "Bajo";
              return "Óptimo";
         }
        return estado;
    }
    // Setter para estado (aunque usualmente viene de BD)
    public void setEstado(String estado) { this.estado = estado; }


    @Override
    public String toString() {
        return "Supply{" +
                "idSupply=" + idSupply +
                ", name='" + name + '\'' +
                ", category='" + category + '\'' +
                ", stock=" + stock +
                ", stockMinimo=" + stockMinimo +
                ", unitType='" + unitType + '\'' +
                ", pricePerUnit=" + pricePerUnit +
                ", expirationDate=" + (expirationDate != null ? getFormattedExpirationDate() : "null") +
                ", supplierId=" + supplierId +
                ", estado='" + getEstado() + '\'' +
                '}';
    }
}

----- FIN DE cr\ac\una\agrow\domain\supply\Supply.java -----

package cr.ac.una.agrow.service.producer;

import cr.ac.una.agrow.config.DBConnection;
import cr.ac.una.agrow.domain.producer.Producer;

import java.sql.*;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Capa de Servicio para Productores.
 * Contiene la lógica de negocio y acceso a datos para los productores.
 */
public class ProducerService {

    private static final Logger LOG = Logger.getLogger(ProducerService.class.getName());

    /**
     * Obtiene una lista de todos los productores.
     * @return LinkedList de Producer.
     */
    public LinkedList<Producer> getAllProducers() {
        return executeListProcedure("{call spListProducer()}", null);
    }

    /**
     * Obtiene una lista de productores filtrados por ciudad.
     * @param city La ciudad por la cual filtrar.
     * @return LinkedList de Producer.
     */
    public LinkedList<Producer> getProducersByCity(String city) {
        return executeListProcedure("{call spListCity(?)}", city);
    }

    /**
     * Ejecuta un Stored Procedure para obtener una lista de productores.
     * @param sqlCall El comando SQL para llamar al SP (puede incluir '?').
     * @param parameter El parámetro para el SP (puede ser null si no aplica).
     * @return LinkedList de Producer.
     */
    private LinkedList<Producer> executeListProcedure(String sqlCall, String parameter) {
        LinkedList<Producer> producers = new LinkedList<>();
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;

        try {
            cn = DBConnection.getConnection();
            if (cn == null) {
                LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en executeListProcedure.");
                return producers; // Retorna lista vacía
            }

            stmt = cn.prepareCall(sqlCall);

            if (parameter != null) {
                stmt.setString(1, parameter);
            }

            rs = stmt.executeQuery();
            while (rs.next()) {
                producers.add(mapResultSetToProducer(rs));
            }
             LOG.log(Level.INFO, "Ejecutado SP: {0} con parámetro: {1}. Productores encontrados: {2}", new Object[]{sqlCall, parameter, producers.size()});

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL ejecutando SP: " + sqlCall + " con parámetro: " + parameter, e);
        }
        return producers;
    }


    /**
     * Obtiene un productor específico por su ID.
     * @param id_producer ID del productor a buscar.
     * @return Objeto Producer o null si no se encuentra.
     */
    public Producer getProducerById(int id_producer) {
        Producer p = null;
        Connection cn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        String sqlCall = "{call spGetProducer(?)}";

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getProducerById.");
                 return null;
             }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id_producer);
            rs = stmt.executeQuery();

            if (rs.next()) {
                p = mapResultSetToProducer(rs);
                LOG.log(Level.INFO, "Productor encontrado con ID: {0}", id_producer);
            } else {
                 LOG.log(Level.WARNING, "No se encontró productor con ID: {0}", id_producer);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getProducerById con ID: " + id_producer, e);
        }
        return p;
    }

    /**
     * Guarda un nuevo productor en la base de datos.
     * Genera un ID único antes de guardar.
     * @param p Productor a guardar.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public String saveProducer(Producer p) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spAddProducer(?, ?, ?, ?, ?, ?, ?, ?, ?)}";
        boolean success = false;

        // Asigna un ID único generado localmente ANTES de intentar guardar
        p.setId_producer(generarCodigoUnico());

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en saveProducer.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }
            stmt = cn.prepareCall(sqlCall);

            stmt.setInt(1, p.getId_producer()); // Usar el ID generado
            stmt.setString(2, p.getProducerName());
            stmt.setString(3, p.getContactNumber());
            if (p.getRegistrationDate() != null) {
                stmt.setDate(4, Date.valueOf(p.getRegistrationDate()));
            } else {
                stmt.setNull(4, Types.DATE);
            }
            stmt.setString(5, p.getProducerType());
            stmt.setString(6, p.getEmail());
            stmt.setString(7, p.getCity());
            stmt.setString(8, p.getAddress());
            stmt.setBoolean(9, p.isActive());

            // executeUpdate devuelve el número de filas afectadas, útil para verificar éxito
            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                LOG.log(Level.INFO, "Productor guardado exitosamente con ID: {0}", p.getId_producer());
            } else {
                 LOG.log(Level.WARNING, "SP spAddProducer ejecutado pero no afectó filas para ID: {0}", p.getId_producer());
            }

        } catch (SQLException e) {
             LOG.log(Level.SEVERE, "Error SQL en saveProducer para ID: " + p.getId_producer(), e);
             return "2,Error de base de datos al guardar: " + e.getMessage();
        }

        return success ? "1,El productor se ha guardado exitosamente." : "2,Error al guardar el productor. No se afectaron filas.";
    }

    /**
     * Actualiza un productor existente en la base de datos.
     * @param p Productor con los datos actualizados.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public String updateProducer(Producer p) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spUpdateProducer(?, ?, ?, ?, ?, ?, ?, ?, ?)}";
        boolean success = false;

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                  LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en updateProducer.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }
            stmt = cn.prepareCall(sqlCall);

            stmt.setInt(1, p.getId_producer());
            stmt.setString(2, p.getProducerName());
            stmt.setString(3, p.getContactNumber());
            if (p.getRegistrationDate() != null) {
                stmt.setDate(4, Date.valueOf(p.getRegistrationDate()));
            } else {
                stmt.setNull(4, Types.DATE);
            }
            stmt.setString(5, p.getProducerType());
            stmt.setString(6, p.getEmail());
            stmt.setString(7, p.getCity());
            stmt.setString(8, p.getAddress());
            stmt.setBoolean(9, p.isActive());

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                 LOG.log(Level.INFO, "Productor actualizado exitosamente con ID: {0}", p.getId_producer());
            } else {
                 LOG.log(Level.WARNING, "SP spUpdateProducer ejecutado pero no afectó filas para ID: {0}. ¿Existe el productor?", p.getId_producer());
            }

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en updateProducer para ID: " + p.getId_producer(), e);
            return "2,Error de base de datos al actualizar: " + e.getMessage();
        }
         return success ? "1,El productor se ha actualizado exitosamente." : "2,Error al actualizar el productor. Verifique si el ID existe.";
    }

    /**
     * Elimina un productor de la base de datos por su ID.
     * @param id_producer ID del productor a eliminar.
     * @return String con formato "tipo,mensaje" indicando éxito o error.
     */
    public String deleteProducer(int id_producer) {
        Connection cn = null;
        CallableStatement stmt = null;
        String sqlCall = "{call spDeleteProducer(?)}";
        boolean success = false;

        try {
            cn = DBConnection.getConnection();
             if (cn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en deleteProducer.");
                 return "2,Error interno: No se pudo conectar a la base de datos.";
             }
            stmt = cn.prepareCall(sqlCall);
            stmt.setInt(1, id_producer);

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

             if (success) {
                 LOG.log(Level.INFO, "Productor eliminado exitosamente con ID: {0}", id_producer);
            } else {
                 LOG.log(Level.WARNING, "SP spDeleteProducer ejecutado pero no afectó filas para ID: {0}. ¿Existe el productor?", id_producer);
            }

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en deleteProducer para ID: " + id_producer, e);
             // Revisar código de error para FK constraint violation
             if (e.getSQLState().startsWith("23")) { // Códigos de error de integridad
                 return "2,Error al eliminar: El productor tiene registros asociados y no puede ser eliminado.";
             }
            return "2,Error de base de datos al eliminar: " + e.getMessage();
        }
        return success ? "1,El productor se ha eliminado exitosamente." : "2,Error al eliminar el productor. Verifique si el ID existe o si tiene registros asociados.";
    }

    /**
     * Mapea una fila de un ResultSet a un objeto Producer.
     * @param rs ResultSet posicionado en la fila a mapear.
     * @return Objeto Producer.
     * @throws SQLException Si ocurre un error al leer el ResultSet.
     */
    private Producer mapResultSetToProducer(ResultSet rs) throws SQLException {
        Date registrationDateSql = rs.getDate("registrationDate");
        LocalDate registrationDate = (registrationDateSql != null) ? registrationDateSql.toLocalDate() : null;

        return new Producer(
            rs.getInt("id_producer"),
            rs.getString("producerName"),
            rs.getString("contactNumber"),
            registrationDate,
            rs.getString("producerType"),
            rs.getString("email"),
            rs.getString("city"),
            rs.getString("address"),
            rs.getBoolean("isActive")
        );
    }


    /**
     * Genera un número aleatorio simple de 5 dígitos.
     * @return int número aleatorio entre 10000 y 99999.
     */
    private static int generarCodigo() {
        return ThreadLocalRandom.current().nextInt(10000, 100000);
    }

     /**
      * Intenta generar un código único verificando si ya existe en la BD.
      * Realiza un número limitado de intentos.
      * @return int código generado (posiblemente no único si fallan los intentos).
      */
     private static int generarCodigoUnico() {
         int attempts = 0;
         final int MAX_ATTEMPTS = 10;
         ProducerService tempService = new ProducerService(); // Necesita instancia para llamar a getProducerById

         while (attempts < MAX_ATTEMPTS) {
             int codigo = generarCodigo();
             // Verifica si el código generado ya existe en la BD
             // Considerar secuencias de BD o UUIDs para una solución robusta.
             if (tempService.getProducerById(codigo) == null) {
                 LOG.log(Level.INFO, "Código único generado: {0}", codigo);
                 return codigo; // Código disponible encontrado
             }
             attempts++;
             LOG.log(Level.FINE, "Intento {0}: Código {1} ya existe.", new Object[]{attempts, codigo});
         }
          // Si falla después de varios intentos, informa y devuelve uno aleatorio igualmente.
          int fallbackCodigo = generarCodigo();
          LOG.log(Level.WARNING, "No se pudo generar un ID de productor único después de {0} intentos. Usando código aleatorio: {1}", new Object[]{MAX_ATTEMPTS, fallbackCodigo});
          return fallbackCodigo;
     }


    /**
     * Helper simple para dividir el mensaje de resultado ("tipo,mensaje").
     * Este método es público y estático para que el Controller pueda usarlo.
     * @param datos String en formato "tipo,mensaje".
     * @return String[] con [tipo, mensaje] o un array de error si el formato es inválido.
     */
    public static String[] arraySplit(String datos) {
        if (datos == null) {
             LOG.log(Level.WARNING, "arraySplit recibió datos nulos.");
            return new String[]{"2", "Error interno: Mensaje nulo."}; // Manejo de nulos
        }
        // Divide solo por la primera coma para separar tipo y mensaje
        String[] parts = datos.split(",", 2);
        if (parts.length == 2) {
            return parts;
        } else {
             LOG.log(Level.WARNING, "arraySplit recibió formato inesperado: {0}", datos);
            return new String[]{"2", "Error interno: Formato de mensaje inesperado (" + datos + ")."};
        }
    }
}

----- FIN DE cr\ac\una\agrow\service\producer\ProducerService.java -----


package cr.ac.una.agrow.service.supply;

import cr.ac.una.agrow.config.DBConnection;
import cr.ac.una.agrow.domain.supply.Supply;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Capa de Servicio para Suministros.
 * Contiene la lógica de negocio y acceso a datos para los suministros.
 */
public class SupplyService {

    private static final Logger LOG = Logger.getLogger(SupplyService.class.getName());

    /**
     * Mapea una fila del ResultSet a un objeto Supply.
     * @param rs ResultSet posicionado en la fila a mapear.
     * @return Objeto Supply mapeado.
     * @throws SQLException Si ocurre un error al leer el ResultSet.
     */
    private Supply mapResultSetToSupply(ResultSet rs) throws SQLException {
        int idSupply = rs.getInt("idSupply");
        String name = rs.getString("name");
        String category = rs.getString("category");
        double stock = rs.getDouble("stock");
        double stockMinimo = rs.getDouble("stockMinimo");
        String unitType = rs.getString("unitType");
        double pricePerUnit = rs.getDouble("pricePerUnit");
        Date expDateSQL = rs.getDate("expirationDate");
        LocalDate expirationDate = (expDateSQL != null) ? expDateSQL.toLocalDate() : null;
        int supplierId = rs.getInt("supplierId");
        String estado = rs.getString("estado"); // Estado calculado por el SP

        return new Supply(idSupply, name, category, stock, stockMinimo, unitType, pricePerUnit, expirationDate, supplierId, estado);
    }

    /**
     * Inserta un suministro usando un Stored Procedure.
     * @param supply Objeto Supply a insertar (sin ID o ID 0).
     * @return El objeto Supply insertado con su ID asignado, o null si falla la inserción.
     */
    public Supply insertSupply(Supply supply) {
        String storedProc = "{CALL sp_InsertSupply(?, ?, ?, ?, ?, ?, ?, ?)}"; // Ajustar si el SP es diferente
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en insertSupply.");
                 return null;
             }

            stmt = conn.prepareCall(storedProc);

            stmt.setString(1, supply.getName());
            stmt.setString(2, supply.getCategory());
            stmt.setDouble(3, supply.getStock());
            stmt.setDouble(4, supply.getStockMinimo());
            stmt.setString(5, supply.getUnitType());
            stmt.setDouble(6, supply.getPricePerUnit());
            stmt.setDate(7, supply.getExpirationDate() != null ? Date.valueOf(supply.getExpirationDate()) : null);
            stmt.setInt(8, supply.getSupplierId());

            // Ejecutar y verificar si devuelve un ResultSet (con el ID)
            boolean hasResultSet = stmt.execute();
            if (hasResultSet) {
                rs = stmt.getResultSet();
                if (rs != null && rs.next()) {
                    int generatedId = rs.getInt(1); 
                    supply.setIdSupply(generatedId);
                    LOG.log(Level.INFO, "Suministro insertado exitosamente con ID: {0}", generatedId);
                    return supply; // Devuelve el objeto con el ID
                } else {
                     LOG.log(Level.WARNING, "SP sp_InsertSupply ejecutado pero no devolvió el ID generado.");
                     return null; // Falló la obtención del ID
                }
            } else {
                 // Si el SP no devuelve ResultSet pero se ejecutó (quizás devuelve filas afectadas?)
                 int updateCount = stmt.getUpdateCount();
                 if (updateCount > 0) {
                      LOG.log(Level.WARNING, "SP sp_InsertSupply ejecutado (filas afectadas: {0}) pero no se configuró para devolver ID. No se puede confirmar ID.", updateCount);

                      return null;
                 } else {
                      LOG.log(Level.SEVERE, "SP sp_InsertSupply ejecutado pero no afectó filas ni devolvió ID.");
                      return null; // Falló la inserción
                 }
            }
        } catch (SQLException e) {
             LOG.log(Level.SEVERE, "Error SQL en insertSupply", e);
            return null; // Fallo por excepción SQL
        } 
    }

    /**
     * Obtiene un suministro por su ID usando un Stored Procedure.
     * @param idSupply ID del suministro a buscar.
     * @return Objeto Supply si se encuentra, null en caso contrario.
     */
    public Supply getSupplyById(int idSupply) {
        String storedProc = "{CALL sp_GetSupplyById(?)}";
         Connection conn = null;
         CallableStatement stmt = null;
         ResultSet rs = null;
         Supply supply = null;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getSupplyById.");
                 return null;
             }

            stmt = conn.prepareCall(storedProc);
            stmt.setInt(1, idSupply);
            rs = stmt.executeQuery();

            if (rs.next()) {
                supply = mapResultSetToSupply(rs);
                 LOG.log(Level.INFO, "Suministro encontrado con ID: {0}", idSupply);
            } else {
                 LOG.log(Level.WARNING, "No se encontró suministro con ID: {0}", idSupply);
            }
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getSupplyById con ID: " + idSupply, e);
        }
        return supply;
    }

    /**
     * Actualiza un suministro existente usando un Stored Procedure.
     * @param supply Objeto Supply con los datos actualizados (incluyendo ID).
     * @return true si la actualización afectó al menos una fila, false en caso contrario.
     */
    public boolean updateSupply(Supply supply) {
        String storedProc = "{CALL sp_UpdateSupply(?, ?, ?, ?, ?, ?, ?, ?, ?)}"; 
         Connection conn = null;
         CallableStatement stmt = null;
         boolean success = false;
        try {
            conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en updateSupply.");
                 return false;
             }

            stmt = conn.prepareCall(storedProc);

            stmt.setInt(1, supply.getIdSupply());
            stmt.setString(2, supply.getName());
            stmt.setString(3, supply.getCategory());
            stmt.setDouble(4, supply.getStock());
            stmt.setDouble(5, supply.getStockMinimo());
            stmt.setString(6, supply.getUnitType());
            stmt.setDouble(7, supply.getPricePerUnit());
            stmt.setDate(8, supply.getExpirationDate() != null ? Date.valueOf(supply.getExpirationDate()) : null);
            stmt.setInt(9, supply.getSupplierId());

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

            if (success) {
                 LOG.log(Level.INFO, "Suministro actualizado exitosamente con ID: {0}", supply.getIdSupply());
            } else {
                 LOG.log(Level.WARNING, "SP sp_UpdateSupply ejecutado pero no afectó filas para ID: {0}. ¿Existe el suministro?", supply.getIdSupply());
            }

        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en updateSupply para ID: " + supply.getIdSupply(), e);
            return false; // Fallo por excepción
        }
        return success;
    }

    /**
     * Elimina un suministro usando un Stored Procedure.
     * @param idSupply ID del suministro a eliminar.
     * @return true si la eliminación afectó al menos una fila, false en caso contrario.
     */
    public boolean deleteSupply(int idSupply) {
        String storedProc = "{CALL sp_DeleteSupply(?)}";
        Connection conn = null;
        CallableStatement stmt = null;
        boolean success = false;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en deleteSupply.");
                 return false;
             }

            stmt = conn.prepareCall(storedProc);
            stmt.setInt(1, idSupply);

            int rowsAffected = stmt.executeUpdate();
            success = (rowsAffected > 0);

             if (success) {
                 LOG.log(Level.INFO, "Suministro eliminado exitosamente con ID: {0}", idSupply);
            } else {
                 LOG.log(Level.WARNING, "SP sp_DeleteSupply ejecutado pero no afectó filas para ID: {0}. ¿Existe el suministro?", idSupply);
            }

        } catch (SQLException e) {
             LOG.log(Level.SEVERE, "Error SQL en deleteSupply para ID: " + idSupply, e);
            return false; // Fallo por excepción
        }
        return success;
    }

    /**
     * Obtiene todos los suministros usando un Stored Procedure.
     * @return Lista de objetos Supply. Puede estar vacía si no hay suministros o si ocurre un error.
     */
    public List<Supply> getAllSupplies() {
        String storedProc = "{CALL sp_GetAllSupplies()}";
        List<Supply> supplies = new ArrayList<>();
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
             if (conn == null) {
                 LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getAllSupplies.");
                 return supplies; // Devuelve lista vacía
             }

            stmt = conn.prepareCall(storedProc);
            rs = stmt.executeQuery();
            while(rs.next()){
                supplies.add(mapResultSetToSupply(rs));
            }
             LOG.log(Level.INFO, "Obtenidos {0} suministros.", supplies.size());
        } catch (SQLException e) {
            LOG.log(Level.SEVERE, "Error SQL en getAllSupplies", e);
            // Devuelve la lista parcialmente llena o vacía en caso de error
        }
         return supplies;
    }

    /**
     * Obtiene suministros filtrados usando un Stored Procedure.
     * Maneja parámetros nulos/vacíos adecuadamente pasándolos como NULL al SP.
     * @param searchTerm Término de búsqueda (puede ser null o vacío).
     * @param category Categoría (puede ser null o vacía).
     * @param supplierId ID del proveedor (puede ser null).
     * @return Lista de objetos Supply filtrados.
     */
    public List<Supply> getFilteredSupplies(String searchTerm, String category, Integer supplierId) {
        String storedProc = "{CALL sp_GetFilteredSupplies(?, ?, ?)}"; // Ajustar si el SP es diferente
        List<Supply> supplies = new ArrayList<>();
        Connection conn = null;
        CallableStatement stmt = null;
        ResultSet rs = null;
        try {
             conn = DBConnection.getConnection();
             if (conn == null) {
                  LOG.log(Level.SEVERE, "No se pudo obtener conexión a la BD en getFilteredSupplies.");
                 return supplies; // Devuelve lista vacía
             }

            stmt = conn.prepareCall(storedProc);

            // Pasar NULL si el parámetro es nulo o vacío
            if (searchTerm != null 

----- FIN DE deibis.txt -----


----- FIN DE java\deibis.txt -----


----- FIN DE resources\application.properties -----

:root {
  --bg: #f8f9fa;
  --text: #333;
  --white: #fff;
  --black-08: rgba(0, 0, 0, 0.08);
  --black-10: rgba(0, 0, 0, 0.1);
  --white-10: rgba(255, 255, 255, 0.1);
  --white-50: rgba(255, 255, 255, 0.5);
  --white-70: rgba(255, 255, 255, 0.7);
  --black-20: rgba(0, 0, 0, 0.2);
  --gray-light: #e0e0e0;
  --title: #1a5a1d;
  --subtitle: #6c757d;
  --sidebar-bg: #2a7d2e;
  --sidebar-bg-alt: #1e6023;
  --primary: #2a7d2e;
  --primary-hover: #236b27;
  --secondary: #2a7d2e;
  --warning: #ff9800;
  --warning-hover: #fb8c00;
  --danger: #f44336;
  --danger-hover: #d32f2f;
  --increase: #4caf50;
  --increase-hover: #43a047;
  --black-03: rgba(0, 0, 0, 0.03);
  --black-06: rgba(0, 0, 0, 0.06);
  --border-lighter: #eaeaea;
  --border-light: #ddd;
  --label-text: #495057;
  --input-bg: #f9f9f9;
  --primary-shadow: rgba(42, 125, 46, 0.15);
  --success-light: #e8f5e9;
  --success-text: #2e7d2e;
  --warning-light-alt: #fff8e1;
  --warning-text-alt: #ff8f00;
  --gray-lightest: #eee;
  --gray-silver: #f1f1f1;
  --gray-lighter-alt: #eeeeee;
  --info: #2196f3;
  --info-hover: #1976d2;
  --yellow: #ffc107;
}

/* RESET Y TIPOGRAFÍA */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Poppins', 'Segoe UI', sans-serif;
  display: flex;
  background-color: var(--bg);
  color: var(--text);
  line-height: 1.6;
}

/* BARRA LATERAL */
.sidebar {
  width: 260px;
  background-color: var(--sidebar-bg);
  background-image: linear-gradient(to bottom, var(--sidebar-bg), var(--sidebar-bg-alt));
  color: var(--white);
  height: 100vh;
  position: fixed;
  overflow-y: auto;
  box-shadow: 0 0 10px var(--black-08);
  z-index: 100;
}

.sidebar-header {
  padding: 30px 30px;
  text-align: left;
  border-bottom: 1px solid var(--white-10);
  background-color: var(--black-10);
}

.sidebar-header h1 {
  font-size: 32px;
  margin-bottom: 5px;
  font-weight: 600;
  letter-spacing: 1px;
}

.sidebar-header p {
  font-size: 14px;
  opacity: 0.9;
  font-weight: 300;
  margin: 0;
  text-align: left;
  width: auto;
}

.sidebar-section {
  margin-top: 20px;
}

.sidebar-section-title {
  padding: 10px 25px;
  font-size: 12px;
  text-transform: uppercase;
  letter-spacing: 1.5px;
  color: var(--white-70);
  font-weight: 500;
}

.sidebar-menu a {
  display: flex;
  align-items: center;
  padding: 14px 25px;
  color: var(--white);
  text-decoration: none;
  transition: all 0.3s ease;
  border-left: 4px solid transparent;
}

.sidebar-menu a:hover {
  background-color: var(--white-10);
  border-left: 4px solid var(--white-50);
}

.sidebar-menu a.active {
  background-color: var(--black-20);
  border-left: 4px solid var(--white);
}

.sidebar-menu .icon {
  margin-right: 12px;
  font-size: 20px;
}

/* CONTENIDO PRINCIPAL */
.main-content {
  margin-left: 260px;
  flex: 1;
  padding: 30px 40px;
  overflow-y: auto;
  min-height: 100vh;
  background-color: var(--bg);
  animation: fadeIn 0.5s ease;
}

/* Cabecera de página */
.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 15px;
  margin-bottom: 30px;
  padding-bottom: 15px;
  border-bottom: 1px solid var(--gray-light);
}

.page-title {
  color: var(--title);
  font-size: 28px;
  font-weight: 600;
}

.page-subtitle {
  color: var(--subtitle);
  margin-top: 5px;
  font-size: 16px;
}

/* BOTONES GENERALES */
.btn {
  padding: 12px 24px;
  border-radius: 8px;
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  border: none;
  outline: none;
  text-decoration: none;
  box-shadow: 0 1px 3px var(--black-08);
}

.detail-actions .btn {
  display: inline-flex !important;
  align-items: center;
  justify-content: center;
  padding: 12px 24px !important;
  height: auto;
  box-sizing: border-box;
}

.btn .icon {
  margin-right: 10px;
  font-size: 18px;
}

.btn-primary {
  background-color: var(--primary);
  color: var(--white);
}

.btn-primary:hover {
  background-color: var(--primary-hover);
  transform: translateY(-1px);
  box-shadow: 0 2px 5px var(--black-10);
}

.btn-secondary {
  background-color: var(--white);
  color: var(--secondary);
  border: 2px solid var(--secondary) !important;
}

.btn-secondary:hover {
  background-color: var(--secondary) !important;
  color: var(--white) !important;
  border-color: var(--secondary) !important;
  transform: translateY(-1px);
  box-shadow: 0 2px 5px var(--black-10) !important;
}

.btn-warning {
  background-color: var(--warning);
  color: var(--white);
}

.btn-warning:hover {
  background-color: var(--warning-hover);
  transform: translateY(-1px);
  box-shadow: 0 2px 5px var(--black-10);
}

.btn-danger {
  background-color: var(--danger);
  color: var(--white);
  padding: 12px 24px;
  border: none;
}

.btn-danger:hover {
  background-color: var(--danger-hover);
  transform: translateY(-1px);
  box-shadow: 0 2px 5px var(--black-10);
}

.increase-btn {
  background-color: var(--increase);
  color: var(--white);
}

.increase-btn:hover {
  background-color: var(--increase-hover);
}

/* FORMULARIOS */
.form-container {
  background-color: var(--white);
  border-radius: 12px;
  padding: 35px;
  box-shadow: 0 2px 8px var(--black-03);
  max-width: 800px;
  margin: 0 auto;
  border: 1px solid var(--border-lighter);
  animation: fadeIn 0.5s ease;
}

.form-group {
  margin-bottom: 25px;
}

.form-label {
  display: block;
  margin-bottom: 10px;
  font-weight: 500;
  color: var(--label-text);
  font-size: 16px;
}

.form-input,
.form-select {
  width: 100%;
  padding: 12px 15px;
  border: 1px solid var(--border-light);
  border-radius: 8px;
  font-size: 15px;
  transition: all 0.3s;
  background-color: var(--input-bg);
}

.form-input:focus,
.form-select:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px var(--primary-shadow);
  background-color: var(--white);
}

.form-info {
  font-size: 13px;
  color: var(--subtitle);
  margin-top: 5px;
  font-style: italic;
}

.form-actions {
  display: flex;
  justify-content: center;
  gap: 15px;
  margin-top: 40px;
}

/* DASHBOARD / TARJETAS */
.dashboard {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 25px;
  margin-top: 30px;
}

.dashboard-card {
  background-color: var(--white);
  border-radius: 12px;
  padding: 30px;
  box-shadow: 0 2px 8px var(--black-03);
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  transition: all 0.3s ease;
  border: 1px solid var(--border-lighter);
  height: 100%;
  animation: fadeIn 0.5s ease;
}

.dashboard-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 4px 10px var(--black-06);
  border-color: var(--primary);
}

.dashboard-card-icon {
  width: 70px;
  height: 70px;
  background-color: var(--success-light);
  color: var(--primary);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
  transition: all 0.3s ease;
}

.dashboard-card:hover .dashboard-card-icon {
  background-color: var(--primary);
  color: var(--white);
  transform: scale(1.05);
}

.dashboard-card-title {
  font-size: 20px;
  font-weight: 600;
  color: var(--text);
  margin-bottom: 15px;
}

.dashboard-card-description {
  color: var(--subtitle);
  margin-bottom: 25px;
  line-height: 1.6;
}

.dashboard-card-action {
  margin-top: auto;
  text-decoration: none;
  color: var(--primary);
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  padding: 8px 16px;
  border-radius: 20px;
  transition: all 0.3s ease;
}

.dashboard-card-action:hover {
  background-color: var(--success-light);
}

.dashboard-card-action .icon {
  margin-left: 8px;
  transition: transform 0.3s ease;
}

.dashboard-card-action:hover .icon {
  transform: translateX(4px);
}

/* VISTA DETALLADA */
.detail-container {
  background-color: var(--white);
  border-radius: 12px;
  padding: 35px;
  box-shadow: 0 2px 8px var(--black-03);
  max-width: 800px;
  margin: 0 auto;
  border: 1px solid var(--border-lighter);
  animation: fadeIn 0.5s ease;
}

.detail-header {
  display: flex;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 15px;
  border-bottom: 1px solid var(--border-lighter);
}

.detail-icon {
  width: 60px;
  height: 60px;
  background-color: var(--success-light);
  color: var(--primary);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 20px;
}

.detail-icon .material-symbols-outlined {
  font-size: 28px;
}

.detail-title {
  font-size: 24px;
  color: var(--text);
  font-weight: 600;
}

.detail-table {
  width: 100%;
  border-collapse: collapse;
}

.detail-table td {
  padding: 16px 10px;
  font-size: 16px;
}

.detail-table td:first-child {
  font-weight: 500;
  color: var(--label-text);
  width: 40%;
}

.detail-table td:last-child {
  color: var(--text);
}

.detail-actions {
  margin-top: 30px;
  display: flex;
  gap: 15px;
  justify-content: flex-start;
}

/* TABLAS */
.table-container {
  background-color: var(--white);
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px var(--black-03);
  border: 1px solid var(--border-lighter);
  margin-bottom: 30px;
  animation: fadeIn 0.5s ease;
}

.table-responsive {
  overflow-x: auto;
  width: 100%;
}

.table-responsive table {
  width: 100%;
  border-collapse: collapse;
  font-size: 14px;
  min-width: 800px;
}

.table-responsive thead th {
  background-color: var(--primary);
  color: var(--white);
  text-align: left;
  padding: 16px;
  font-weight: 500;
  position: sticky;
  top: 0;
  white-space: nowrap;
}

.table-responsive thead th:first-child {
  border-top-left-radius: 8px;
}

.table-responsive thead th:last-child {
  border-top-right-radius: 8px;
}

.table-responsive tbody tr {
  transition: all 0.2s;
}

.table-responsive tbody tr:hover {
  background-color: var(--gray-silver);
}

.table-responsive tbody tr:nth-child(even) {
  background-color: var(--input-bg);
}

.table-responsive tbody tr:nth-child(even):hover {
  background-color: var(--gray-lighter-alt);
}

.table-responsive td {
  padding: 14px 16px;
  vertical-align: middle;
  border-bottom: 1px solid var(--gray-lightest);
}

.table-responsive tbody tr:last-child td {
  border-bottom: none;
}

/* ESTADO DE STOCK */
.status {
  display: inline-block;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 13px;
  font-weight: 500;
  white-space: nowrap;
}

.status-optimo {
  background-color: var(--success-light);
  color: #2e7d32;
}

.status-bajo {
  background-color: var(--warning-light-alt);
  color: var(--warning-text-alt);
}

/* FILTROS */
.filter-section {
  background-color: var(--white);
  border-radius: 12px;
  padding: 25px;
  margin-bottom: 25px;
  border: 1px solid var(--border-lighter);
  box-shadow: 0 2px 8px var(--black-03);
}

.filter-row {
  display: flex;
  gap: 20px;
  align-items: flex-end;
  flex-wrap: wrap;
}

.filter-group {
  flex: 1 1 200px;
}

.filter-label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--label-text);
  font-size: 15px;
}

.filter-input {
  width: 100%;
  padding: 12px 15px;
  border: 1px solid var(--border-light);
  border-radius: 8px;
  font-size: 15px;
  background-color: var(--input-bg);
  transition: all 0.3s;
}

.filter-input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 2px var(--primary-shadow);
}

.filter-buttons {
  display: flex;
  gap: 10px;
  margin-left: auto;
  padding-top: 25px;
}

/* BOTONES DE ACCIÓN (ICONOS) en la tabla */
.action-buttons {
  display: flex;
  gap: 8px;
  justify-content: flex-start;
}

.action-buttons .btns {
  width: 38px;
  height: 38px;
  text-decoration: none;
  padding: 0;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--white);
  transition: all 0.2s ease;
  cursor: pointer;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  border: none !important;
  outline: none !important;
  box-shadow: none !important;
}

.action-buttons .btns .icon {
  margin: 0;
  font-size: 20px;
}

.view-btns {
  background-color: var(--info);
}

.view-btns:hover {
  background-color: var(--info-hover);
}

.edit-btns {
  background-color: var(--warning);
}

.edit-btns:hover {
  background-color: var(--warning-hover);
}

.delete-btns {
  background-color: var(--danger);
}

.delete-btns:hover {
  background-color: var(--danger-hover);
}

/* UNIFORMIZA BOTONES E ICONOS (SWEETALERT & FOCOS) */
.btn,
.btns {
  outline: none !important;
  box-shadow: none !important;
  border: none !important;
}

.btn-secondary {
  border: 1px solid var(--secondary) !important;
}

/* ANIMACIONES Y TRANSICIONES */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* ACCESIBILIDAD */
*:focus:not(.btn):not(.btns):not(.form-input):not(.form-select):not(.filter-input) {
  outline: 2px solid var(--primary);
  outline-offset: 2px;
}

/* RESPONSIVE */
@media (max-width: 1200px) {
  .main-content {
    margin-left: 260px;
  }
}

@media (max-width: 992px) {
  .sidebar {
    width: 240px;
  }
  .main-content {
    margin-left: 240px;
    padding: 20px 25px;
  }
  .dashboard {
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  }
  .filter-buttons {
    margin-left: 0;
  }
}

@media (max-width: 768px) {
  .sidebar {
    width: 220px;
  }
  .main-content {
    margin-left: 220px;
    padding: 15px 20px;
  }
  .page-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  .form-container,
  .detail-container {
    padding: 25px;
  }
  .dashboard {
    grid-template-columns: 1fr;
  }
  .filter-row {
    flex-direction: column;
    gap: 15px;
    align-items: stretch;
  }
  .filter-buttons {
    padding-top: 15px;
    width: 100%;
  }
  .filter-buttons .btn {
    flex-grow: 1;
  }
}

/* TEMA SWEETALERT AGROW */
.swal2-popup.swal2-agrow-popup {
  font-family: 'Poppins', sans-serif;
  border-radius: 12px;
  box-shadow: 0 4px 15px var(--black-10);
}

.swal2-title.swal2-agrow-title {
  color: var(--title);
  font-size: 22px;
}

.swal2-confirm.swal2-agrow-confirm,
.swal2-cancel.swal2-agrow-cancel {
  border: none !important;
  border-radius: 8px !important;
  padding: 12px 28px !important;
  font-weight: 500 !important;
  font-size: 15px !important;
  box-shadow: 0 1px 3px var(--black-10) !important;
  transition: background-color 0.2s ease, transform 0.2s ease !important;
}

.swal2-confirm.swal2-agrow-confirm {
  background-color: var(--primary) !important;
  color: var(--white) !important;
}

.swal2-confirm.swal2-agrow-confirm:hover {
  background-color: var(--primary-hover) !important;
  transform: translateY(-1px);
}

.swal2-cancel.swal2-agrow-cancel {
  background-color: var(--danger) !important;
  color: var(--white) !important;
}

.swal2-cancel.swal2-agrow-cancel:hover {
  background-color: var(--danger-hover) !important;
  transform: translateY(-1px);
}

.swal2-icon.swal2-warning {
  border-color: var(--yellow) !important;
  color: var(--yellow) !important;
}

.swal2-icon.swal2-error {
  border-color: var(--danger) !important;
  color: var(--danger) !important;
}

.swal2-icon.swal2-success {
  border-color: var(--increase) !important;
  color: var(--increase) !important;
}

.swal2-icon.swal2-success [class^="swal2-success-line"] {
  background-color: var(--increase) !important;
}

.swal2-icon.swal2-success .swal2-success-ring {
  border-color: rgba(76, 175, 80, 0.3) !important;
}

.sidebar-logo {
  display: block;
  width: 100px;
  height: auto;
  margin-bottom: 4px;
}

.dashboard-card {
  height: auto !important;
  max-height: 350px !important;
  overflow-y: auto;
}


.dashboard-card .icon {
  font-size: 30px;
}

.dashboard-card-title {
  margin: 4px 0;
  font-size: 1.2em;
}

.dashboard-card-description {
  margin: 4px 0;
}

----- FIN DE resources\static\css\common.css -----

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3021.52853 727"><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path d="M1458.55189,711V203.88888H1602.184V711Zm285.31-365.92177a57.50351,57.50351,0,0,0-23.69245-14.65633q-14.41011-4.87763-32.9787-4.88544-40.557,0-62.776,26.13712-22.23072,26.141-22.23072,72.55081l-10.25944-131.909q21.00546-44.94218,54.47076-70.3504,33.46333-25.3965,73.5318-25.40432,31.75149,0,57.39812,10.01517a125.48028,125.48028,0,0,1,44.70377,29.55694Z" style="fill:#fff"/><path d="M2045.08478,727q-104.55243,0-161.70822-57.89447-57.1597-57.89253-57.1597-162.92763v-82.566q0-104.06,57.1597-161.21968t161.70822-57.1597q104.5407,0,161.70822,57.1597,57.1597,57.15971,57.15971,161.21968v84.0316q0,104.55243-57.15971,161.95054Q2149.63329,727.00587,2045.08478,727Zm-.48854-128.97574q40.54528,0,63.02223-23.69636,22.46523-23.69051,22.47305-66.68437v-84.0316q0-42.50337-22.47305-65.95351-22.47694-23.45013-63.02223-23.45013-40.06457,0-62.28747,23.45013-22.23659,23.45015-22.23073,65.95351v84.0316q0,42.99582,22.23073,66.68437Q2004.53364,598.03012,2044.59624,598.02426Z" style="fill:#fff"/><path d="M2447.97732,710,2291.64309,202.88888h128.48719l89.89219,313.159,106.99124-313.159h79.1442l106.99124,313.159,89.89219-313.159h128.48719L2865.1943,710h-99.66307L2656.58581,379.25344,2547.64039,710Z" style="fill:#fff"/><path d="M1117.40817,320.48518h246.22641V459.23181q0,80.1291-32.24394,139.968-32.24392,59.8506-90.1345,92.8254Q1183.35776,724.9961,1105.19455,725q-78.66346,0-137.52331-31.02062-58.87743-31.02159-91.36173-87.45142-32.49015-56.42688-32.48625-131.66273V265.27965q0-80.11738,32.24393-139.72372,32.24394-59.59852,90.13451-92.57918Q1024.10008,0,1102.26329,0q64.48786,0,117.4969,26.3814a252.11535,252.11535,0,0,1,89.15741,73.77022q36.14838,47.39273,48.85445,110.89959H1213.16288q-10.75188-34.68274-42.74959-53.49562a132.37035,132.37035,0,0,0-68.15-18.809q-54.22843,0-86.96092,34.68666-32.73639,34.69448-32.73248,91.84636V474.86523q0,50.324,33.70957,80.85411,33.70956,30.53793,88.91509,30.534,54.22843,0,86.96092-32.97675,32.72466-32.97675,32.73248-92.09064V449.46092H1117.40817Z" style="fill:#fff"/><path d="M367.08861,595.86174c0-31.24059-1.23234-60.21109.51312-89.0347.89042-14.70467,15.0142-21.59893,29.42488-26.81222,18.8281-6.81146,38.41659-12.797,55.617-22.21082,39.38487-21.55568,61.58758-54.07155,66.96875-95.57049,2.28126-17.59305.30057-19.36907-18.91487-18.85164-62.80176,1.691-111.38458,38.14718-133.3389,102.03511,0-29.39449-.32877-56.14364.374-82.8707.09913-3.76943,4.94776-7.64217,8.08159-11.11047,48.58637-53.7721,41.82626-131.77729-15.10577-178.22025-7.53581-6.14755-12.531-6.63758-20.46416-.39921-58.28064,45.83033-65.71852,122.85436-17.46148,177.71893a40.40648,40.40648,0,0,1,9.2892,23.20023c1.23365,22.42771.432,44.94683.432,66.55665-6.54135-12.01783-12.38728-25.59513-20.81234-37.70834C285.763,365.30531,248.03241,345.78,199.13525,343.10267c-14.86643-.81393-18.26592,4.272-17.235,16.51214,3.9794,47.24753,30.56243,81.09232,75.35053,103.62881,14.53544,7.31388,30.76821,11.95678,46.42235,17.3534,20.25362,6.98213,28.89916,17.75563,28.88679,37.3668-.01358,21.64414-.49585,43.29469-.03081,64.92938.2048,9.52883-3.561,13.36994-14.18282,12.98406-13.23164-.48084-26.50565.09815-39.75577-.09614-27.46771-.40291-46.55774,10.36772-57.42083,33.46971-8.9484,19.03032-19.16363,37.57509-28.07684,56.61807-7.278,15.54912-20.14679,22.60412-38.158,22.664-42.8198.14235-85.64181.25636-128.46026.0054C3.15581,708.40168-5.00169,697.05071,2.96933,676.504q78.753-202.99944,157.587-405.97314,37.84044-97.58976,75.37639-195.27614c10.75686-27.83056,20.27891-33.98157,52.61621-34.02087q60.40753-.07349,120.8152.0285c25.76692.0366,36.0565,6.42027,44.68692,27.91835Q575.28644,371.17445,696.43279,673.19753c9.58721,23.90428.8879,35.208-27.33885,35.33334-41.29022.183-82.58306-.09934-123.873.11148-21.0976.10777-35.85048-7.349-44.05814-25.67836-8.39075-18.73839-18.335-36.904-27.28807-55.44306-10.31436-21.35793-28.209-31.81-53.916-31.67572C403.20434,595.93258,386.44892,595.86174,367.08861,595.86174Z" style="fill:#e7aa4d"/></g></g></svg>

----- FIN DE resources\static\img\logo.svg -----

document.addEventListener('DOMContentLoaded', () => {
  
  const swalAgrow = Swal.mixin({
    customClass: {
      popup: 'swal2-agrow-popup',
      title: 'swal2-agrow-title',
      confirmButton: 'swal2-agrow-confirm',
      cancelButton: 'swal2-agrow-cancel'
    },
    buttonsStyling: true 
  });

  
  if (window.flatpickr) {
    flatpickr('.date-picker', {
      dateFormat: 'd/m/Y', 
      allowInput: true 
    });
  }

  
  const formatColones = val => {
    
    if (isNaN(parseFloat(val))) {
        return '₡ 0.00'; 
    }
    return new Intl.NumberFormat('es-CR', {
      style: 'currency',
      currency: 'CRC',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(parseFloat(val));
  }


  
  function formatPrices() {
    document.querySelectorAll('.price-display').forEach(el => {
      const value = el.dataset.value; 
      el.textContent = formatColones(value);
    });
  }

  
  function attachConfirmHandlers() {
    document.querySelectorAll('.confirm-action').forEach(el => {
      
      if (el.dataset.confirmHandlerAttached) return;
      el.dataset.confirmHandlerAttached = 'true'; 

      const message = el.dataset.message || '¿Estás seguro de realizar esta acción?';
      const title = el.dataset.title || 'Confirmar Acción';
      const confirmText = el.dataset.confirmText || 'Sí, continuar';
      const cancelText = el.dataset.cancelText || 'Cancelar';
      const icon = el.dataset.icon || 'warning'; 

      if (el.tagName === 'FORM') {
        el.addEventListener('submit', function(event) { 
          event.preventDefault(); 
          const form = this; 

          swalAgrow.fire({
            title: title,
            text: message,
            icon: icon,
            showCancelButton: true,
            confirmButtonText: confirmText,
            cancelButtonText: cancelText,
          }).then((result) => {
            if (result.isConfirmed) {
              form.submit(); 
            }
          });
        });
      } else if (el.tagName === 'A') {
        el.addEventListener('click', function(event) { 
          event.preventDefault(); 
          const link = this; 
          const href = link.getAttribute('href');

          swalAgrow.fire({
            title: title,
            text: message,
            icon: icon,
            showCancelButton: true,
            confirmButtonText: confirmText,
            cancelButtonText: cancelText,
          }).then((result) => {
            if (result.isConfirmed) {
              window.location.href = href; 
            }
          });
        });
      }
    });
  }

  
  const filterForm = document.getElementById('filter-form-supply'); 
  const supplyListContent = document.getElementById('supply-list-content'); 

  if (filterForm && supplyListContent) {
    filterForm.addEventListener('submit', e => {
      e.preventDefault(); 

      
      supplyListContent.style.opacity = '0.5';
      

      const url = filterForm.action + '?' + new URLSearchParams(new FormData(filterForm)).toString();

      fetch(url, {
          method: 'GET', 
          headers: { 
              'X-Requested-With': 'XMLHttpRequest' 
          }
      })
      .then(response => {
          if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.text(); 
      })
      .then(html => {
          
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          
          const newContent = doc.getElementById('supply-list-content'); 

          if (newContent) {
              
              supplyListContent.innerHTML = newContent.innerHTML;
          } else {
               
               
               const newTableContainer = doc.getElementById('table-container');
               if (newTableContainer) {
                    
                    const currentTableContainer = document.getElementById('table-container');
                    if(currentTableContainer) currentTableContainer.innerHTML = newTableContainer.innerHTML;
               } else {
                   console.error('Contenedor #supply-list-content o #table-container no encontrado en la respuesta AJAX.');
                   
                   supplyListContent.innerHTML = '<p style="color: red;">Error al actualizar la lista.</p>';
               }
          }

          
          formatPrices();
          attachConfirmHandlers(); 

      })
      .catch(error => {
          console.error('Error en la petición fetch:', error);
          supplyListContent.innerHTML = '<p style="color: red;">Error al cargar los filtros. Intente de nuevo.</p>';
          
          swalAgrow.fire('Error', 'No se pudo actualizar la lista de suministros.', 'error');
      })
      .finally(() => {
          
          supplyListContent.style.opacity = '1';
          
      });
    });
  }
  


  
  const swalMsgElement = document.getElementById('swal-message');
  if (swalMsgElement) {
    const message = swalMsgElement.dataset.mensaje;
    const error = swalMsgElement.dataset.error;

    if (message) {
      swalAgrow.fire({
        title: '¡Éxito!',
        text: message,
        icon: 'success'
      });
    }
    if (error) {
      swalAgrow.fire({
        title: 'Error',
        text: error,
        icon: 'error'
      });
    }
    
    
    
    
  }

  
  formatPrices();
  attachConfirmHandlers();

  const dropdownToggles = document.querySelectorAll('.sidebar-dropdown-toggle');

  dropdownToggles.forEach(toggle => {
    toggle.addEventListener('click', function() {

      this.classList.toggle('active-dropdown');

      const submenu = this.nextElementSibling;

      if (submenu && submenu.classList.contains('sidebar-submenu')) {
         submenu.classList.toggle('open');
      }
    });
  });

  const activeSection = document.querySelector('.sidebar-dropdown.active-section');
  if (activeSection) {
    const activeToggle = activeSection.querySelector('.sidebar-dropdown-toggle');
    const activeSubmenu = activeSection.querySelector('.sidebar-submenu');
    if(activeToggle && activeSubmenu){
        activeToggle.classList.add('active-dropdown'); 
        activeSubmenu.classList.add('open'); 
    }
  }

});


----- FIN DE resources\static\js\app.js -----


<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Editar Suministro - Agrow</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>

        <div class="main-content">
            <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

            <form method="post"
                  th:action="@{/supplies/update}"
                  th:object="${supply}"
                  class="form-container confirm-action"
                  data-message="¿Actualizar los datos de este suministro?"
                  th:if="${supply != null}">

                <input type="hidden" name="idSupply" th:value="*{idSupply}" />

                <div class="page-header">
                    <h1 class="page-title">Editar Suministro: <span th:text="*{name}"></span></h1>
                </div>

                 <div class="form-group">
                    <label class="form-label" for="name">Nombre:</label>
                    <input class="form-input" type="text" id="name" th:field="*{name}" maxlength="100"
                           placeholder="Ej: Semillas de maíz H-5G"
                           title="Ingrese el nombre descriptivo del suministro" required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="category">Categoría:</label>
                    <select class="form-select" id="category" th:field="*{category}"
                            title="Seleccione la categoría del suministro" required>
                        <option value="" disabled>Seleccione una categoría</option>
                        <option value="Semillas">Semillas</option>
                        <option value="Fertilizantes">Fertilizantes</option>
                        <option value="Plaguicidas">Plaguicidas</option>
                        <option value="Herramientas">Herramientas</option>
                        <option value="Accesorios de riego">Accesorios de riego</option>
                        <option value="Insumos orgánicos">Insumos orgánicos</option>
                        <option value="Otros">Otros</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="stock">Stock Actual:</label>
                    <input class="form-input" type="number" id="stock" th:field="*{stock}" step="0.01" min="0" max="99999999.99"
                           placeholder="Ej: 100.00" title="Cantidad actual en inventario" required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="stockMinimo">Stock Mínimo:</label>
                    <input class="form-input" type="number" id="stockMinimo" th:field="*{stockMinimo}" step="0.01" min="0" max="99999999.99"
                           placeholder="Ej: 10.00" title="Nivel mínimo antes de considerar reordenar" required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="unitType">Unidad de Medida:</label>
                    <select class="form-select" id="unitType" th:field="*{unitType}"
                            title="Seleccione cómo se mide este suministro" required>
                        <option value="" disabled>Seleccione una unidad</option>
                        <option value="Unidad">Unidad</option>
                        <option value="Pieza">Pieza</option>
                        <option value="Paquete">Paquete</option>
                        <option value="Saco">Saco</option>
                        <option value="Caja">Caja</option>
                        <option value="Litro">Litro (L)</option>
                        <option value="Kilogramo">Kilogramo (Kg)</option>
                        <option value="Metro">Metro (m)</option>
                        <option value="Rollo">Rollo</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="pricePerUnit">Precio por Unidad (CRC):</label>
                    <input class="form-input" type="number" id="pricePerUnit" th:field="*{pricePerUnit}" step="0.01" min="0.01" max="99999999.99"
                           placeholder="Ej: 750.50" title="Costo por cada unidad de medida (mayor que cero)" required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="expirationDate">Fecha de Vencimiento:</label>
                    <input type="text" id="expirationDate" name="expirationDate" class="form-input date-picker"
                           th:value="*{getFormattedExpirationDate()}"
                           placeholder="dd/mm/aaaa (Ej: 15/10/2025)"
                           title="Fecha de caducidad, obligatoria, no pasada" required />
                </div>


                <div class="form-group">
                    <label class="form-label" for="supplierId">Proveedor:</label>
                    <select class="form-select" id="supplierId" th:field="*{supplierId}"
                            title="Seleccione el proveedor de este suministro" required>
                        <option value="" disabled>Seleccione un proveedor...</option>
                         <option th:each="supplierOpt : ${suppliers}"
                                 th:value="${supplierOpt.supplierIdentification}"
                                 th:text="${supplierOpt.companyName + ' (' + supplierOpt.supplierIdentification + ')'}">

                         </option>
                    </select>
                     <p class="form-info">(Si el proveedor no está en la lista, debe registrarlo primero)</p>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <span class="material-symbols-outlined icon">save</span> Actualizar Suministro
                    </button>
                    <a th:href="@{/supplies/list}" class="btn btn-secondary">
                        <span class="material-symbols-outlined icon">cancel</span> Cancelar
                    </a>
                </div>
            </form>

            <div th:if="${supply == null}" class="dashboard-card" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning);">
                <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">warning</span>
                <h2 class="dashboard-card-title">Suministro no encontrado</h2>
                <p class="dashboard-card-description">El suministro que intenta editar no existe.</p>
                <a th:href="@{/supplies/list}" class="btn btn-secondary" style="margin-top: 15px;">
                    <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
                </a>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                 flatpickr(".date-picker", {
                    dateFormat: "d/m/Y",
                    allowInput: true,
                    minDate: "today"
                });
            });
        </script>
    </body>
</html>

----- FIN DE resources\templates\edit_supply.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Agregar Suministro - Agrow</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>

        <div class="main-content">
            <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

            <form method="post"
                  th:action="@{/supplies/save}"
                  th:object="${supply}"
                  class="form-container confirm-action"
                  data-message="¿Guardar este nuevo suministro?">

                <div class="page-header">
                    <h1 class="page-title">Agregar Nuevo Suministro</h1>
                </div>

                <div class="form-group">
                    <label class="form-label" for="name">Nombre:</label>
                    <input class="form-input" type="text" id="name" name="name" th:field="*{name}" maxlength="100"
                           placeholder="Ej: Semillas de maíz H-5G"
                           title="Ingrese el nombre descriptivo del suministro"
                           required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="category">Categoría:</label>
                    <select class="form-select" id="category" name="category" th:field="*{category}"
                            title="Seleccione la categoría del suministro" required>
                        <option value="" disabled selected>Seleccione una categoría</option>
                        <option value="Semillas">Semillas</option>
                        <option value="Fertilizantes">Fertilizantes</option>
                        <option value="Plaguicidas">Plaguicidas</option>
                        <option value="Herramientas">Herramientas</option>
                        <option value="Accesorios de riego">Accesorios de riego</option>
                        <option value="Insumos orgánicos">Insumos orgánicos</option>
                        <option value="Otros">Otros</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="stock">Stock Inicial:</label>
                    <input class="form-input" type="number" id="stock" name="stock" th:field="*{stock}"
                           step="0.01" min="0" max="99999999.99"
                           placeholder="Ej: 100.00"
                           title="Cantidad inicial en inventario"
                           required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="stockMinimo">Stock Mínimo:</label>
                    <input class="form-input" type="number" id="stockMinimo" name="stockMinimo" th:field="*{stockMinimo}"
                           step="0.01" min="0" max="99999999.99"
                           placeholder="Ej: 10.00"
                           title="Nivel mínimo antes de considerar reordenar"
                           required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="unitType">Unidad de Medida:</label>
                    <select class="form-select" id="unitType" name="unitType" th:field="*{unitType}"
                            title="Seleccione cómo se mide este suministro"
                            required>
                        <option value="" disabled selected>Seleccione una unidad</option>
                        <option value="Unidad">Unidad</option>
                        <option value="Pieza">Pieza</option>
                        <option value="Paquete">Paquete</option>
                        <option value="Saco">Saco</option>
                        <option value="Caja">Caja</option>
                        <option value="Litro">Litro (L)</option>
                        <option value="Kilogramo">Kilogramo (Kg)</option>
                        <option value="Metro">Metro (m)</option>
                        <option value="Rollo">Rollo</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="pricePerUnit">Precio por Unidad (CRC):</label>
                    <input class="form-input" type="number" id="pricePerUnit" name="pricePerUnit" th:field="*{pricePerUnit}"
                           step="0.01" min="0.01" max="99999999.99"
                           placeholder="Ej: 750.50"
                           title="Costo por cada unidad de medida (mayor que cero)"
                           required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="expirationDate">Fecha de Vencimiento:</label>
                    <input type="text" id="expirationDate" name="expirationDate"
                           class="form-input date-picker"
                           th:value="${expirationDateStr}"
                           placeholder="dd/mm/aaaa (Ej: 15/10/2025)"
                           title="Fecha de caducidad del producto (Obligatoria, no pasada)"
                           required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="supplierId">Proveedor:</label>
                     <select class="form-select" id="supplierId" name="supplierId" th:field="*{supplierId}"
                             title="Seleccione el proveedor de este suministro" required>
                         <option value="" disabled selected>Seleccione un proveedor...</option>
                         <option th:each="supplierOpt : ${suppliers}"
                                 th:value="${supplierOpt.supplierIdentification}"
                                 th:text="${supplierOpt.companyName + ' (' + supplierOpt.supplierIdentification + ')'}">
                         </option>
                     </select>
                     <p class="form-info">(Si el proveedor no está en la lista, debe registrarlo primero)</p>
                </div>


                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <span class="material-symbols-outlined icon">save</span> Guardar Suministro
                    </button>
                    <a th:href="@{/supplies/list}" class="btn btn-secondary">
                        <span class="material-symbols-outlined icon">cancel</span> Cancelar
                    </a>
                </div>
            </form>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                 flatpickr(".date-picker", {
                    dateFormat: "d/m/Y",
                    allowInput: true,
                    minDate: "today"
                });
            });
        </script>
    </body>
</html>

----- FIN DE resources\templates\form_supply.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
<body>

<div th:fragment="sidebar" class="sidebar">

    <div class="sidebar-header">
        <img th:src="@{/img/logo.svg}" alt="Agrow Logo" class="sidebar-logo" title="Logo de la empresa Agrow" />
        <p>Crecimiento Agrícola</p>
    </div>

    <!-- Sección Principal -->
    <div class="sidebar-section">
        <div class="sidebar-section-title">PRINCIPAL</div>
        <div class="sidebar-menu">
            <a th:href="@{/home}" th:classappend="${activeModule == 'home'} ? ' active' : ''">
                <span class="material-symbols-outlined icon">home</span>
                Inicio
            </a>
        </div>
    </div>

    <!-- Sección de Gestión -->
    <div class="sidebar-section">
        <div class="sidebar-section-title">GESTIÓN</div>
        <div class="sidebar-menu">
            <!-- Enlace Suministros -->
            <a th:href="@{/supplies/list}" th:classappend="${activeModule == 'supply'} ? ' active' : ''">
                <span class="material-symbols-outlined icon">inventory_2</span>
                Gest de Suministros
            </a>
            <!-- Enlace Productores -->
            <a th:href="@{/producers/list}" th:classappend="${activeModule == 'producer'} ? ' active' : ''">
                <span class="material-symbols-outlined icon">agriculture</span>
                Gest de Productores
            </a>
            <!-- Enlace Proveedores -->
            <a th:href="@{/suppliers/list}" th:classappend="${activeModule == 'supplier'} ? ' active' : ''">
                <span class="material-symbols-outlined icon">local_shipping</span>
                Gest de Proveedores
            </a>
        </div>
    </div>

</div>
</body>
</html>

----- FIN DE resources\templates\fragments\sidebar.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Agrow - Inicio</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
        <link rel="stylesheet" th:href="@{/css/common.css}" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>

        <div class="main-content">

            <div id="swal-message"
                 th:data-mensaje="${mensaje}"
                 th:data-error="${error}">
            </div>

            <div class="page-header">
                <div>
                    <h1 class="page-title">Bienvenido a Agrow</h1>
                    <p class="page-subtitle">Sistema Integrado de Gestión Agrícola.</p>
                </div>
            </div>

            <div class="dashboard">

                <div class="dashboard-card">
                    <div class="dashboard-card-icon">
                        <span class="material-symbols-outlined icon">inventory_2</span>
                    </div>
                    <h2 class="dashboard-card-title">Gestión de Suministros</h2>
                    <p class="dashboard-card-description">
                        Administre el inventario de semillas, fertilizantes, herramientas y otros insumos agrícolas. Controle stock y fechas de vencimiento.
                    </p>
                    <a th:href="@{/supplies/list}" class="dashboard-card-action">
                        Ir a Suministros
                        <span class="material-symbols-outlined icon">arrow_forward</span>
                    </a>
                </div>

                <div class="dashboard-card">
                    <div class="dashboard-card-icon">
                        <span class="material-symbols-outlined icon">agriculture</span>
                    </div>
                    <h2 class="dashboard-card-title">Gestión de Productores</h2>
                    <p class="dashboard-card-description">
                        Mantenga un registro actualizado de los productores, su información de contacto, ubicación y estado.
                    </p>
                    <a th:href="@{/producers/list}" class="dashboard-card-action">
                        Ir a Productores
                        <span class="material-symbols-outlined icon">arrow_forward</span>
                    </a>
                </div>

                <div class="dashboard-card">
                    <div class="dashboard-card-icon">
                        <span class="material-symbols-outlined icon">local_shipping</span>
                    </div>
                    <h2 class="dashboard-card-title">Gestión de Proveedores</h2>
                    <p class="dashboard-card-description">
                        Registre y administre la información de sus proveedores, contactos, empresas y límites de crédito.
                    </p>
                    <a th:href="@{/suppliers/list}" class="dashboard-card-action">
                        Ir a Proveedores
                        <span class="material-symbols-outlined icon">arrow_forward</span>
                    </a>
                </div>

            </div>

        </div>

        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>
    </body>
</html>

----- FIN DE resources\templates\index.html -----


<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Información del Productor - Agrow</title>

        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>


        <div class="main-content">


            <div id="swal-message"
                 th:data-mensaje="${mensaje}"
                 th:data-error="${error}">
            </div>


            <div class="detail-container" th:if="${producer != null}" th:object="${producer}">
                <div class="detail-header">
                    <div class="detail-icon" style="background-color: var(--primary-light); color: var(--primary);"> 
                        <span class="material-symbols-outlined">agriculture</span>
                    </div>
                    <div>
                        <h2 class="page-title" th:text="*{producerName}">Nombre del Productor</h2>
                        <p class="page-subtitle" style="margin-top: -5px;">ID: <span th:text="*{id_producer}"></span></p>
                    </div>
                </div>
                <table class="detail-table">
                    <tr>
                        <td>ID Productor:</td>
                        <td th:text="*{id_producer}">12345</td>
                    </tr>
                    <tr>
                        <td>Nombre / Razón Social:</td>
                        <td th:text="*{producerName}">Nombre Productor</td>
                    </tr>
                    <tr>
                        <td>Tipo de Productor:</td>
                        <td th:text="*{producerType}">Persona/Empresa</td>
                    </tr>
                    <tr>
                        <td>Teléfono:</td>

                        <td th:text="*{contactNumber}">88888888</td>
                    </tr>
                    <tr>
                        <td>Correo Electrónico:</td>
                        <td th:text="*{email}">correo@ejemplo.com</td>
                    </tr>
                    <tr>
                        <td>Fecha de Registro:</td>

                        <td th:text="*{getFormattedRegistrationDate()}">dd/MM/yyyy</td>
                    </tr>
                    <tr>
                        <td>Provincia:</td>
                        <td th:text="*{city}">Ciudad</td>
                    </tr>
                    <tr>
                        <td>Dirección Detallada:</td>
                        <td th:text="*{address}">Dirección completa</td>
                    </tr>
                    <tr>
                        <td>Estado:</td>
                        <td>

                            <span class="status" th:classappend="*{isActive()} ? 'status-optimo' : 'status-bajo'"
                                  th:text="*{isActive()} ? 'Activo' : 'Inactivo'">Activo/Inactivo</span>
                        </td>
                    </tr>
                </table>


                <div class="detail-actions">

                    <a th:href="@{/producers/edit(id_producer=*{id_producer})}" class="btn btn-warning">
                        <span class="material-symbols-outlined icon">edit</span> Editar
                    </a>

                    <a th:href="@{/producers/list}" class="btn btn-secondary">
                        <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
                    </a>
                </div>
            </div>


            <div th:if="${producer == null}" class="dashboard-card" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning);">
                <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">person_off</span>
                <h2 class="dashboard-card-title">Productor no encontrado</h2>
                <p class="dashboard-card-description">El productor solicitado no existe o fue eliminado.</p>
                <a th:href="@{/producers/list}" class="btn btn-secondary" style="margin-top: 15px;">
                    <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
                </a>
            </div>

        </div> 


        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script> 
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>
    </body>
</html>

----- FIN DE resources\templates\information_producer.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Listado de Suministros - Agrow</title>
        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>

        <div class="main-content">
            <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

            <div class="page-header">
                <div>
                    <h1 class="page-title">Gestión de Suministros</h1>
                    <p class="page-subtitle">Visualiza, filtra y administra tus insumos. Total: <span th:text="${cantidad != null ? cantidad : 0}">0</span></p>
                </div>
                <a th:href="@{/supplies/form}" class="btn btn-primary">
                    <span class="material-symbols-outlined icon">add_box</span> Agregar Suministro
                </a>
            </div>

            <form id="filter-form-supply" th:action="@{/supplies/list}" method="get" class="filter-section">
                <div class="filter-row">
                    <div class="filter-group">
                        <label class="filter-label" for="searchTerm">Buscar por Nombre</label>
                        <input type="text" id="searchTerm" name="searchTerm" th:value="${searchTerm}" class="filter-input" placeholder="Ej: Semillas..." maxlength="100" />
                    </div>
                    <div class="filter-group">
                        <label class="filter-label" for="category">Categoría</label>
                        <select id="category" name="category" class="filter-input">
                            <option value="" th:selected="${selectedCategory == null or selectedCategory == ''}">Todas</option>
                            <option value="Semillas" th:selected="${#strings.equals(selectedCategory,'Semillas')}">Semillas</option>
                            <option value="Fertilizantes" th:selected="${#strings.equals(selectedCategory,'Fertilizantes')}">Fertilizantes</option>
                            <option value="Plaguicidas" th:selected="${#strings.equals(selectedCategory,'Plaguicidas')}">Plaguicidas</option>
                            <option value="Herramientas" th:selected="${#strings.equals(selectedCategory,'Herramientas')}">Herramientas</option>
                            <option value="Accesorios de riego" th:selected="${#strings.equals(selectedCategory,'Accesorios de riego')}">Accesorios de riego</option>
                            <option value="Insumos orgánicos" th:selected="${#strings.equals(selectedCategory,'Insumos orgánicos')}">Insumos orgánicos</option>
                            <option value="Otros" th:selected="${#strings.equals(selectedCategory,'Otros')}">Otros</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label" for="supplierId">Proveedor</label>
                        <select id="supplierId" name="supplierId" class="filter-input">
                             <option value="" th:selected="${selectedSupplierId == null}">Todos</option>
                             <option th:each="supplier : ${suppliers}"
                                     th:value="${supplier.supplierIdentification}"
                                     th:text="${supplier.companyName + ' (' + supplier.supplierIdentification + ')'}"
                                     th:selected="${selectedSupplierId != null and selectedSupplierId == supplier.supplierIdentification}">
                             </option>
                        </select>
                    </div>
                    <div class="filter-buttons">
                        <button type="submit" class="btn btn-primary">
                            <span class="material-symbols-outlined icon">search</span> Filtrar
                        </button>
                        <a th:href="@{/supplies/list}" class="btn btn-secondary">
                            <span class="material-symbols-outlined icon">refresh</span> Restablecer
                        </a>
                    </div>
                </div>
            </form>

            <div id="supply-list-content">
                <div class="dashboard-card" th:if="${supplies == null or supplies.isEmpty()}" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning); padding: 20px;">
                    <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">info</span>
                    <h2 class="dashboard-card-title" style="margin-top: 10px;" th:text="${(searchTerm != null or selectedCategory != null or selectedSupplierId != null) ? 'No se encontraron suministros con esos filtros.' : 'No hay suministros registrados.'}">No se encontraron suministros</h2>
                    <p class="dashboard-card-description">Intenta con otros filtros o <a th:href="@{/supplies/form}" style="color: var(--primary); font-weight: 500;">agrega nuevos suministros</a>.</p>
                </div>

                <div id="table-container" class="table-container" th:unless="${supplies == null or supplies.isEmpty()}">
                    <div class="table-responsive">
                        <table>
                            <thead>
                                <tr>
                                    <th>Nombre</th>
                                    <th>Categoría</th>
                                    <th>Stock</th>
                                    <th>Mínimo</th>
                                    <th>Estado</th>
                                    <th>Unidad</th>
                                    <th>Precio Unit.</th>
                                    <th>Vencimiento</th>
                                    <th>Proveedor</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr th:each="supply : ${supplies}">
                                    <td th:text="${supply.name}">Nombre Suministro</td>
                                    <td th:text="${supply.category}">Categoría</td>
                                    <td th:text="${#numbers.formatDecimal(supply.stock, 1, 2, 'POINT')}">0.00</td>
                                    <td th:text="${#numbers.formatDecimal(supply.stockMinimo, 1, 2, 'POINT')}">0.00</td>
                                    <td>
                                        <span class="status"
                                              th:classappend="${#strings.equalsIgnoreCase(supply.estado, 'Bajo')} ? ' status-bajo' : (${#strings.equalsIgnoreCase(supply.estado, 'Agotado')} ? ' status-danger' : ' status-optimo')"
                                              th:text="${supply.estado}">Estado Stock</span>
                                    </td>
                                    <td th:text="${supply.unitType}">Und</td>
                                    <td class="price-display" th:attr="data-value=${supply.pricePerUnit}" th:text="${#numbers.formatCurrency(supply.pricePerUnit)}">₡0.00</td>
                                    <td th:text="${supply.getFormattedExpirationDate()}">dd/MM/yyyy</td>
                                    <td th:text="${supply.getSupplierName()}">Proveedor</td>
                                    <td>
                                        <div class="action-buttons">
                                            <a th:href="@{/supplies/view(idSupply=${supply.idSupply})}" class="btns view-btns" title="Ver Detalles">
                                                <span class="material-symbols-outlined icon">visibility</span>
                                            </a>
                                            <a th:href="@{/supplies/edit(idSupply=${supply.idSupply})}" class="btns edit-btns" title="Editar">
                                                <span class="material-symbols-outlined icon">edit</span>
                                            </a>
                                            <form th:action="@{/supplies/delete}" method="post" class="confirm-action" data-message="¿Seguro que deseas eliminar este suministro?" style="margin:0; padding:0; display:inline;">
                                                <input type="hidden" name="idSupply" th:value="${supply.idSupply}" />
                                                <button type="submit" class="btns delete-btns" title="Eliminar">
                                                    <span class="material-symbols-outlined icon">delete</span>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div style="margin-top: 20px;">
                <a th:href="@{/home}" class="btn btn-secondary">
                    <span class="material-symbols-outlined icon">arrow_back</span> Volver a Inicio
                </a>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>
    </body>
</html>

----- FIN DE resources\templates\list_supply.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Listado de Productores - Agrow</title>

        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>


        <div class="main-content">


            <div id="swal-message"
                 th:data-mensaje="${mensaje}"
                 th:data-error="${error}">
            </div>


            <div class="page-header">
                <div>
                    <h1 class="page-title">Gestión de Productores</h1>
                    <p class="page-subtitle">Visualiza, filtra y administra los productores. Total: <span th:text="${listP != null ? listP.size() : 0}">0</span></p>
                </div>
                <a th:href="@{/producers/form}" class="btn btn-primary">
                    <span class="material-symbols-outlined icon">person_add</span> Agregar Productor
                </a>
            </div>


            <form id="filter-form-producer" th:action="@{/producers/list}" method="get" class="filter-section">
                <div class="filter-row">

                    <div class="filter-group">
                        <label class="filter-label" for="city">Filtrar por Ciudad</label>

                        <select name="city" id="city" class="filter-input">

                            <option value="" th:selected="${selectedCity == null or selectedCity == ''}">Todas las ciudades</option>
                            <option value="Alajuela" th:selected="${selectedCity == 'Alajuela'}">Alajuela</option>
                            <option value="Heredia" th:selected="${selectedCity == 'Heredia'}">Heredia</option>
                            <option value="San Jose" th:selected="${selectedCity == 'San Jose'}">San José</option>
                            <option value="Limon" th:selected="${selectedCity == 'Limon'}">Limón</option>
                            <option value="Cartago" th:selected="${selectedCity == 'Cartago'}">Cartago</option>
                            <option value="Puntarenas" th:selected="${selectedCity == 'Puntarenas'}">Puntarenas</option>
                            <option value="Guanacaste" th:selected="${selectedCity == 'Guanacaste'}">Guanacaste</option>
                        </select>
                    </div>


                    <div class="filter-group">
                        <label class="filter-label" for="id_producer">Buscar por Código (ID)</label>

                        <input type="number" name="id_producer" id="id_producer" th:value="${searchId}" class="filter-input" placeholder="ID (5 dígitos)" min="10000" max="99999" />
                    </div>


                    <div class="filter-buttons">
                        <button type="submit" class="btn btn-primary">
                            <span class="material-symbols-outlined icon">search</span> Filtrar
                        </button>
                        <a th:href="@{/producers/list}" class="btn btn-secondary">
                            <span class="material-symbols-outlined icon">refresh</span> Restablecer
                        </a>
                    </div>
                </div>
            </form>


            <div class="dashboard-card" th:if="${validate != null}" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning); padding: 20px;">
                <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">info</span>
                <h2 class="dashboard-card-title" style="margin-top: 10px;" th:text="${validate}">No se encontraron productores</h2>
                <p class="dashboard-card-description">Intenta con otros filtros o <a th:href="@{/producers/form}" style="color: var(--primary); font-weight: 500;">agrega nuevos productores</a>.</p>
            </div>



            <div class="table-container" th:unless="${validate != null or listP == null or listP.isEmpty()}"> 
                <div class="table-responsive">
                    <table>
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Teléfono</th>
                                <th>Fecha Registro</th> 
                                <th>Tipo</th>
                                <th>Correo</th>
                                <th>Ciudad</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr th:each="tempProducer : ${listP}">
                                <td th:text="${tempProducer.producerName}">Nombre Productor</td>
                                <td th:text="${tempProducer.contactNumber}">88888888</td> 

                                <td th:text="${tempProducer.getFormattedRegistrationDate()}">dd/MM/yyyy</td>
                                <td th:text="${tempProducer.producerType}">Persona/Empresa</td>
                                <td th:text="${tempProducer.email}">correo@ejemplo.com</td>
                                <td th:text="${tempProducer.city}">Ciudad</td>
                                <td>

                                    <span class="status" th:classappend="${tempProducer.isActive()} ? 'status-optimo' : 'status-bajo'"
                                          th:text="${tempProducer.isActive()} ? 'Activo' : 'Inactivo'">Activo/Inactivo</span>
                                </td>
                                <td>

                                    <div class="action-buttons">

                                        <a th:href="@{/producers/information(id_producer=${tempProducer.id_producer})}" class="btns view-btns" title="Ver Detalles">
                                            <span class="material-symbols-outlined icon">visibility</span>
                                        </a>
                                        <a th:href="@{/producers/edit(id_producer=${tempProducer.id_producer})}" class="btns edit-btns" title="Editar">
                                            <span class="material-symbols-outlined icon">edit</span>
                                        </a>

                                        <form th:action="@{/producers/delete}" method="post" class="confirm-action" data-message="¿Seguro que deseas eliminar este productor?">

                                            <input type="hidden" name="id_producer" th:value="${tempProducer.id_producer}" />
                                            <button type="submit" class="btns delete-btns" title="Eliminar">
                                                <span class="material-symbols-outlined icon">delete</span>
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div> 
            </div> 


            <div style="margin-top: 20px;">
                <a th:href="@{/home}" class="btn btn-secondary">
                    <span class="material-symbols-outlined icon">arrow_back</span> Volver a Inicio
                </a>
            </div>

        </div> 


        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script> 
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>
    </body>
</html>

----- FIN DE resources\templates\producers_list.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Agregar Productor - Agrow</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>


        <div class="main-content">


            <div id="swal-message"
                 th:data-mensaje="${mensaje}"
                 th:data-error="${error}">
            </div>


            <form method="post" th:action="@{/producers/save}" class="form-container confirm-action" data-message="¿Confirmar y guardar nuevo productor?">
                <div class="page-header">
                    <h1 class="page-title">Registrar Nuevo Productor</h1>
                </div>


                <div class="form-group">
                    <label class="form-label" for="producerName">Nombre Completo o Razón Social:</label>

                    <input type="text" id="producerName" name="producerName" class="form-input" required maxlength="50" pattern="^[a-zA-ZáéíóúÁÉÍÓÚñÑ. ]*$" title="Solo letras, puntos y espacios" placeholder="Ej: Finca Las Nubes S.A. o Juan Pérez"/>
                </div>

                <div class="form-group">
                    <label class="form-label" for="contactNumber">Número de Teléfono:</label>

                    <input type="tel" id="contactNumber" name="contactNumber" class="form-input" required pattern="[246789]\d{7}" title="Número de 8 dígitos válido en CR (no inicia con 1, 3, 5)" placeholder="Ej: 87654321"/>
                </div>

                <div class="form-group">
                    <label class="form-label" for="registrationDate">Fecha de Registro:</label>
                    <input type="text" id="registrationDate" name="registrationDate" class="form-input date-picker"
                           placeholder="dd/mm/aaaa (Ej: 15/10/2025)"
                           title="Fecha de registro del productor (Obligatoria)"
                           required />
                </div>

                <div class="form-group">
                    <label class="form-label" for="producerType">Tipo de Productor:</label>
                    <select id="producerType" name="producerType" class="form-select" required>
                        <option value="" disabled selected>Seleccione...</option>
                        <option value="Persona">Persona Física</option>
                        <option value="Empresa">Empresa / Jurídica</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="email">Correo Electrónico:</label>

                    <input type="email" id="email" name="email" class="form-input" required maxlength="100" placeholder="ejemplo@correo.com"/>
                </div>

                <div class="form-group">
                    <label class="form-label" for="city">Provincia:</label>

                    <select id="city" name="city" class="form-select" required>
                        <option value="" disabled selected>Seleccione...</option>
                        <option value="Alajuela">Alajuela</option>
                        <option value="Heredia">Heredia</option>
                        <option value="San Jose">San José</option>
                        <option value="Limon">Limón</option>
                        <option value="Cartago">Cartago</option>
                        <option value="Puntarenas">Puntarenas</option>
                        <option value="Guanacaste">Guanacaste</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="address">Dirección Detallada:</label>

                    <input type="text" id="address" name="address" class="form-input" required maxlength="150" placeholder="Ej: 200m Oeste de la escuela, San Rafael"/>
                </div>




                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <span class="material-symbols-outlined icon">save</span> Guardar Productor
                    </button>
                    <a th:href="@{/producers/list}" class="btn btn-secondary">
                        <span class="material-symbols-outlined icon">cancel</span> Cancelar
                    </a>
                </div>
            </form>

        </div> 


        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script> 
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>

        <script>
            document.addEventListener('DOMContentLoaded', function () {

                const today = new Date();
                const maxDateFormatted = today.toISOString().split('T')[0];

                flatpickr(".date-picker", {
                    dateFormat: "d/m/Y",
                    maxDate: "today",
                    allowInput: true,
                    defaultDate: ""
                });


                const form = document.querySelector('form');
                if (form) {
                    form.addEventListener('submit', function (event) {
                        const dateInput = document.getElementById('registrationDate');
                        const selectedDateStr = dateInput.value;
                        if (selectedDateStr) {
                            const parts = selectedDateStr.split('/');
                            if (parts.length === 3) {

                                const selectedDate = new Date(parts[2], parts[1] - 1, parts[0]);
                                if (selectedDate > today) {
                                    event.preventDefault();

                                    Swal.fire({
                                        title: 'Fecha Inválida',
                                        text: 'La fecha de registro no puede ser futura.',
                                        icon: 'error',
                                        customClass: {
                                            popup: 'swal2-agrow-popup',
                                            title: 'swal2-agrow-title',
                                            confirmButton: 'swal2-agrow-confirm'
                                        }
                                    });
                                }
                            }
                        }
                    });
                }
            });
        </script>
    </body>
</html>

----- FIN DE resources\templates\save_producer.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Agregar Proveedor - Agrow</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" th:href="@{/css/common.css}" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
</head>
<body>

    <div th:replace="~{fragments/sidebar :: sidebar}"></div>

    <div class="main-content">
        <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

        <form method="post"
              th:action="@{/suppliers/save}"
              th:object="${supplier}"
              class="form-container confirm-action"
              data-message="¿Guardar este nuevo proveedor?">

            <div class="page-header">
                <h1 class="page-title">Registrar Nuevo Proveedor</h1>
            </div>

            <div class="form-group">
                <label class="form-label" for="supplierIdentification">Identificación (ID):</label>
                <input class="form-input" type="number" id="supplierIdentification" name="supplierIdentification"
                       th:value="*{supplierIdentification > 0 ? supplierIdentification : ''}"
                       min="10000" max="999999999999999"
                       placeholder="Ej: 102340567"
                       title="ID numérico único del proveedor (5-15 dígitos)"
                       required />
            </div>

            <div class="form-group">
                <label class="form-label" for="supplierName">Contacto:</label>
                <input class="form-input" type="text" id="supplierName" name="supplierName"
                       th:value="*{supplierName}" maxlength="100"
                       placeholder="Ej: Ana Rodríguez"
                       title="Nombre de la persona de contacto"
                       pattern="[A-Za-záéíóúÁÉÍÓÚñÑ.\s]+" required />
            </div>

            <div class="form-group">
                <label class="form-label" for="companyName">Nombre de la Empresa:</label>
                <input class="form-input" type="text" id="companyName" name="companyName"
                       th:value="*{companyName}" maxlength="100"
                       placeholder="Ej: Agroinsumos del Valle S.A."
                       title="Nombre comercial o razón social de la empresa" required />
            </div>

             <div class="form-group">
                <label class="form-label" for="phoneNumber">Número de Teléfono:</label>
                <input class="form-input" type="number" id="phoneNumber" name="phoneNumber"
                       th:value="*{phoneNumber > 0 ? phoneNumber : ''}"
                       min="20000000" max="99999999"
                       placeholder="Ej: 88776655"
                       title="Número de 8 dígitos válido en CR (no inicia con 1, 3, 5)" required />
            </div>


            <div class="form-group">
                <label class="form-label" for="email">Correo Electrónico:</label>
                <input class="form-input" type="email" id="email" name="email"
                       th:value="*{email}" maxlength="100"
                       placeholder="ventas@agroinsumos.com"
                       title="Correo electrónico válido" required />
            </div>

            <div class="form-group">
                <label class="form-label" for="registrationDate">Fecha de Registro:</label>
                 <input type="text" id="registrationDate" name="registrationDate"
                        class="form-input date-picker-iso"
                        th:value="${registrationDateStr != null ? registrationDateStr : ''}"
                        placeholder="yyyy-mm-dd (Ej: 2024-05-15)"
                        title="Fecha en que se registra el proveedor (Obligatoria)" required />
            </div>

            <div class="form-group">
                 <label class="form-label">¿Proveedor Activo?</label>
                 <div style="display: flex; gap: 20px;">
                     <label style="display: flex; align-items: center; gap: 5px;">
                         <input type="radio" name="isActive" value="true" required th:checked="${supplier.isActive}"> Sí
                     </label>
                     <label style="display: flex; align-items: center; gap: 5px;">
                         <input type="radio" name="isActive" value="false" required th:checked="${!supplier.isActive && supplier.supplierIdentification != 0}"> No
                     </label>
                </div>
            </div>


            <div class="form-group">
                <label class="form-label" for="creditLimit">Límite de Crédito (CRC):</label>
                <input class="form-input" type="number" id="creditLimit" name="creditLimit"
                       th:value="*{creditLimit >= 0 ? #numbers.formatDecimal(creditLimit, 1, 2, 'POINT') : ''}"
                       step="0.01" min="0" max="99999999.99"
                       placeholder="Ej: 500000.00"
                       title="Límite de crédito en colones (0 o más)" required />
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">
                    <span class="material-symbols-outlined icon">save</span> Guardar Proveedor
                </button>
                <a th:href="@{/suppliers/list}" class="btn btn-secondary">
                    <span class="material-symbols-outlined icon">cancel</span> Cancelar
                </a>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script th:src="@{/js/app.js}"></script>
     <script>
        document.addEventListener('DOMContentLoaded', function () {
             flatpickr(".date-picker-iso", {
                dateFormat: "Y-m-d",
                allowInput: true,
                maxDate: "today"
            });
        });
    </script>
</body>
</html>

----- FIN DE resources\templates\supplier\form_supplier.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Listado de Proveedores - Agrow</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" th:href="@{/css/common.css}" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
</head>
<body>

    <div th:replace="~{fragments/sidebar :: sidebar}"></div>

    <div class="main-content">
        <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

        <div class="page-header">
            <div>
                <h1 class="page-title">Gestión de Proveedores</h1>
                <p class="page-subtitle">Visualiza y administra los proveedores registrados. Total: <span th:text="${listS != null ? listS.size() : 0}">0</span></p>
            </div>
            <a th:href="@{/suppliers/form}" class="btn btn-primary">
                <span class="material-symbols-outlined icon">add_business</span> Agregar Proveedor
            </a>
        </div>

        <form id="filter-form-supplier" th:action="@{/suppliers/list}" method="get" class="filter-section">
            <div class="filter-row">
                <div class="filter-group">
                    <label class="filter-label" for="search">Buscar por ID o Nombre</label>
                    <input type="text" id="search" name="search" th:value="${searchTerm}" class="filter-input" placeholder="ID o nombre..." maxlength="100" />
                </div>
                <div class="filter-buttons">
                    <button type="submit" class="btn btn-primary">
                        <span class="material-symbols-outlined icon">search</span> Filtrar
                    </button>
                    <a th:href="@{/suppliers/list}" class="btn btn-secondary">
                        <span class="material-symbols-outlined icon">refresh</span> Restablecer
                    </a>
                </div>
            </div>
        </form>

        <div class="dashboard-card" th:if="${validate != null}" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning); padding: 20px;">
            <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">info</span>
            <h2 class="dashboard-card-title" style="margin-top: 10px;" th:text="${validate}">No se encontraron proveedores</h2>
            <p class="dashboard-card-description">Intenta con otro término de búsqueda o <a th:href="@{/suppliers/form}" style="color: var(--primary); font-weight: 500;">agrega un nuevo proveedor</a>.</p>
        </div>

        <div class="table-container" th:unless="${validate != null or listS == null or listS.isEmpty()}">
            <div class="table-responsive">
                <table>
                    <thead>
                        <tr>
                            <th>Nombre Contacto</th>
                            <th>Empresa</th>
                            <th>Teléfono</th>
                            <th>Correo</th>
                            <th>Fecha Registro</th>
                            <th>Estado</th>
                            <th>Límite Crédito</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr th:each="tempSupplier : ${listS}">
                            <td th:text="${tempSupplier.supplierName}"></td>
                            <td th:text="${tempSupplier.companyName}"></td>
                            <td th:text="${tempSupplier.getFormattedPhoneNumber()}"></td>
                            <td th:text="${tempSupplier.email}"></td>
                            <td th:text="${tempSupplier.getFormattedRegistrationDate()}"></td>
                            <td>
                                <span class="status" th:classappend="${tempSupplier.isActive()} ? 'status-optimo' : 'status-bajo'"
                                      th:text="${tempSupplier.isActive()} ? 'Activo' : 'Inactivo'"></span>
                            </td>
                            <td class="price-display" th:attr="data-value=${tempSupplier.creditLimit}" th:text="${#numbers.formatCurrency(tempSupplier.creditLimit)}"></td>
                            <td>
                                <div class="action-buttons">
                                    <a th:href="@{/suppliers/view(id=${tempSupplier.supplierIdentification})}" class="btns view-btns" title="Ver Detalles">
                                        <span class="material-symbols-outlined icon">visibility</span>
                                    </a>
                                    <a th:href="@{/suppliers/edit(id=${tempSupplier.supplierIdentification})}" class="btns edit-btns" title="Editar">
                                        <span class="material-symbols-outlined icon">edit</span>
                                    </a>
                                    <form th:action="@{/suppliers/delete}" method="post" class="confirm-action" data-message="¿Seguro que deseas eliminar este proveedor?" data-title="Confirmar Eliminación" style="margin:0; padding:0; display:inline;">
                                        <input type="hidden" name="id" th:value="${tempSupplier.supplierIdentification}" />
                                        <button type="submit" class="btns delete-btns" title="Eliminar">
                                            <span class="material-symbols-outlined icon">delete</span>
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div style="margin-top: 20px;">
            <a th:href="@{/home}" class="btn btn-secondary">
                <span class="material-symbols-outlined icon">arrow_back</span> Volver a Inicio
            </a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script th:src="@{/js/app.js}"></script>
</body>
</html>

----- FIN DE resources\templates\supplier\supplier_list.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Actualizar Proveedor - Agrow</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" th:href="@{/css/common.css}" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
</head>
<body>

    <div th:replace="~{fragments/sidebar :: sidebar}"></div>

    <div class="main-content">
        <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

        <div th:if="${supplier != null}">
            <form method="post"
                  th:action="@{/suppliers/update}"
                  th:object="${supplier}"
                  class="form-container confirm-action"
                  data-message="¿Confirmar actualización de datos del proveedor?">

                <div class="page-header">
                     <h1 class="page-title">Actualizar Proveedor: <span th:text="*{companyName}"></span> (<span th:text="*{supplierIdentification}"></span>)</h1>
                </div>

                 <input type="hidden" th:field="*{supplierIdentification}" />


                 <div class="form-group">
                    <label class="form-label" for="supplierIdentificationRead">Identificación (ID):</label>
                    <input class="form-input" type="text" id="supplierIdentificationRead" th:value="*{supplierIdentification}" readonly disabled/>
                 </div>

                 <div class="form-group">
                     <label class="form-label" for="supplierName">Nombre del Contacto:</label>
                     <input class="form-input" type="text" th:field="*{supplierName}" maxlength="100"
                            placeholder="Ej: Ana Rodríguez"
                            title="Nombre de la persona de contacto"
                            pattern="[A-Za-záéíóúÁÉÍÓÚñÑ.\s]+" required />
                 </div>

                 <div class="form-group">
                     <label class="form-label" for="companyName">Nombre de la Empresa:</label>
                     <input class="form-input" type="text" th:field="*{companyName}" maxlength="100"
                            placeholder="Ej: Agroinsumos del Valle S.A."
                            title="Nombre comercial o razón social de la empresa" required />
                 </div>

                 <div class="form-group">
                    <label class="form-label" for="phoneNumber">Número de Teléfono:</label>
                     <input class="form-input" type="number" th:field="*{phoneNumber}"
                           min="20000000" max="99999999"
                           placeholder="Ej: 88776655"
                           title="Número de 8 dígitos válido en CR (no inicia con 1, 3, 5)" required />
                </div>

                 <div class="form-group">
                     <label class="form-label" for="email">Correo Electrónico:</label>
                     <input class="form-input" type="email" th:field="*{email}" maxlength="100"
                            placeholder="ventas@agroinsumos.com"
                            title="Correo electrónico válido" required />
                 </div>

                 <div class="form-group">
                     <label class="form-label" for="registrationDate">Fecha de Registro:</label>
                     <input type="text" id="registrationDate" name="registrationDate"
                           class="form-input date-picker-iso"
                           th:value="*{registrationDateForInput}"
                           placeholder="yyyy-mm-dd"
                           title="Fecha en que se registró el proveedor (Obligatoria)" required />
                 </div>

                 <div class="form-group">
                    <label class="form-label">¿Proveedor Activo?</label>
                    <div style="display: flex; gap: 20px;">
                         <label style="display: flex; align-items: center; gap: 5px;">
                             <input type="radio" name="isActive" value="true" required th:checked="*{isActive}"> Sí
                         </label>
                         <label style="display: flex; align-items: center; gap: 5px;">
                             <input type="radio" name="isActive" value="false" required th:checked="!*{isActive}"> No
                         </label>
                    </div>
                 </div>


                 <div class="form-group">
                     <label class="form-label" for="creditLimit">Límite de Crédito (CRC):</label>
                     <input class="form-input" type="number" th:field="*{creditLimit}"
                            step="0.01" min="0" max="99999999.99"
                            placeholder="Ej: 500000.00"
                            title="Límite de crédito en colones (0 o más)" required />
                 </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <span class="material-symbols-outlined icon">save</span> Actualizar Proveedor
                    </button>
                    <a th:href="@{/suppliers/list}" class="btn btn-secondary">
                        <span class="material-symbols-outlined icon">cancel</span> Cancelar
                    </a>
                </div>
            </form>
        </div>

        <div th:if="${supplier == null}" class="dashboard-card" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning);">
            <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">person_search</span>
            <h2 class="dashboard-card-title">Proveedor no encontrado</h2>
            <p class="dashboard-card-description">El ID proporcionado no corresponde a un proveedor que se pueda editar.</p>
            <a th:href="@{/suppliers/list}" class="btn btn-secondary" style="margin-top: 15px;">
                <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
            </a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script th:src="@{/js/app.js}"></script>
     <script>
        document.addEventListener('DOMContentLoaded', function () {
             flatpickr(".date-picker-iso", {
                dateFormat: "Y-m-d",
                allowInput: true,
                maxDate: "today"
            });
        });
    </script>
</body>
</html>

----- FIN DE resources\templates\supplier\update_supplier.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Detalle del Proveedor - Agrow</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" th:href="@{/css/common.css}" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
</head>
<body>

    <div th:replace="~{fragments/sidebar :: sidebar}"></div>

    <div class="main-content">
        <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

        <div class="detail-container" th:if="${supplier != null}" th:object="${supplier}">
            <div class="detail-header">
                <div class="detail-icon" style="background-color: #e3f2fd; color: #2196f3;">
                    <span class="material-symbols-outlined">business_center</span>
                </div>
                <div>
                    <h2 class="page-title" th:text="*{companyName}">Nombre de la Empresa</h2>
                    <p class="page-subtitle" style="margin-top: -5px;">ID: <span th:text="*{supplierIdentification}"></span></p>
                </div>
            </div>
            <table class="detail-table">
                <tr>
                    <td>ID Proveedor:</td>
                    <td th:text="*{supplierIdentification}">0</td>
                </tr>
                <tr>
                    <td>Nombre Contacto:</td>
                    <td th:text="*{supplierName}">Nombre Contacto</td>
                </tr>
                <tr>
                    <td>Nombre Empresa:</td>
                    <td th:text="*{companyName}">Empresa XYZ</td>
                </tr>
                <tr>
                    <td>Teléfono:</td>
                    <td th:text="*{getFormattedPhoneNumber()}">0000-0000</td>
                </tr>
                <tr>
                    <td>Correo Electrónico:</td>
                    <td th:text="*{email}">correo@ejemplo.com</td>
                </tr>
                <tr>
                    <td>Fecha de Registro:</td>
                    <td th:text="*{getFormattedRegistrationDate()}">dd/MM/yyyy</td>
                </tr>
                <tr>
                    <td>Estado:</td>
                    <td>
                        <span class="status" th:classappend="*{isActive()} ? 'status-optimo' : 'status-bajo'"
                              th:text="*{isActive()} ? 'Activo' : 'Inactivo'">Activo/Inactivo</span>
                    </td>
                </tr>
                <tr>
                    <td>Límite de Crédito:</td>
                    <td class="price-display" th:attr="data-value=*{creditLimit}" th:text="${#numbers.formatCurrency(supplier.creditLimit)}">
                        ₡0.00
                    </td>
                </tr>
            </table>

            <div class="detail-actions">
                <a th:href="@{/suppliers/edit(id=*{supplierIdentification})}" class="btn btn-warning">
                    <span class="material-symbols-outlined icon">edit</span> Editar
                </a>
                <a th:href="@{/suppliers/list}" class="btn btn-secondary">
                    <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
                </a>
            </div>
        </div>

        <div th:if="${supplier == null}" class="dashboard-card" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning);">
            <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">person_off</span>
            <h2 class="dashboard-card-title">Proveedor no encontrado</h2>
            <p class="dashboard-card-description">El proveedor solicitado no existe o fue eliminado.</p>
            <a th:href="@{/suppliers/list}" class="btn btn-secondary" style="margin-top: 15px;">
                <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
            </a>
        </div>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script th:src="@{/js/app.js}"></script>
</body>
</html>

----- FIN DE resources\templates\supplier\view_supplier.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Actualizar Productor - Agrow</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" />

        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>


        <div class="main-content">


            <div id="swal-message"
                 th:data-mensaje="${mensaje}"
                 th:data-error="${error}">
            </div>


            <div th:if="${producer != null}">

                <form method="post" th:action="@{/producers/update}" th:object="${producer}" class="form-container confirm-action" data-message="¿Confirmar actualización de datos?">
                    <div class="page-header">
                        <h1 class="page-title">Actualizar Productor: <span th:text="*{producerName}"></span> (<span th:text="*{id_producer}"></span>)</h1>
                    </div>


                    <input type="hidden" th:field="*{id_producer}" />

                    <div class="form-group">
                        <label class="form-label" for="producerName">Nombre Completo o Razón Social:</label>

                        <input type="text" th:field="*{producerName}" class="form-input" required maxlength="50" pattern="^[a-zA-ZáéíóúÁÉÍÓÚñÑ. ]*$" title="Solo letras, puntos y espacios"/>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="contactNumber">Número de Teléfono:</label>

                        <input type="tel" th:field="*{contactNumber}" class="form-input" required pattern="[246789]\d{7}" title="Número de 8 dígitos válido en CR (no inicia con 1, 3, 5)"/>
                    </div>


                    <div class="form-group">
                        <label class="form-label" for="registrationDate">Fecha de Registro:</label>
                        <input type="text"
                               id="registrationDate"
                               name="registrationDate"
                               class="form-input date-picker"
                               th:value="${producer.registrationDate == null 
                               ? '' 
                               : producer.registrationDate.format(T(java.time.format.DateTimeFormatter).ofPattern('dd/MM/yyyy'))}"
                               placeholder="dd/MM/yyyy"
                               title="Fecha de registro (dd/MM/yyyy)"
                               required />
                    </div>


                    <div class="form-group">
                        <label class="form-label" for="producerType">Tipo de Productor:</label>
                        <select th:field="*{producerType}" class="form-select" required>
                            <option value="" disabled>Seleccione...</option>
                            <option value="Persona">Persona Física</option>
                            <option value="Empresa">Empresa / Jurídica</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="email">Correo Electrónico:</label>
                        <input type="email" th:field="*{email}" class="form-input" required maxlength="100"/>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="city">Provincia:</label>
                        <select th:field="*{city}" class="form-select" required>
                            <option value="" disabled>Seleccione...</option>
                            <option value="Alajuela">Alajuela</option>
                            <option value="Heredia">Heredia</option>
                            <option value="San Jose">San José</option> 
                            <option value="Limon">Limón</option> 
                            <option value="Cartago">Cartago</option>
                            <option value="Puntarenas">Puntarenas</option>
                            <option value="Guanacaste">Guanacaste</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="address">Dirección Detallada:</label>
                        <input type="text" th:field="*{address}" class="form-input" required maxlength="150"/>
                    </div>


                    <div class="form-group">
                        <div class="form-check" style="display: flex; align-items: center; gap: 10px;">

                            <input type="checkbox" th:field="*{isActive}" id="isActive" class="form-input" style="width: auto; height: auto;"/> 
                            <label for="isActive" class="form-label" style="margin-bottom: 0;">Productor Activo</label>
                        </div>



                        <input type="hidden" name="_isActive" value="on"/>
                    </div>


                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <span class="material-symbols-outlined icon">save</span> Actualizar Datos
                        </button>
                        <a th:href="@{/producers/list}" class="btn btn-secondary">
                            <span class="material-symbols-outlined icon">cancel</span> Cancelar
                        </a>
                    </div>
                </form>
            </div>


            <div th:if="${producer == null}" class="dashboard-card" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning);">
                <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">person_search</span>
                <h2 class="dashboard-card-title">Productor no encontrado</h2>
                <p class="dashboard-card-description">El ID proporcionado no corresponde a un productor registrado que se pueda editar.</p>
                <a th:href="@{/producers/list}" class="btn btn-secondary" style="margin-top: 15px;">
                    <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
                </a>
            </div>

        </div> 


        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script> 
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                flatpickr(".date-picker", {
                    dateFormat: "d/m/Y",
                    allowInput: true,
                    maxDate: "today"
                });
            });
        </script>
    </body>
</html>

----- FIN DE resources\templates\update_producer.html -----

<!DOCTYPE html>
<html lang="es" xmlns:th="http://www.thymeleaf.org">
    <head>
        <title>Detalle del Suministro - Agrow</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="stylesheet" th:href="@{/css/common.css}" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    </head>
    <body>

        <div th:replace="~{fragments/sidebar :: sidebar}"></div>

        <div class="main-content">
            <div id="swal-message" th:data-mensaje="${mensaje}" th:data-error="${error}"></div>

            <div class="detail-container" th:if="${supply != null}" th:object="${supply}">
                <div class="detail-header">
                    <div class="detail-icon">
                        <span class="material-symbols-outlined">inventory_2</span>
                    </div>
                    <div>
                        <h2 class="page-title" th:text="*{name}">Nombre del Suministro</h2>
                        <p class="page-subtitle" style="margin-top: -5px;">Detalles del Insumo</p>
                    </div>
                </div>
                <table class="detail-table">
                    <tr>
                        <td>ID Suministro:</td>
                        <td th:text="*{idSupply}">0</td>
                    </tr>
                    <tr>
                        <td>Nombre:</td>
                        <td th:text="*{name}">Nombre del Suministro</td>
                    </tr>
                    <tr>
                        <td>Categoría:</td>
                        <td th:text="*{category}">Categoría</td>
                    </tr>
                    <tr>
                        <td>Stock Actual:</td>
                        <td th:text="${#numbers.formatDecimal(supply.stock, 1, 2, 'POINT')}">0.00</td>
                    </tr>
                    <tr>
                        <td>Stock Mínimo:</td>
                        <td th:text="${#numbers.formatDecimal(supply.stockMinimo, 1, 2, 'POINT')}">0.00</td>
                    </tr>
                    <tr>
                        <td>Estado del Stock:</td>
                        <td>
                            <span class="status"
                                  th:classappend="${#strings.equalsIgnoreCase(supply.estado, 'Bajo')} ? ' status-bajo' : (${#strings.equalsIgnoreCase(supply.estado, 'Agotado')} ? ' status-danger' : ' status-optimo')"
                                  th:text="*{estado}">Óptimo/Bajo/Agotado</span>
                        </td>
                    </tr>
                    <tr>
                        <td>Unidad de Medida:</td>
                        <td th:text="*{unitType}">Unidad</td>
                    </tr>
                    <tr>
                        <td>Precio por Unidad:</td>
                        <td class="price-display" th:attr="data-value=*{pricePerUnit}" th:text="${#numbers.formatCurrency(supply.pricePerUnit)}">
                            ₡0.00
                        </td>
                    </tr>
                    <tr>
                        <td>Fecha de Vencimiento:</td>
                        <td th:text="*{getFormattedExpirationDate()}">dd/MM/yyyy</td>
                    </tr>
                    <tr>
                        <td>Proveedor:</td>
                         <td th:text="${supply.getSupplierName() + ' (ID: ' + supply.supplierId + ')'}">Proveedor (ID: 0)</td>
                    </tr>
                </table>

                <div class="detail-actions">
                    <a th:href="@{/supplies/edit(idSupply=*{idSupply})}" class="btn btn-warning">
                        <span class="material-symbols-outlined icon">edit</span> Editar
                    </a>
                    <a th:href="@{/supplies/list}" class="btn btn-secondary">
                        <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
                    </a>
                </div>
            </div>

            <div th:if="${supply == null}" class="dashboard-card" style="text-align: center; margin-top: 20px; background-color: var(--warning-light-alt); border-color: var(--warning);">
                <span class="material-symbols-outlined icon" style="font-size: 40px; color: var(--warning-text-alt);">error_outline</span>
                <h2 class="dashboard-card-title">Suministro no encontrado</h2>
                <p class="dashboard-card-description">El suministro solicitado no existe o fue eliminado.</p>
                <a th:href="@{/supplies/list}" class="btn btn-secondary" style="margin-top: 15px;">
                    <span class="material-symbols-outlined icon">arrow_back</span> Volver al Listado
                </a>
            </div>

        </div>

        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script th:src="@{/js/app.js}"></script>
    </body>
</html>

----- FIN DE resources\templates\view_supply.html -----

